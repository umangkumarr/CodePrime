"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[5792],{3905:function(e,r,t){t.d(r,{Zo:function(){return m},kt:function(){return d}});var a=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var u=a.createContext({}),s=function(e){var r=a.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},m=function(e){var r=s(e.components);return a.createElement(u.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},p=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,u=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=s(t),d=n,f=p["".concat(u,".").concat(d)]||p[d]||c[d]||o;return t?a.createElement(f,l(l({ref:r},m),{},{components:t})):a.createElement(f,l({ref:r},m))}));function d(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var u in r)hasOwnProperty.call(r,u)&&(i[u]=r[u]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8215:function(e,r,t){var a=t(7294);r.Z=function(e){var r=e.children,t=e.hidden,n=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:n},r)}},9877:function(e,r,t){t.d(r,{Z:function(){return m}});var a=t(7462),n=t(7294),o=t(2389),l=t(9548),i=t(6010),u="tabItem_LplD";function s(e){var r,t,o,s=e.lazy,m=e.block,c=e.defaultValue,p=e.values,d=e.groupId,f=e.className,b=n.Children.map(e.children,(function(e){if((0,n.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=p?p:b.map((function(e){var r=e.props;return{value:r.value,label:r.label,attributes:r.attributes}})),h=(0,l.lx)(v,(function(e,r){return e.value===r.value}));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===c?c:null!=(r=null!=c?c:null==(t=b.find((function(e){return e.props.default})))?void 0:t.props.value)?r:null==(o=b[0])?void 0:o.props.value;if(null!==y&&!v.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=(0,l.UB)(),g=k.tabGroupChoices,x=k.setTabGroupChoices,S=(0,n.useState)(y),N=S[0],D=S[1],P=[],w=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var E=g[d];null!=E&&E!==N&&v.some((function(e){return e.value===E}))&&D(E)}var O=function(e){var r=e.currentTarget,t=P.indexOf(r),a=v[t].value;a!==N&&(w(r),D(a),null!=d&&x(d,a))},_=function(e){var r,t=null;switch(e.key){case"ArrowRight":var a=P.indexOf(e.currentTarget)+1;t=P[a]||P[0];break;case"ArrowLeft":var n=P.indexOf(e.currentTarget)-1;t=P[n]||P[P.length-1]}null==(r=t)||r.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":m},f)},v.map((function(e){var r=e.value,t=e.label,o=e.attributes;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===r?0:-1,"aria-selected":N===r,key:r,ref:function(e){return P.push(e)},onKeyDown:_,onFocus:O,onClick:O},o,{className:(0,i.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":N===r})}),null!=t?t:r)}))),s?(0,n.cloneElement)(b.filter((function(e){return e.props.value===N}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},b.map((function(e,r){return(0,n.cloneElement)(e,{key:r,hidden:e.props.value!==N})}))))}function m(e){var r=(0,o.Z)();return n.createElement(s,(0,a.Z)({key:String(r)},e))}},250:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return s},contentTitle:function(){return m},metadata:function(){return c},toc:function(){return p},default:function(){return f}});var a=t(7462),n=t(3366),o=(t(7294),t(3905)),l=t(9877),i=t(8215),u=["components"],s={sidebar_position:4,tags:["Array","Divide and Conquer","Dynamic Programming"]},m="Maximum Subarray",c={unversionedId:"Problems/StriverSDESheet/Day1/Maximum Subarray",id:"Problems/StriverSDESheet/Day1/Maximum Subarray",title:"Maximum Subarray",description:"Problem",source:"@site/docs/Problems/StriverSDESheet/Day1/Maximum Subarray.md",sourceDirName:"Problems/StriverSDESheet/Day1",slug:"/Problems/StriverSDESheet/Day1/Maximum Subarray",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day1/Maximum Subarray",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Problems/StriverSDESheet/Day1/Maximum Subarray.md",tags:[{label:"Array",permalink:"/CodePrime/docs/tags/array"},{label:"Divide and Conquer",permalink:"/CodePrime/docs/tags/divide-and-conquer"},{label:"Dynamic Programming",permalink:"/CodePrime/docs/tags/dynamic-programming"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,tags:["Array","Divide and Conquer","Dynamic Programming"]},sidebar:"api",previous:{title:"Next Permutation",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day1/Next Permutation"},next:{title:"Sort Colors",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day1/Sort Colors"}},p=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:p};function f(e){var r=e.components,t=(0,n.Z)(e,u);return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"maximum-subarray"},"Maximum Subarray"),(0,o.kt)("h2",{id:"problem"},(0,o.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/maximum-subarray/"},"Problem")),(0,o.kt)("p",null,"Given an integer array ",(0,o.kt)("code",null,"nums"),", find the contiguous subarray (containing at least one number) which has the largest sum and return ",(0,o.kt)("em",null,"its sum"),"."),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",null,"subarray")," is a ",(0,o.kt)("strong",null,"contiguous")," part of an array."),(0,o.kt)("p",null,"\xa0"),(0,o.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,o.kt)("p",null,"Expected Time complexity: ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mi",{parentName:"mrow"},"O"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,o.kt)("mi",{parentName:"mrow"},"n"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,o.kt)("span",{parentName:"span",className:"mopen"},"("),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,o.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Click - to see solution code"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    int maxSubArray(vector<int>& nums) {\n        int ans = *max_element(nums.begin(), nums.end());\n        int n = nums.size();\n        int max_so_far = 0, max_till_here = 0;\n\n        for (int i = 0; i < n; i++) {\n            max_till_here += nums[i];\n            if (max_till_here > max_so_far) max_so_far = max_till_here;\n            if (max_till_here < 0) max_till_here = 0;\n        }\n        if (ans < 0) return ans;\n        return max_so_far;\n    }\n};\n"))))))}f.isMDXComponent=!0}}]);