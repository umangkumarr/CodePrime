"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[5880],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(4334);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(3117),r=n(7294),l=n(4334),o=n(2389),i=n(7392),s=n(7094),p=n(2466);const c="tabList__CuJ",d="tabItem_LNqP";function u(e){var t,n;const{lazy:o,block:u,defaultValue:m,values:f,groupId:k,className:h}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=f?f:y.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,i.l)(v,((e,t)=>e.value===t.value));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const N=null===m?m:null!=(t=null!=m?m:null==(n=y.find((e=>e.props.default)))?void 0:n.props.value)?t:y[0].props.value;if(null!==N&&!v.some((e=>e.value===N)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+v.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:g,setTabGroupChoices:w}=(0,s.U)(),[x,O]=(0,r.useState)(N),q=[],{blockElementScrollPositionUntilNextRender:T}=(0,p.o5)();if(null!=k){const e=g[k];null!=e&&e!==x&&v.some((t=>t.value===e))&&O(e)}const L=e=>{const t=e.currentTarget,n=q.indexOf(t),a=v[n].value;a!==x&&(T(t),O(a),null!=k&&w(k,String(a)))},C=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=q.indexOf(e.currentTarget)+1;n=null!=(a=q[t])?a:q[0];break}case"ArrowLeft":{var r;const t=q.indexOf(e.currentTarget)-1;n=null!=(r=q[t])?r:q[q.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":u},h)},v.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:e=>q.push(e),onKeyDown:C,onFocus:L,onClick:L},o,{className:(0,l.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),o?(0,r.cloneElement)(y.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})))))}function m(e){const t=(0,o.Z)();return r.createElement(u,(0,a.Z)({key:String(t)},e))}},6304:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var a=n(3117),r=(n(7294),n(3905)),l=n(5488),o=n(5162);const i={sidebar_position:84,tags:["Hash Table","Linked List","Design","Doubly-Linked List"]},s="LFU Cache",p={unversionedId:"codes/lfu-cache",id:"codes/lfu-cache",title:"LFU Cache",description:"Problem",source:"@site/docs/codes/lfu-cache.md",sourceDirName:"codes",slug:"/codes/lfu-cache",permalink:"/CodePrime/docs/codes/lfu-cache",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/lfu-cache.md",tags:[{label:"Hash Table",permalink:"/CodePrime/docs/tags/hash-table"},{label:"Linked List",permalink:"/CodePrime/docs/tags/linked-list"},{label:"Design",permalink:"/CodePrime/docs/tags/design"},{label:"Doubly-Linked List",permalink:"/CodePrime/docs/tags/doubly-linked-list"}],version:"current",sidebarPosition:84,frontMatter:{sidebar_position:84,tags:["Hash Table","Linked List","Design","Doubly-Linked List"]},sidebar:"Leetcode",previous:{title:"Rotting Oranges",permalink:"/CodePrime/docs/codes/rotting-oranges"},next:{title:"Online Stock Span",permalink:"/CodePrime/docs/codes/online-stock-span"}},c={},d=[{value:"Problem",id:"problem",level:2},{value:"Solution Approach",id:"solution-approach",level:2}],u={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lfu-cache"},"LFU Cache"),(0,r.kt)("h2",{id:"problem"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/lfu-cache/"},"Problem")),(0,r.kt)("p",null,"Design and implement a data structure for a ",(0,r.kt)("a",{href:"https://en.wikipedia.org/wiki/Least_frequently_used",target:"_blank"},"Least Frequently Used (LFU)")," cache."),(0,r.kt)("p",null,"Implement the ",(0,r.kt)("code",null,"LFUCache")," class:"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("code",null,"LFUCache(int capacity)")," Initializes the object with the ",(0,r.kt)("code",null,"capacity")," of the data structure."),(0,r.kt)("li",null,(0,r.kt)("code",null,"int get(int key)")," Gets the value of the ",(0,r.kt)("code",null,"key")," if the ",(0,r.kt)("code",null,"key")," exists in the cache. Otherwise, returns ",(0,r.kt)("code",null,"-1"),"."),(0,r.kt)("li",null,(0,r.kt)("code",null,"void put(int key, int value)")," Update the value of the ",(0,r.kt)("code",null,"key")," if present, or inserts the ",(0,r.kt)("code",null,"key")," if not already present. When the cache reaches its ",(0,r.kt)("code",null,"capacity"),", it should invalidate and remove the ",(0,r.kt)("strong",null,"least frequently used")," key before inserting a new item. For this problem, when there is a ",(0,r.kt)("strong",null,"tie")," (i.e., two or more keys with the same frequency), the ",(0,r.kt)("strong",null,"least recently used")," ",(0,r.kt)("code",null,"key")," would be invalidated.")),(0,r.kt)("p",null,"To determine the least frequently used key, a ",(0,r.kt)("strong",null,"use counter")," is maintained for each key in the cache. The key with the smallest ",(0,r.kt)("strong",null,"use counter")," is the least frequently used key."),(0,r.kt)("p",null,"When a key is first inserted into the cache, its ",(0,r.kt)("strong",null,"use counter")," is set to ",(0,r.kt)("code",null,"1")," (due to the ",(0,r.kt)("code",null,"put")," operation). The ",(0,r.kt)("strong",null,"use counter")," for a key in the cache is incremented either a ",(0,r.kt)("code",null,"get")," or ",(0,r.kt)("code",null,"put")," operation is called on it."),(0,r.kt)("p",null,"The functions\xa0",(0,r.kt)("code",{"data-stringify-type":"code"},"get"),"\xa0and\xa0",(0,r.kt)("code",{"data-stringify-type":"code"},"put"),"\xa0must each run in ",(0,r.kt)("code",null,"O(1)")," average time complexity."),(0,r.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,r.kt)("p",null,"Expected Time complexity: ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click - to see solution code"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"struct Node {\n    int key, value, freq;\n    Node *next;\n    Node *prev;\n    Node(int k, int v, int f) {\n        key = k, value = v, freq = f;\n        next = prev = NULL;\n    }\n};\n\nstruct dlist {\n    Node *head, *tail;\n    int size;\n\n    dlist() {\n        head = new Node(-1, -1, 0);\n        tail = new Node(-1, -1, 0);\n        head->next = tail;\n        tail->prev = head;\n        size = 0;\n    }\n\n    Node *addNode(int k, int v, int f) {\n        size++;\n        Node *newNode = new Node(k, v, f);\n        newNode->next = head->next;\n        head->next->prev = newNode;\n        newNode->prev = head;\n        head->next = newNode;\n        return newNode;\n    }\n\n    void delNode(Node *&node) {\n        size--;\n        node->prev->next = node->next;\n        node->next->prev = node->prev;\n    }\n\n    int empty() { return size == 0; }\n};\n\nclass LFUCache {\n    int cap, cnt, mf;\n    map<int, Node *> mp;\n    map<int, dlist *> fmap;\n\n   public:\n    LFUCache(int capacity) {\n        cap = capacity;\n        cnt = 0;\n        mf = 0;\n    }\n\n    int get(int key) {\n        if (mp.find(key) == mp.end()) return -1;\n        Node *ptr = mp[key];\n        fmap[ptr->freq]->delNode(ptr);\n        cnt--;\n        if (fmap[ptr->freq]->empty()) {\n            if (mf == ptr->freq) mf = ptr->freq + 1;\n            fmap.erase(ptr->freq);\n        }\n\n        if (fmap.find(ptr->freq + 1) != fmap.end()) {\n            Node *ptrr =\n                fmap[ptr->freq + 1]->addNode(key, ptr->value, ptr->freq + 1);\n            mp[key] = ptrr;\n            cnt++;\n        } else {\n            cnt++;\n            dlist *ptrr = new dlist();\n            fmap[ptr->freq + 1] = ptrr;\n            Node *node =\n                fmap[ptr->freq + 1]->addNode(key, ptr->value, ptr->freq + 1);\n            mp[key] = node;\n        }\n\n        return ptr->value;\n    }\n\n    void put(int key, int value) {\n        if (cap == 0) return;\n        if (mp.find(key) != mp.end()) {\n            Node *ptr = mp[key];\n            fmap[ptr->freq]->delNode(ptr);\n            if (fmap[ptr->freq]->empty()) {\n                if (mf == ptr->freq) mf = ptr->freq + 1;\n                fmap.erase(ptr->freq);\n            }\n            if (fmap.find(ptr->freq + 1) != fmap.end()) {\n                Node *node =\n                    fmap[ptr->freq + 1]->addNode(key, value, ptr->freq + 1);\n                mp[key] = node;\n            } else {\n                dlist *ptrr = new dlist();\n                fmap[ptr->freq + 1] = ptrr;\n                Node *node =\n                    fmap[ptr->freq + 1]->addNode(key, value, ptr->freq + 1);\n                mp[key] = node;\n            }\n            return;\n        }\n\n        if (cnt == cap) {\n            Node *ptr = fmap[mf]->tail->prev;\n            fmap[mf]->delNode(ptr);\n            cnt--;\n            if (fmap[mf]->empty()) {\n                fmap.erase(mf);\n            }\n            mp.erase(ptr->key);\n        }\n\n        mf = 0;\n        if (fmap.find(mf) != fmap.end()) {\n            Node *ptr = fmap[mf]->addNode(key, value, mf);\n            mp[key] = ptr;\n            cnt++;\n            return;\n        }\n\n        cnt++;\n        dlist *ptr = new dlist();\n        fmap[mf] = ptr;\n        Node *node = fmap[mf]->addNode(key, value, mf);\n        mp[key] = node;\n    }\n};\n\n\n"))))))}m.isMDXComponent=!0}}]);