"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[9564],{3905:function(e,r,t){t.d(r,{Zo:function(){return c},kt:function(){return m}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),u=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return t?n.createElement(f,o(o({ref:r},c),{},{components:t})):n.createElement(f,o({ref:r},c))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8215:function(e,r,t){var n=t(7294);r.Z=function(e){var r=e.children,t=e.hidden,a=e.className;return n.createElement("div",{role:"tabpanel",hidden:t,className:a},r)}},9877:function(e,r,t){t.d(r,{Z:function(){return c}});var n=t(7462),a=t(7294),i=t(2389),o=t(9548),l=t(6010),s="tabItem_LplD";function u(e){var r,t,i,u=e.lazy,c=e.block,d=e.defaultValue,p=e.values,m=e.groupId,f=e.className,h=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=p?p:h.map((function(e){var r=e.props;return{value:r.value,label:r.label,attributes:r.attributes}})),v=(0,o.lx)(b,(function(e,r){return e.value===r.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===d?d:null!=(r=null!=d?d:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?r:null==(i=h[0])?void 0:i.props.value;if(null!==g&&!b.some((function(e){return e.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,o.UB)(),k=y.tabGroupChoices,N=y.setTabGroupChoices,w=(0,a.useState)(g),T=w[0],z=w[1],O=[],j=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var C=k[m];null!=C&&C!==T&&b.some((function(e){return e.value===C}))&&z(C)}var D=function(e){var r=e.currentTarget,t=O.indexOf(r),n=b[t].value;n!==T&&(j(r),z(n),null!=m&&N(m,n))},E=function(e){var r,t=null;switch(e.key){case"ArrowRight":var n=O.indexOf(e.currentTarget)+1;t=O[n]||O[0];break;case"ArrowLeft":var a=O.indexOf(e.currentTarget)-1;t=O[a]||O[O.length-1]}null==(r=t)||r.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":c},f)},b.map((function(e){var r=e.value,t=e.label,i=e.attributes;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===r?0:-1,"aria-selected":T===r,key:r,ref:function(e){return O.push(e)},onKeyDown:E,onFocus:D,onClick:D},i,{className:(0,l.Z)("tabs__item",s,null==i?void 0:i.className,{"tabs__item--active":T===r})}),null!=t?t:r)}))),u?(0,a.cloneElement)(h.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map((function(e,r){return(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==T})}))))}function c(e){var r=(0,i.Z)();return a.createElement(u,(0,n.Z)({key:String(r)},e))}},3248:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return p},default:function(){return f}});var n=t(7462),a=t(3366),i=(t(7294),t(3905)),o=t(9877),l=t(8215),s=["components"],u={sidebar_position:24,tags:["String","Tree","Depth-First Search","Breadth-First Search","Design","Binary Tree"]},c="Serialize and Deserialize Binary Tree",d={unversionedId:"codes/serialize-and-deserialize-binary-tree",id:"codes/serialize-and-deserialize-binary-tree",title:"Serialize and Deserialize Binary Tree",description:"Problem",source:"@site/docs/codes/serialize-and-deserialize-binary-tree.md",sourceDirName:"codes",slug:"/codes/serialize-and-deserialize-binary-tree",permalink:"/CodePrime/docs/codes/serialize-and-deserialize-binary-tree",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/serialize-and-deserialize-binary-tree.md",tags:[{label:"String",permalink:"/CodePrime/docs/tags/string"},{label:"Tree",permalink:"/CodePrime/docs/tags/tree"},{label:"Depth-First Search",permalink:"/CodePrime/docs/tags/depth-first-search"},{label:"Breadth-First Search",permalink:"/CodePrime/docs/tags/breadth-first-search"},{label:"Design",permalink:"/CodePrime/docs/tags/design"},{label:"Binary Tree",permalink:"/CodePrime/docs/tags/binary-tree"}],version:"current",sidebarPosition:24,frontMatter:{sidebar_position:24,tags:["String","Tree","Depth-First Search","Breadth-First Search","Design","Binary Tree"]}},p=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],m={toc:p};function f(e){var r=e.components,t=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"serialize-and-deserialize-binary-tree"},"Serialize and Deserialize Binary Tree"),(0,i.kt)("h2",{id:"problem"},(0,i.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/serialize-and-deserialize-binary-tree/"},"Problem")),(0,i.kt)("p",null,"Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment."),(0,i.kt)("p",null,"Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure."),(0,i.kt)("p",null,(0,i.kt)("strong",null,"Clarification:")," The input/output format is the same as ",(0,i.kt)("a",{href:"/faq/#binary-tree",target:"_blank"},"how LeetCode serializes a binary tree"),". You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself."),(0,i.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,i.kt)("p",null,"Decode the given tree as follows: ",(0,i.kt)("br",null),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"node_value"),"L(",(0,i.kt)("inlineCode",{parentName:"p"},"here_discribe_left_subtree"),")R(",(0,i.kt)("inlineCode",{parentName:"p"},"here_describe_right_subtree"),")"),(0,i.kt)("p",null,"Expected Time complexity: ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"O"),(0,i.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,i.kt)("mi",{parentName:"mrow"},"n"),(0,i.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,i.kt)("span",{parentName:"span",className:"mopen"},"("),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,i.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Click - to see solution code"),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"\nclass Codec {\n   public:\n    // Encodes a tree to a single string.\n\n    string s = \"\";\n    void serial(TreeNode* root) {\n        string a = to_string(root->val);\n        s += a;\n        if (root->left) {\n            s += \"L(\";\n            serial(root->left);\n            s.push_back(')');\n        }\n        if (root->right) {\n            s += \"R(\";\n            serial(root->right);\n            s.push_back(')');\n        }\n    }\n\n    string serialize(TreeNode* root) {\n        if (!root) return \"\";\n        serial(root);\n        cout << s << \"\\n\";\n        return s;\n    }\n\n    // Decodes your encoded data to tree.\n\n    string d;\n    TreeNode* deserial(int& i) {\n        int j = i;\n        while ((d[j] >= '0' && d[j] <= '9') || d[j] == '-') j++;\n        string num(d.begin() + i, d.begin() + j);\n        int val = stoi(num);\n        TreeNode* root = new TreeNode(val);\n        i = j;\n        if (d[i] == 'L') {\n            i += 2;\n            root->left = deserial(i);\n            i++;\n        }\n        if (d[i] == 'R') {\n            i += 2;\n            root->right = deserial(i);\n            i++;\n        }\n        return root;\n    }\n\n    TreeNode* deserialize(string data) {\n        if (data.length() == 0) return NULL;\n        this->d = data;\n        int j = 0;\n        return deserial(j);\n    }\n};\n\n"))))))}f.isMDXComponent=!0}}]);