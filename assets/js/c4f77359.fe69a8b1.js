"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[9808],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),o=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=o(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,u=m(e,["components","mdxType","originalType","parentName"]),c=o(a),d=r,h=c["".concat(i,".").concat(d)]||c[d]||p[d]||l;return a?n.createElement(h,s(s({ref:t},u),{},{components:a})):n.createElement(h,s({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,s=new Array(l);s[0]=c;var m={};for(var i in t)hasOwnProperty.call(t,i)&&(m[i]=t[i]);m.originalType=e,m.mdxType="string"==typeof e?e:r,s[1]=m;for(var o=2;o<l;o++)s[o]=a[o];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},8215:function(e,t,a){var n=a(7294);t.Z=function(e){var t=e.children,a=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:r},t)}},9877:function(e,t,a){a.d(t,{Z:function(){return u}});var n=a(7462),r=a(7294),l=a(2389),s=a(9548),m=a(6010),i="tabItem_LplD";function o(e){var t,a,l,o=e.lazy,u=e.block,p=e.defaultValue,c=e.values,d=e.groupId,h=e.className,N=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=c?c:N.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,s.lx)(k,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===p?p:null!=(t=null!=p?p:null==(a=N.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(l=N[0])?void 0:l.props.value;if(null!==b&&!k.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=(0,s.UB)(),g=v.tabGroupChoices,y=v.setTabGroupChoices,w=(0,r.useState)(b),T=w[0],x=w[1],O=[],E=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var S=g[d];null!=S&&S!==T&&k.some((function(e){return e.value===S}))&&x(S)}var D=function(e){var t=e.currentTarget,a=O.indexOf(t),n=k[a].value;n!==T&&(E(t),x(n),null!=d&&y(d,n))},A=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=O.indexOf(e.currentTarget)+1;a=O[n]||O[0];break;case"ArrowLeft":var r=O.indexOf(e.currentTarget)-1;a=O[r]||O[O.length-1]}null==(t=a)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,m.Z)("tabs",{"tabs--block":u},h)},k.map((function(e){var t=e.value,a=e.label,l=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return O.push(e)},onKeyDown:A,onFocus:D,onClick:D},l,{className:(0,m.Z)("tabs__item",i,null==l?void 0:l.className,{"tabs__item--active":T===t})}),null!=a?a:t)}))),o?(0,r.cloneElement)(N.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},N.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function u(e){var t=(0,l.Z)();return r.createElement(o,(0,n.Z)({key:String(t)},e))}},7845:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return c},default:function(){return h}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),s=a(9877),m=a(8215),i=["components"],o={sidebar_position:4},u="Maximum Binary Tree",p={unversionedId:"DSA/Trees/Maximum_Binary_Tree",id:"DSA/Trees/Maximum_Binary_Tree",title:"Maximum Binary Tree",description:"Problem Statement",source:"@site/docs/DSA/Trees/Maximum_Binary_Tree.md",sourceDirName:"DSA/Trees",slug:"/DSA/Trees/Maximum_Binary_Tree",permalink:"/CodePrime/docs/DSA/Trees/Maximum_Binary_Tree",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DSA/Trees/Maximum_Binary_Tree.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Sets bits from 1 to N",permalink:"/CodePrime/docs/DSA/Bit Magic/PlayingWithBits"},next:{title:"Exponentiation",permalink:"/CodePrime/docs/DSA/NumberTheory/Exponentiation"}},c=[{value:"Problem Statement",id:"problem-statement",children:[],level:2},{value:"Example",id:"example",children:[],level:2},{value:"Solution",id:"solution",children:[],level:2},{value:"Author: Deepak Sharma.",id:"author-deepak-sharma",children:[],level:2}],d={toc:c};function h(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"maximum-binary-tree"},"Maximum Binary Tree"),(0,l.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,l.kt)("p",null,"You are given an integer array nums with no duplicates. A ",(0,l.kt)("strong",{parentName:"p"},"maximum binary tree")," can be built recursively from nums using the following algorithm:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Create a root node whose value is the maximum value in ",(0,l.kt)("em",{parentName:"li"},"nums"),"."),(0,l.kt)("li",{parentName:"ul"},"Recursively build the left subtree on the ",(0,l.kt)("strong",{parentName:"li"},"subarray prefix")," to the ",(0,l.kt)("strong",{parentName:"li"},"left")," of the maximum value."),(0,l.kt)("li",{parentName:"ul"},"Recursively build the right subtree on the ",(0,l.kt)("strong",{parentName:"li"},"subarray suffix")," to the ",(0,l.kt)("strong",{parentName:"li"},"right")," of the maximum value.")),(0,l.kt)("p",null,"Return the maximum binary tree built from ",(0,l.kt)("em",{parentName:"p"},"nums"),"."),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-txt"},"Input: nums = [3,2,1,6,0,5]\nOutput: [6,3,5,null,2,0,null,null,1]\n\nInput: nums = [3,2,1]\nOutput: [3,null,2,null,1]\n")),(0,l.kt)("h2",{id:"solution"},"Solution"),(0,l.kt)("p",null,"Expected Time Complexity: ",(0,l.kt)("span",{parentName:"p",className:"math math-inline"},(0,l.kt)("span",{parentName:"span",className:"katex"},(0,l.kt)("span",{parentName:"span",className:"katex-mathml"},(0,l.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,l.kt)("semantics",{parentName:"math"},(0,l.kt)("mrow",{parentName:"semantics"},(0,l.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,l.kt)("mi",{parentName:"mrow"},"n"),(0,l.kt)("mo",{parentName:"mrow"},"<"),(0,l.kt)("mi",{parentName:"mrow"},"s"),(0,l.kt)("mi",{parentName:"mrow"},"u"),(0,l.kt)("mi",{parentName:"mrow"},"p"),(0,l.kt)("mo",{parentName:"mrow"},">"),(0,l.kt)("mn",{parentName:"mrow"},"2"),(0,l.kt)("mo",{parentName:"mrow"},"<"),(0,l.kt)("mi",{parentName:"mrow"},"s"),(0,l.kt)("mi",{parentName:"mrow"},"u"),(0,l.kt)("mi",{parentName:"mrow"},"p"),(0,l.kt)("mo",{parentName:"mrow"},">"),(0,l.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,l.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(n<sup>2<sup>)")))),(0,l.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,l.kt)("span",{parentName:"span",className:"base"},(0,l.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.kt)("span",{parentName:"span",className:"mopen"},"("),(0,l.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,l.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,l.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,l.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,l.kt)("span",{parentName:"span",className:"base"},(0,l.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7335em",verticalAlign:"-0.1944em"}}),(0,l.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,l.kt)("span",{parentName:"span",className:"mord mathnormal"},"u"),(0,l.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,l.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,l.kt)("span",{parentName:"span",className:"mrel"},">"),(0,l.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,l.kt)("span",{parentName:"span",className:"base"},(0,l.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6835em",verticalAlign:"-0.0391em"}}),(0,l.kt)("span",{parentName:"span",className:"mord"},"2"),(0,l.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,l.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,l.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,l.kt)("span",{parentName:"span",className:"base"},(0,l.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7335em",verticalAlign:"-0.1944em"}}),(0,l.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,l.kt)("span",{parentName:"span",className:"mord mathnormal"},"u"),(0,l.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,l.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,l.kt)("span",{parentName:"span",className:"mrel"},">")),(0,l.kt)("span",{parentName:"span",className:"base"},(0,l.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Click - to see solution"),"We make use of a function **builtTree(nums, lo, up)**, which returns the maximum binary tree consisting of numbers within the indices *lo* and *up* in the given numsnums array.",(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"}," Algorithm ")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Start with the function call builtTree(nums, 0, n). Here, n refers to the number of elements in the given nums array.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Find the index, ",(0,l.kt)("em",{parentName:"p"},"ind")," , of the largest element in the current range of indices ",(0,l.kt)("em",{parentName:"p"},"(lo:up)"),". Make this largest element, ",(0,l.kt)("em",{parentName:"p"},"nums","[ ind ]")," as the local root node.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Determine the left child using construct(nums, lo, ind-1). Doing this recursively finds the largest element in the subarray left to the current largest element.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Similarly, determine the right child using construct(nums, ind+1, r)."))),(0,l.kt)("p",null,"Return the root node to the calling function."),(0,l.kt)(s.Z,{mdxType:"Tabs"},(0,l.kt)(m.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"\nclass Solution {\npublic:\n    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {\n        return builtTree(nums,0,nums.size()-1);\n    }\n    \n    TreeNode* builtTree(vector<int> nums,int lo,int up)\n    {\n        if(lo > up)\n        {\n            return NULL;\n        }\n        if(lo == up)\n        {\n            return new TreeNode(nums[lo]);\n        }\n        int ind = lo;\n        for(int i=lo;i<=up;i++)\n        {\n            if(nums[ind] < nums[i])\n            {\n                ind = i;\n            }\n        }\n        TreeNode* root = new TreeNode(nums[ind]);\n        root->left = builtTree(nums,lo,ind-1);\n        root->right = builtTree(nums,ind+1,up);\n        return root;\n    }\n};\n"))))),(0,l.kt)("h2",{id:"author-deepak-sharma"},"Author: ",(0,l.kt)("a",{parentName:"h2",href:"https://www.linkedin.com/in/deepak-sharma-66968120a/"},"Deepak Sharma"),"."))}h.isMDXComponent=!0}}]);