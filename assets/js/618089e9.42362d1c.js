"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[7086],{3905:function(e,r,n){n.d(r,{Zo:function(){return c},kt:function(){return d}});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=t.createContext({}),u=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},c=function(e){var r=u(e.components);return t.createElement(s.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return n?t.createElement(f,o(o({ref:r},c),{},{components:n})):t.createElement(f,o({ref:r},c))}));function d(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8215:function(e,r,n){var t=n(7294);r.Z=function(e){var r=e.children,n=e.hidden,a=e.className;return t.createElement("div",{role:"tabpanel",hidden:n,className:a},r)}},9877:function(e,r,n){n.d(r,{Z:function(){return c}});var t=n(7462),a=n(7294),i=n(2389),o=n(9548),l=n(6010),s="tabItem_LplD";function u(e){var r,n,i,u=e.lazy,c=e.block,m=e.defaultValue,p=e.values,d=e.groupId,f=e.className,b=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=p?p:b.map((function(e){var r=e.props;return{value:r.value,label:r.label,attributes:r.attributes}})),v=(0,o.lx)(h,(function(e,r){return e.value===r.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===m?m:null!=(r=null!=m?m:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?r:null==(i=b[0])?void 0:i.props.value;if(null!==y&&!h.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=(0,o.UB)(),g=k.tabGroupChoices,N=k.setTabGroupChoices,S=(0,a.useState)(y),T=S[0],D=S[1],w=[],E=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var O=g[d];null!=O&&O!==T&&h.some((function(e){return e.value===O}))&&D(O)}var P=function(e){var r=e.currentTarget,n=w.indexOf(r),t=h[n].value;t!==T&&(E(r),D(t),null!=d&&N(d,t))},x=function(e){var r,n=null;switch(e.key){case"ArrowRight":var t=w.indexOf(e.currentTarget)+1;n=w[t]||w[0];break;case"ArrowLeft":var a=w.indexOf(e.currentTarget)-1;n=w[a]||w[w.length-1]}null==(r=n)||r.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":c},f)},h.map((function(e){var r=e.value,n=e.label,i=e.attributes;return a.createElement("li",(0,t.Z)({role:"tab",tabIndex:T===r?0:-1,"aria-selected":T===r,key:r,ref:function(e){return w.push(e)},onKeyDown:x,onFocus:P,onClick:P},i,{className:(0,l.Z)("tabs__item",s,null==i?void 0:i.className,{"tabs__item--active":T===r})}),null!=n?n:r)}))),u?(0,a.cloneElement)(b.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},b.map((function(e,r){return(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==T})}))))}function c(e){var r=(0,i.Z)();return a.createElement(u,(0,t.Z)({key:String(r)},e))}},9773:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return p},default:function(){return f}});var t=n(7462),a=n(3366),i=(n(7294),n(3905)),o=n(9877),l=n(8215),s=["components"],u={sidebar_position:8,tags:["Tree","Breadth-First Search","Binary Tree"]},c="Serialize and Deserialize Binary Tree",m={unversionedId:"Problems/StriverSDESheet/Day21/Serialize and Deserialize Binary Tree",id:"Problems/StriverSDESheet/Day21/Serialize and Deserialize Binary Tree",title:"Serialize and Deserialize Binary Tree",description:"Problem Link",source:"@site/docs/Problems/StriverSDESheet/Day21/Serialize and Deserialize Binary Tree.md",sourceDirName:"Problems/StriverSDESheet/Day21",slug:"/Problems/StriverSDESheet/Day21/Serialize and Deserialize Binary Tree",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day21/Serialize and Deserialize Binary Tree",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Problems/StriverSDESheet/Day21/Serialize and Deserialize Binary Tree.md",tags:[{label:"Tree",permalink:"/CodePrime/docs/tags/tree"},{label:"Breadth-First Search",permalink:"/CodePrime/docs/tags/breadth-first-search"},{label:"Binary Tree",permalink:"/CodePrime/docs/tags/binary-tree"}],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,tags:["Tree","Breadth-First Search","Binary Tree"]},sidebar:"api",previous:{title:"Maximum Sum BST in Binary Tree",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day21/Maximum Sum BST in Binary Tree"},next:{title:"Flatten Binary Tree to Linked List",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day22/Flatten Binary Tree to Linked List"}},p=[{value:"Problem Link",id:"problem-link",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:p};function f(e){var r=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"serialize-and-deserialize-binary-tree"},"Serialize and Deserialize Binary Tree"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/serialize-and-deserialize-binary-tree/"},"https://leetcode.com/problems/serialize-and-deserialize-binary-tree/")),(0,i.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,i.kt)("p",null,"Expected Time complexity: ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"O"),(0,i.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,i.kt)("mi",{parentName:"mrow"},"n"),(0,i.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,i.kt)("span",{parentName:"span",className:"mopen"},"("),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,i.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Click - to see solution code"),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Codec {\n   public:\n    string s = \"\";\n    void serial(TreeNode* root) {\n        string a = to_string(root->val);\n        s += a;\n        if (root->left) {\n            s += \"L(\";\n            serial(root->left);\n            s.push_back(')');\n        }\n        if (root->right) {\n            s += \"R(\";\n            serial(root->right);\n            s.push_back(')');\n        }\n    }\n\n    string serialize(TreeNode* root) {\n        if (!root) return \"\";\n        serial(root);\n        cout << s << \"\\n\";\n        return s;\n    }\n\n    string d;\n    TreeNode* deserial(int& i) {\n        int j = i;\n        while ((d[j] >= '0' && d[j] <= '9') || d[j] == '-') j++;\n        string num(d.begin() + i, d.begin() + j);\n        int val = stoi(num);\n        TreeNode* root = new TreeNode(val);\n        i = j;\n        if (d[i] == 'L') {\n            i += 2;\n            root->left = deserial(i);\n            i++;\n        }\n        if (d[i] == 'R') {\n            i += 2;\n            root->right = deserial(i);\n            i++;\n        }\n        return root;\n    }\n\n    TreeNode* deserialize(string data) {\n        if (data.length() == 0) return NULL;\n        this->d = data;\n        int j = 0;\n        return deserial(j);\n    }\n};\n"))))))}f.isMDXComponent=!0}}]);