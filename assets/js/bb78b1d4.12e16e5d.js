"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[3911],{3905:function(e,r,n){n.d(r,{Zo:function(){return c},kt:function(){return d}});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=t.createContext({}),u=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},c=function(e){var r=u(e.components);return t.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||o;return n?t.createElement(f,l(l({ref:r},c),{},{components:n})):t.createElement(f,l({ref:r},c))}));function d(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8215:function(e,r,n){var t=n(7294);r.Z=function(e){var r=e.children,n=e.hidden,a=e.className;return t.createElement("div",{role:"tabpanel",hidden:n,className:a},r)}},9877:function(e,r,n){n.d(r,{Z:function(){return c}});var t=n(7462),a=n(7294),o=n(2389),l=n(9548),i=n(6010),s="tabItem_LplD";function u(e){var r,n,o,u=e.lazy,c=e.block,p=e.defaultValue,m=e.values,d=e.groupId,f=e.className,v=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=m?m:v.map((function(e){var r=e.props;return{value:r.value,label:r.label,attributes:r.attributes}})),h=(0,l.lx)(b,(function(e,r){return e.value===r.value}));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===p?p:null!=(r=null!=p?p:null==(n=v.find((function(e){return e.props.default})))?void 0:n.props.value)?r:null==(o=v[0])?void 0:o.props.value;if(null!==y&&!b.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var T=(0,l.UB)(),k=T.tabGroupChoices,g=T.setTabGroupChoices,N=(0,a.useState)(y),P=N[0],w=N[1],S=[],C=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var D=k[d];null!=D&&D!==P&&b.some((function(e){return e.value===D}))&&w(D)}var E=function(e){var r=e.currentTarget,n=S.indexOf(r),t=b[n].value;t!==P&&(C(r),w(t),null!=d&&g(d,t))},O=function(e){var r,n=null;switch(e.key){case"ArrowRight":var t=S.indexOf(e.currentTarget)+1;n=S[t]||S[0];break;case"ArrowLeft":var a=S.indexOf(e.currentTarget)-1;n=S[a]||S[S.length-1]}null==(r=n)||r.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":c},f)},b.map((function(e){var r=e.value,n=e.label,o=e.attributes;return a.createElement("li",(0,t.Z)({role:"tab",tabIndex:P===r?0:-1,"aria-selected":P===r,key:r,ref:function(e){return S.push(e)},onKeyDown:O,onFocus:E,onClick:E},o,{className:(0,i.Z)("tabs__item",s,null==o?void 0:o.className,{"tabs__item--active":P===r})}),null!=n?n:r)}))),u?(0,a.cloneElement)(v.filter((function(e){return e.props.value===P}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},v.map((function(e,r){return(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==P})}))))}function c(e){var r=(0,o.Z)();return a.createElement(u,(0,t.Z)({key:String(r)},e))}},7064:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return m},default:function(){return f}});var t=n(7462),a=n(3366),o=(n(7294),n(3905)),l=n(9877),i=n(8215),s=["components"],u={sidebar_position:2,tags:["Array","Hash Table","Divide and Conquer","Tree","Binary Tree"]},c="Construct Binary Tree from Preorder and Inorder Traversal",p={unversionedId:"Problems/StriverSDESheet/Day19/Construct Binary Tree from Preorder and Inorder Traversal",id:"Problems/StriverSDESheet/Day19/Construct Binary Tree from Preorder and Inorder Traversal",title:"Construct Binary Tree from Preorder and Inorder Traversal",description:"Problem Link",source:"@site/docs/Problems/StriverSDESheet/Day19/Construct Binary Tree from Preorder and Inorder Traversal.md",sourceDirName:"Problems/StriverSDESheet/Day19",slug:"/Problems/StriverSDESheet/Day19/Construct Binary Tree from Preorder and Inorder Traversal",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day19/Construct Binary Tree from Preorder and Inorder Traversal",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Problems/StriverSDESheet/Day19/Construct Binary Tree from Preorder and Inorder Traversal.md",tags:[{label:"Array",permalink:"/CodePrime/docs/tags/array"},{label:"Hash Table",permalink:"/CodePrime/docs/tags/hash-table"},{label:"Divide and Conquer",permalink:"/CodePrime/docs/tags/divide-and-conquer"},{label:"Tree",permalink:"/CodePrime/docs/tags/tree"},{label:"Binary Tree",permalink:"/CodePrime/docs/tags/binary-tree"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,tags:["Array","Hash Table","Divide and Conquer","Tree","Binary Tree"]},sidebar:"api",previous:{title:"Binary Tree Maximum Path Sum",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day19/Binary Tree Maximum Path Sum"},next:{title:"Construct Binary Tree from Inorder and Postorder Traversal",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day19/Construct Binary Tree from Inorder and Postorder Traversal"}},m=[{value:"Problem Link",id:"problem-link",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:m};function f(e){var r=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"construct-binary-tree-from-preorder-and-inorder-traversal"},"Construct Binary Tree from Preorder and Inorder Traversal"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/"},"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/")),(0,o.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,o.kt)("p",null,"Expected Time complexity: ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mi",{parentName:"mrow"},"O"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,o.kt)("mi",{parentName:"mrow"},"n"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,o.kt)("span",{parentName:"span",className:"mopen"},"("),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,o.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Click - to see solution code"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n    vector<int> preorder;\n    vector<int> inorder;\n\n   public:\n    TreeNode* createTree(int p1, int p2, int n1, int n2) {\n        if (p2 < p1 || n1 > n2) return NULL;\n        TreeNode* root = new TreeNode(preorder[p1]);\n        if (p1 == p2 || n1 == n2) return root;\n        int pp1, pp2, nn1, nn2;\n\n        nn1 = n1, nn2 = n1;\n        while (inorder[nn2] != preorder[p1]) {\n            nn2++;\n        }\n        nn2--;\n        pp1 = p1 + 1;\n        pp2 = p1 + (nn2 - nn1) + 1;\n\n        root->left = createTree(pp1, pp2, nn1, nn2);\n\n        nn2 = n2;\n        nn1 = n2;\n        while (inorder[nn1] != preorder[p1]) nn1--;\n        nn1++;\n        pp2 = p2;\n        pp1 = pp2 - (nn2 - nn1);\n        root->right = createTree(pp1, pp2, nn1, nn2);\n        return root;\n    }\n\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        this->preorder = preorder;\n        this->inorder = inorder;\n        int n = preorder.size();\n        return createTree(0, n - 1, 0, n - 1);\n    }\n};\n"))))))}f.isMDXComponent=!0}}]);