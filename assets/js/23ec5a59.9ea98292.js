"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[5635],{3905:function(e,r,t){t.d(r,{Zo:function(){return m},kt:function(){return d}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=n.createContext({}),s=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},m=function(e){var r=s(e.components);return n.createElement(u.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=s(t),d=a,f=p["".concat(u,".").concat(d)]||p[d]||c[d]||i;return t?n.createElement(f,o(o({ref:r},m),{},{components:t})):n.createElement(f,o({ref:r},m))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var l={};for(var u in r)hasOwnProperty.call(r,u)&&(l[u]=r[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8215:function(e,r,t){var n=t(7294);r.Z=function(e){var r=e.children,t=e.hidden,a=e.className;return n.createElement("div",{role:"tabpanel",hidden:t,className:a},r)}},9877:function(e,r,t){t.d(r,{Z:function(){return m}});var n=t(7462),a=t(7294),i=t(2389),o=t(9548),l=t(6010),u="tabItem_LplD";function s(e){var r,t,i,s=e.lazy,m=e.block,c=e.defaultValue,p=e.values,d=e.groupId,f=e.className,v=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=p?p:v.map((function(e){var r=e.props;return{value:r.value,label:r.label,attributes:r.attributes}})),b=(0,o.lx)(h,(function(e,r){return e.value===r.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===c?c:null!=(r=null!=c?c:null==(t=v.find((function(e){return e.props.default})))?void 0:t.props.value)?r:null==(i=v[0])?void 0:i.props.value;if(null!==y&&!h.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var S=(0,o.UB)(),k=S.tabGroupChoices,T=S.setTabGroupChoices,x=(0,a.useState)(y),N=x[0],g=x[1],w=[],D=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var E=k[d];null!=E&&E!==N&&h.some((function(e){return e.value===E}))&&g(E)}var O=function(e){var r=e.currentTarget,t=w.indexOf(r),n=h[t].value;n!==N&&(D(r),g(n),null!=d&&T(d,n))},B=function(e){var r,t=null;switch(e.key){case"ArrowRight":var n=w.indexOf(e.currentTarget)+1;t=w[n]||w[0];break;case"ArrowLeft":var a=w.indexOf(e.currentTarget)-1;t=w[a]||w[w.length-1]}null==(r=t)||r.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":m},f)},h.map((function(e){var r=e.value,t=e.label,i=e.attributes;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:N===r?0:-1,"aria-selected":N===r,key:r,ref:function(e){return w.push(e)},onKeyDown:B,onFocus:O,onClick:O},i,{className:(0,l.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":N===r})}),null!=t?t:r)}))),s?(0,a.cloneElement)(v.filter((function(e){return e.props.value===N}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},v.map((function(e,r){return(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==N})}))))}function m(e){var r=(0,i.Z)();return a.createElement(s,(0,n.Z)({key:String(r)},e))}},2505:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return s},contentTitle:function(){return m},metadata:function(){return c},toc:function(){return p},default:function(){return f}});var n=t(7462),a=t(3366),i=(t(7294),t(3905)),o=t(9877),l=t(8215),u=["components"],s={sidebar_position:7,tags:["Tree","Breadth-First Search","Binary Tree"]},m="Maximum Sum BST in Binary Tree",c={unversionedId:"StriverSDESheet/Day21/Maximum Sum BST in Binary Tree",id:"StriverSDESheet/Day21/Maximum Sum BST in Binary Tree",title:"Maximum Sum BST in Binary Tree",description:"Problem Link",source:"@site/docs/StriverSDESheet/Day21/Maximum Sum BST in Binary Tree.md",sourceDirName:"StriverSDESheet/Day21",slug:"/StriverSDESheet/Day21/Maximum Sum BST in Binary Tree",permalink:"/CodePrime/docs/StriverSDESheet/Day21/Maximum Sum BST in Binary Tree",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/StriverSDESheet/Day21/Maximum Sum BST in Binary Tree.md",tags:[{label:"Tree",permalink:"/CodePrime/docs/tags/tree"},{label:"Breadth-First Search",permalink:"/CodePrime/docs/tags/breadth-first-search"},{label:"Binary Tree",permalink:"/CodePrime/docs/tags/binary-tree"}],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,tags:["Tree","Breadth-First Search","Binary Tree"]},sidebar:"tutorialSidebar",previous:{title:"Binary Search Tree Iterator",permalink:"/CodePrime/docs/StriverSDESheet/Day21/Binary Search Tree Iterator"},next:{title:"Serialize and Deserialize Binary Tree",permalink:"/CodePrime/docs/StriverSDESheet/Day21/Serialize and Deserialize Binary Tree"}},p=[{value:"Problem Link",id:"problem-link",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:p};function f(e){var r=e.components,t=(0,a.Z)(e,u);return(0,i.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"maximum-sum-bst-in-binary-tree"},"Maximum Sum BST in Binary Tree"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/"},"https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/")),(0,i.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,i.kt)("p",null,"Expected Time complexity: ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"O"),(0,i.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,i.kt)("mi",{parentName:"mrow"},"n"),(0,i.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,i.kt)("span",{parentName:"span",className:"mopen"},"("),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,i.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Click - to see solution code"),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    int ans = 0;\n    bool f(TreeNode *root, int &minv, int &maxv, int &s) {\n        if (root == NULL) return true;\n\n        int lmin = minv, lmax = maxv, lsum = 0;\n        bool l = f(root->left, lmin, lmax, lsum);\n\n        int rmin = minv, rmax = maxv, rsum = 0;\n        bool r = f(root->right, rmin, rmax, rsum);\n\n        if (l == false || r == false || root->val <= lmax || root->val >= rmin)\n            return false;\n\n        s += lsum + rsum + root->val;\n        ans = max(ans, s);\n\n        minv = min(lmin, root->val);\n        maxv = max(rmax, root->val);\n        return true;\n    }\n\n    int maxSumBST(TreeNode *root) {\n        int s = 0;\n        int lm = INT_MAX, rm = INT_MIN;\n        f(root, lm, rm, s);\n        return ans;\n    }\n};\n"))))))}f.isMDXComponent=!0}}]);