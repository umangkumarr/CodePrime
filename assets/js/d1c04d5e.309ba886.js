"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[1796],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,f=p["".concat(s,".").concat(d)]||p[d]||c[d]||i;return n?r.createElement(f,o(o({ref:t},m),{},{components:n})):r.createElement(f,o({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8215:function(e,t,n){var r=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return m}});var r=n(7462),a=n(7294),i=n(2389),o=n(9548),l=n(6010),s="tabItem_LplD";function u(e){var t,n,i,u=e.lazy,m=e.block,c=e.defaultValue,p=e.values,d=e.groupId,f=e.className,b=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=p?p:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,o.lx)(h,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===c?c:null!=(t=null!=c?c:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(i=b[0])?void 0:i.props.value;if(null!==g&&!h.some((function(e){return e.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=(0,o.UB)(),y=k.tabGroupChoices,N=k.setTabGroupChoices,S=(0,a.useState)(g),x=S[0],O=S[1],w=[],D=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var E=y[d];null!=E&&E!==x&&h.some((function(e){return e.value===E}))&&O(E)}var P=function(e){var t=e.currentTarget,n=w.indexOf(t),r=h[n].value;r!==x&&(D(t),O(r),null!=d&&N(d,r))},T=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=w.indexOf(e.currentTarget)+1;n=w[r]||w[0];break;case"ArrowLeft":var a=w.indexOf(e.currentTarget)-1;n=w[a]||w[w.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":m},f)},h.map((function(e){var t=e.value,n=e.label,i=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:function(e){return w.push(e)},onKeyDown:T,onFocus:P,onClick:P},i,{className:(0,l.Z)("tabs__item",s,null==i?void 0:i.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),u?(0,a.cloneElement)(b.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},b.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function m(e){var t=(0,i.Z)();return a.createElement(u,(0,r.Z)({key:String(t)},e))}},3016:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return m},metadata:function(){return c},toc:function(){return p},default:function(){return f}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=n(9877),l=n(8215),s=["components"],u={sidebar_position:1,tags:["String","Greedy"]},m="Maximum Number of Non-Overlapping Substrings",c={unversionedId:"Problems/StriverSDESheet/Day24/Maximum Number of Non-Overlapping Substrings",id:"Problems/StriverSDESheet/Day24/Maximum Number of Non-Overlapping Substrings",title:"Maximum Number of Non-Overlapping Substrings",description:"Problem",source:"@site/docs/Problems/StriverSDESheet/Day24/Maximum Number of Non-Overlapping Substrings.md",sourceDirName:"Problems/StriverSDESheet/Day24",slug:"/Problems/StriverSDESheet/Day24/Maximum Number of Non-Overlapping Substrings",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day24/Maximum Number of Non-Overlapping Substrings",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Problems/StriverSDESheet/Day24/Maximum Number of Non-Overlapping Substrings.md",tags:[{label:"String",permalink:"/CodePrime/docs/tags/string"},{label:"Greedy",permalink:"/CodePrime/docs/tags/greedy"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,tags:["String","Greedy"]},sidebar:"api",previous:{title:"Is Graph Bipartite?",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day23/Is Graph Bipartite"},next:{title:"Dijkstra Algorithm",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day24/Dijkstra Algorithm"}},p=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:p};function f(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"maximum-number-of-non-overlapping-substrings"},"Maximum Number of Non-Overlapping Substrings"),(0,i.kt)("h2",{id:"problem"},(0,i.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/maximum-number-of-non-overlapping-substrings/"},"Problem")),(0,i.kt)("p",null,"Given a string ",(0,i.kt)("code",null,"s")," of lowercase letters, you need to find the maximum number of ",(0,i.kt)("strong",null,"non-empty")," substrings of ",(0,i.kt)("code",null,"s")," that meet the following conditions:"),(0,i.kt)("ol",null,(0,i.kt)("li",null,"The substrings do not overlap, that is for any two substrings ",(0,i.kt)("code",null,"s[i..j]")," and ",(0,i.kt)("code",null,"s[x..y]"),", either ",(0,i.kt)("code",null,"j < x")," or ",(0,i.kt)("code",null,"i > y")," is true."),(0,i.kt)("li",null,"A substring that contains a certain character ",(0,i.kt)("code",null,"c")," must also contain all occurrences of ",(0,i.kt)("code",null,"c"),".")),(0,i.kt)("p",null,"Find ",(0,i.kt)("em",null,"the maximum number of substrings that meet the above conditions"),". If there are multiple solutions with the same number of substrings, ",(0,i.kt)("em",null,"return the one with minimum total length. "),"It can be shown that there exists a unique solution of minimum total length."),(0,i.kt)("p",null,"Notice that you can return the substrings in ",(0,i.kt)("strong",null,"any")," order."),(0,i.kt)("p",null,"\xa0"),(0,i.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,i.kt)("p",null,"Expected Time complexity: ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"O"),(0,i.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,i.kt)("mi",{parentName:"mrow"},"n"),(0,i.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,i.kt)("span",{parentName:"span",className:"mopen"},"("),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,i.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Click - to see solution code"),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    vector<string> maxNumOfSubstrings(string s) {\n        vector<int> start(26, INT_MAX), end(26, INT_MIN), skip(26, 0);\n        vector<string> result;\n\n        for (int i = 0; i < s.size(); ++i)\n            start[s[i] - 'a'] = min(start[s[i] - 'a'], i), end[s[i] - 'a'] = i;\n\n        for (int i = 0; i < 26; ++i)\n            for (int j = start[i]; j <= end[i]; ++j)\n                if (start[s[j] - 'a'] < start[i])\n                    skip[i] = 1;\n                else\n                    end[i] = max(end[i], end[s[j] - 'a']);\n\n        for (int i = s.size() - 1, cut = INT_MAX; i >= 0; --i)\n            if (i == start[s[i] - 'a'] && end[s[i] - 'a'] < cut &&\n                !skip[s[i] - 'a'])\n                result.push_back(s.substr((cut = i), end[s[i] - 'a'] - i + 1));\n\n        return result;\n    }\n};\n"))))))}f.isMDXComponent=!0}}]);