"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[3956],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>d});var a=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=a.createContext({}),c=function(e){var r=a.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=c(e.components);return a.createElement(i.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},m=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=n,v=m["".concat(i,".").concat(d)]||m[d]||u[d]||l;return t?a.createElement(v,o(o({ref:r},p),{},{components:t})):a.createElement(v,o({ref:r},p))}));function d(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var l=t.length,o=new Array(l);o[0]=m;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var c=2;c<l;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,r,t)=>{t.d(r,{Z:()=>o});var a=t(7294),n=t(4334);const l="tabItem_Ymn6";function o(e){let{children:r,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,n.Z)(l,o),hidden:t},r)}},5488:(e,r,t)=>{t.d(r,{Z:()=>d});var a=t(3117),n=t(7294),l=t(4334),o=t(2389),s=t(7392),i=t(7094),c=t(2466);const p="tabList__CuJ",u="tabItem_LNqP";function m(e){var r,t;const{lazy:o,block:m,defaultValue:d,values:v,groupId:b,className:h}=e,f=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=v?v:f.map((e=>{let{props:{value:r,label:t,attributes:a}}=e;return{value:r,label:t,attributes:a}})),k=(0,s.l)(y,((e,r)=>e.value===r.value));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const g=null===d?d:null!=(r=null!=d?d:null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)?r:f[0].props.value;if(null!==g&&!y.some((e=>e.value===g)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+y.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:T}=(0,i.U)(),[O,w]=(0,n.useState)(g),x=[],{blockElementScrollPositionUntilNextRender:E}=(0,c.o5)();if(null!=b){const e=N[b];null!=e&&e!==O&&y.some((r=>r.value===e))&&w(e)}const P=e=>{const r=e.currentTarget,t=x.indexOf(r),a=y[t].value;a!==O&&(E(r),w(a),null!=b&&T(b,String(a)))},C=e=>{var r;let t=null;switch(e.key){case"ArrowRight":{var a;const r=x.indexOf(e.currentTarget)+1;t=null!=(a=x[r])?a:x[0];break}case"ArrowLeft":{var n;const r=x.indexOf(e.currentTarget)-1;t=null!=(n=x[r])?n:x[x.length-1];break}}null==(r=t)||r.focus()};return n.createElement("div",{className:(0,l.Z)("tabs-container",p)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":m},h)},y.map((e=>{let{value:r,label:t,attributes:o}=e;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:O===r?0:-1,"aria-selected":O===r,key:r,ref:e=>x.push(e),onKeyDown:C,onFocus:P,onClick:P},o,{className:(0,l.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":O===r})}),null!=t?t:r)}))),o?(0,n.cloneElement)(f.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},f.map(((e,r)=>(0,n.cloneElement)(e,{key:r,hidden:e.props.value!==O})))))}function d(e){const r=(0,o.Z)();return n.createElement(m,(0,a.Z)({key:String(r)},e))}},8493:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var a=t(3117),n=(t(7294),t(3905)),l=t(5488),o=t(5162);const s={sidebar_position:114,tags:["Tree","Breadth-First Search","Binary Tree"]},i="Binary Tree Level Order Traversal",c={unversionedId:"codes/binary-tree-level-order-traversal",id:"codes/binary-tree-level-order-traversal",title:"Binary Tree Level Order Traversal",description:"Problem",source:"@site/docs/codes/binary-tree-level-order-traversal.md",sourceDirName:"codes",slug:"/codes/binary-tree-level-order-traversal",permalink:"/CodePrime/docs/codes/binary-tree-level-order-traversal",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/binary-tree-level-order-traversal.md",tags:[{label:"Tree",permalink:"/CodePrime/docs/tags/tree"},{label:"Breadth-First Search",permalink:"/CodePrime/docs/tags/breadth-first-search"},{label:"Binary Tree",permalink:"/CodePrime/docs/tags/binary-tree"}],version:"current",sidebarPosition:114,frontMatter:{sidebar_position:114,tags:["Tree","Breadth-First Search","Binary Tree"]},sidebar:"Leetcode",previous:{title:"Binary Tree Zigzag Level Order Traversal",permalink:"/CodePrime/docs/codes/binary-tree-zigzag-level-order-traversal"},next:{title:"Boundary Traversal of binary tree",permalink:"/CodePrime/docs/codes/boundary-traversal-of-binary-tree"}},p={},u=[{value:"Problem",id:"problem",level:2},{value:"Solution Approach",id:"solution-approach",level:2}],m={toc:u};function d(e){let{components:r,...t}=e;return(0,n.kt)("wrapper",(0,a.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"binary-tree-level-order-traversal"},"Binary Tree Level Order Traversal"),(0,n.kt)("h2",{id:"problem"},(0,n.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/binary-tree-level-order-traversal/"},"Problem")),(0,n.kt)("p",null,"Given the ",(0,n.kt)("code",null,"root")," of a binary tree, return ",(0,n.kt)("em",null,"the level order traversal of its nodes' values"),". (i.e., from left to right, level by level)."),(0,n.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,n.kt)("p",null,"Expected Time complexity: ",(0,n.kt)("span",{parentName:"p",className:"math math-inline"},(0,n.kt)("span",{parentName:"span",className:"katex"},(0,n.kt)("span",{parentName:"span",className:"katex-mathml"},(0,n.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,n.kt)("semantics",{parentName:"math"},(0,n.kt)("mrow",{parentName:"semantics"},(0,n.kt)("mi",{parentName:"mrow"},"O"),(0,n.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,n.kt)("mi",{parentName:"mrow"},"n"),(0,n.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,n.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,n.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,n.kt)("span",{parentName:"span",className:"base"},(0,n.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,n.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,n.kt)("span",{parentName:"span",className:"mopen"},"("),(0,n.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,n.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Click - to see solution code"),(0,n.kt)(l.Z,{mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n    map<int, vector<int>> mp;\n\n   public:\n    void traverse(TreeNode* root, int h) {\n        if (!root) return;\n        mp[h].push_back(root->val);\n        traverse(root->left, h + 1);\n        traverse(root->right, h + 1);\n    }\n\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        vector<vector<int>> ans;\n        traverse(root, 0);\n        for (auto i : mp) ans.push_back(i.second);\n        return ans;\n    }\n};\n\n"))))))}d.isMDXComponent=!0}}]);