"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[8042],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,h=d["".concat(i,".").concat(m)]||d[m]||u[m]||l;return r?n.createElement(h,o(o({ref:t},p),{},{components:r})):n.createElement(h,o({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<l;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8215:(e,t,r)=>{r.d(t,{Z:()=>a});var n=r(7294);const a=function(e){let{children:t,hidden:r,className:a}=e;return n.createElement("div",{role:"tabpanel",hidden:r,className:a},t)}},9877:(e,t,r)=>{r.d(t,{Z:()=>p});var n=r(7462),a=r(7294),l=r(2389),o=r(5773),s=r(6010);const i="tabItem_LplD";function c(e){var t,r,l;const{lazy:c,block:p,defaultValue:u,values:d,groupId:m,className:h}=e,b=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=d?d:b.map((e=>{let{props:{value:t,label:r,attributes:n}}=e;return{value:t,label:r,attributes:n}})),f=(0,o.lx)(k,((e,t)=>e.value===t.value));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const v=null===u?u:null!=(t=null!=u?u:null==(r=b.find((e=>e.props.default)))?void 0:r.props.value)?t:null==(l=b[0])?void 0:l.props.value;if(null!==v&&!k.some((e=>e.value===v)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+k.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:y,setTabGroupChoices:g}=(0,o.UB)(),[N,w]=(0,a.useState)(v),T=[],{blockElementScrollPositionUntilNextRender:O}=(0,o.o5)();if(null!=m){const e=y[m];null!=e&&e!==N&&k.some((t=>t.value===e))&&w(e)}const x=e=>{const t=e.currentTarget,r=T.indexOf(t),n=k[r].value;n!==N&&(O(t),w(n),null!=m&&g(m,n))},E=e=>{var t;let r=null;switch(e.key){case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;r=T[t]||T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;r=T[t]||T[T.length-1];break}}null==(t=r)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":p},h)},k.map((e=>{let{value:t,label:r,attributes:l}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>T.push(e),onKeyDown:E,onFocus:x,onClick:x},l,{className:(0,s.Z)("tabs__item",i,null==l?void 0:l.className,{"tabs__item--active":N===t})}),null!=r?r:t)}))),c?(0,a.cloneElement)(b.filter((e=>e.props.value===N))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},b.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function p(e){const t=(0,l.Z)();return a.createElement(c,(0,n.Z)({key:String(t)},e))}},9485:(e,t,r)=>{r.r(t),r.d(t,{frontMatter:()=>s,contentTitle:()=>i,metadata:()=>c,toc:()=>p,default:()=>d});var n=r(7462),a=(r(7294),r(3905)),l=r(9877),o=r(8215);const s={displayed_sidebar:null,sidebar_position:144,tags:["Linked List","Stack","Tree","Depth-First Search","Binary Tree"]},i="Flatten Binary Tree to Linked List",c={unversionedId:"codes/flatten-binary-tree-to-linked-list",id:"codes/flatten-binary-tree-to-linked-list",title:"Flatten Binary Tree to Linked List",description:"Problem",source:"@site/docs/codes/flatten-binary-tree-to-linked-list.md",sourceDirName:"codes",slug:"/codes/flatten-binary-tree-to-linked-list",permalink:"/docs/codes/flatten-binary-tree-to-linked-list",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/flatten-binary-tree-to-linked-list.md",tags:[{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Stack",permalink:"/docs/tags/stack"},{label:"Tree",permalink:"/docs/tags/tree"},{label:"Depth-First Search",permalink:"/docs/tags/depth-first-search"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:144,frontMatter:{displayed_sidebar:null,sidebar_position:144,tags:["Linked List","Stack","Tree","Depth-First Search","Binary Tree"]}},p=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],u={toc:p};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"flatten-binary-tree-to-linked-list"},"Flatten Binary Tree to Linked List"),(0,a.kt)("h2",{id:"problem"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/flatten-binary-tree-to-linked-list/"},"Problem")),(0,a.kt)("p",null,"Given the ",(0,a.kt)("code",null,"root"),' of a binary tree, flatten the tree into a "linked list":'),(0,a.kt)("ul",null,(0,a.kt)("li",null,'The "linked list" should use the same ',(0,a.kt)("code",null,"TreeNode")," class where the ",(0,a.kt)("code",null,"right")," child pointer points to the next node in the list and the ",(0,a.kt)("code",null,"left")," child pointer is always ",(0,a.kt)("code",null,"null"),"."),(0,a.kt)("li",null,'The "linked list" should be in the same order as a ',(0,a.kt)("a",{href:"https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR",target:"_blank"},(0,a.kt)("strong",null,"pre-order"),(0,a.kt)("strong",null," traversal"))," of the binary tree.")),(0,a.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,a.kt)("p",null,"Expected Time complexity: ",(0,a.kt)("span",{parentName:"p",className:"math math-inline"},(0,a.kt)("span",{parentName:"span",className:"katex"},(0,a.kt)("span",{parentName:"span",className:"katex-mathml"},(0,a.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,a.kt)("semantics",{parentName:"math"},(0,a.kt)("mrow",{parentName:"semantics"},(0,a.kt)("mi",{parentName:"mrow"},"O"),(0,a.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,a.kt)("mi",{parentName:"mrow"},"n"),(0,a.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,a.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,a.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,a.kt)("span",{parentName:"span",className:"base"},(0,a.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,a.kt)("span",{parentName:"span",className:"mopen"},"("),(0,a.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,a.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click - to see solution code"),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n    vector<int> preorder;\n\n   public:\n    void traversal(TreeNode* root) {\n        if (!root) return;\n        preorder.push_back(root->val);\n        traversal(root->left);\n        traversal(root->right);\n    }\n\n    void flatten(TreeNode* root) {\n        if (root == NULL) return;\n        traversal(root);\n        root->left = NULL;\n        root->right = NULL;\n        root->val = preorder[0];\n        TreeNode* tmp = root;\n        for (int i = 1; i < preorder.size(); i++) {\n            TreeNode* newNode = new TreeNode(preorder[i]);\n            tmp->right = newNode;\n            tmp = newNode;\n        }\n    }\n};\n\n"))))))}d.isMDXComponent=!0}}]);