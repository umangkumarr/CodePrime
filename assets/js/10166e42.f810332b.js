"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[6427],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(a),d=r,k=m["".concat(i,".").concat(d)]||m[d]||p[d]||l;return a?n.createElement(k,o(o({ref:t},u),{},{components:a})):n.createElement(k,o({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<l;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),r=a(4334);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>d});var n=a(3117),r=a(7294),l=a(4334),o=a(2389),s=a(7392),i=a(7094),c=a(2466);const u="tabList__CuJ",p="tabItem_LNqP";function m(e){var t,a;const{lazy:o,block:m,defaultValue:d,values:k,groupId:h,className:b}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=k?k:f.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),v=(0,s.l)(y,((e,t)=>e.value===t.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const g=null===d?d:null!=(t=null!=d?d:null==(a=f.find((e=>e.props.default)))?void 0:a.props.value)?t:f[0].props.value;if(null!==g&&!y.some((e=>e.value===g)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+y.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:w}=(0,i.U)(),[O,L]=(0,r.useState)(g),x=[],{blockElementScrollPositionUntilNextRender:C}=(0,c.o5)();if(null!=h){const e=N[h];null!=e&&e!==O&&y.some((t=>t.value===e))&&L(e)}const T=e=>{const t=e.currentTarget,a=x.indexOf(t),n=y[a].value;n!==O&&(C(t),L(n),null!=h&&w(h,String(n)))},P=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{var n;const t=x.indexOf(e.currentTarget)+1;a=null!=(n=x[t])?n:x[0];break}case"ArrowLeft":{var r;const t=x.indexOf(e.currentTarget)-1;a=null!=(r=x[t])?r:x[x.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":m},b)},y.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:e=>x.push(e),onKeyDown:P,onFocus:T,onClick:T},o,{className:(0,l.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":O===t})}),null!=a?a:t)}))),o?(0,r.cloneElement)(f.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}function d(e){const t=(0,o.Z)();return r.createElement(m,(0,n.Z)({key:String(t)},e))}},6710:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var n=a(3117),r=(a(7294),a(3905)),l=a(5488),o=a(5162);const s={sidebar_position:88,tags:["Hash Table","Linked List","Design","Doubly-Linked List"]},i="LRU Cache",c={unversionedId:"codes/lru-cache",id:"codes/lru-cache",title:"LRU Cache",description:"Problem",source:"@site/docs/codes/lru-cache.md",sourceDirName:"codes",slug:"/codes/lru-cache",permalink:"/CodePrime/docs/codes/lru-cache",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/lru-cache.md",tags:[{label:"Hash Table",permalink:"/CodePrime/docs/tags/hash-table"},{label:"Linked List",permalink:"/CodePrime/docs/tags/linked-list"},{label:"Design",permalink:"/CodePrime/docs/tags/design"},{label:"Doubly-Linked List",permalink:"/CodePrime/docs/tags/doubly-linked-list"}],version:"current",sidebarPosition:88,frontMatter:{sidebar_position:88,tags:["Hash Table","Linked List","Design","Doubly-Linked List"]},sidebar:"Leetcode",previous:{title:"Min Stack",permalink:"/CodePrime/docs/codes/min-stack"},next:{title:"Largest Rectangle in Histogram",permalink:"/CodePrime/docs/codes/largest-rectangle-in-histogram"}},u={},p=[{value:"Problem",id:"problem",level:2},{value:"Solution Approach",id:"solution-approach",level:2}],m={toc:p};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lru-cache"},"LRU Cache"),(0,r.kt)("h2",{id:"problem"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/lru-cache/"},"Problem")),(0,r.kt)("p",null,"Design a data structure that follows the constraints of a ",(0,r.kt)("strong",null,(0,r.kt)("a",{href:"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU",target:"_blank"},"Least Recently Used (LRU) cache")),"."),(0,r.kt)("p",null,"Implement the ",(0,r.kt)("code",null,"LRUCache")," class:"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("code",null,"LRUCache(int capacity)")," Initialize the LRU cache with ",(0,r.kt)("strong",null,"positive")," size ",(0,r.kt)("code",null,"capacity"),"."),(0,r.kt)("li",null,(0,r.kt)("code",null,"int get(int key)")," Return the value of the ",(0,r.kt)("code",null,"key")," if the key exists, otherwise return ",(0,r.kt)("code",null,"-1"),"."),(0,r.kt)("li",null,(0,r.kt)("code",null,"void put(int key, int value)"),"\xa0Update the value of the ",(0,r.kt)("code",null,"key")," if the ",(0,r.kt)("code",null,"key")," exists. Otherwise, add the ",(0,r.kt)("code",null,"key-value")," pair to the cache. If the number of keys exceeds the ",(0,r.kt)("code",null,"capacity")," from this operation, ",(0,r.kt)("strong",null,"evict")," the least recently used key.")),(0,r.kt)("p",null,"The functions\xa0",(0,r.kt)("code",{"data-stringify-type":"code"},"get"),"\xa0and\xa0",(0,r.kt)("code",{"data-stringify-type":"code"},"put"),"\xa0must each run in ",(0,r.kt)("code",null,"O(1)")," average time complexity."),(0,r.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,r.kt)("p",null,"Expected Time complexity: ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click - to see solution code"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class LRUCache {\n    list<int> lst;\n    unordered_map<int, int> mp;\n    unordered_map<int, list<int>::iterator> itr;\n    int size;\n\n   public:\n    LRUCache(int capacity) { this->size = capacity; }\n\n    int get(int key) {\n        if (mp.find(key) == mp.end()) return -1;\n        update(key);\n        return mp[key];\n    }\n\n    void put(int key, int value) {\n        if (mp.size() == size && mp.find(key) == mp.end()) evict();\n        update(key);\n        mp[key] = value;\n    }\n\n    void update(int key) {\n        if (mp.find(key) != mp.end()) lst.erase(itr[key]);\n        lst.push_front(key);\n        itr[key] = lst.begin();\n    }\n\n    void evict() {\n        itr.erase(lst.back());\n        mp.erase(lst.back());\n        lst.pop_back();\n    }\n};\n\n\n"))))))}d.isMDXComponent=!0}}]);