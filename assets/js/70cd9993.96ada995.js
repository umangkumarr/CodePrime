"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[9683],{3905:function(e,a,n){n.d(a,{Zo:function(){return m},kt:function(){return d}});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=t.createContext({}),c=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},m=function(e){var a=c(e.components);return t.createElement(l.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||p[d]||o;return n?t.createElement(h,s(s({ref:a},m),{},{components:n})):t.createElement(h,s({ref:a},m))}));function d(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8215:function(e,a,n){var t=n(7294);a.Z=function(e){var a=e.children,n=e.hidden,r=e.className;return t.createElement("div",{role:"tabpanel",hidden:n,className:r},a)}},9877:function(e,a,n){n.d(a,{Z:function(){return m}});var t=n(7462),r=n(7294),o=n(2389),s=n(9548),i=n(6010),l="tabItem_LplD";function c(e){var a,n,o,c=e.lazy,m=e.block,p=e.defaultValue,u=e.values,d=e.groupId,h=e.className,f=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=u?u:f.map((function(e){var a=e.props;return{value:a.value,label:a.label,attributes:a.attributes}})),k=(0,s.lx)(b,(function(e,a){return e.value===a.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===p?p:null!=(a=null!=p?p:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?a:null==(o=f[0])?void 0:o.props.value;if(null!==v&&!b.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=(0,s.UB)(),N=g.tabGroupChoices,y=g.setTabGroupChoices,w=(0,r.useState)(v),j=w[0],x=w[1],O=[],T=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var E=N[d];null!=E&&E!==j&&b.some((function(e){return e.value===E}))&&x(E)}var P=function(e){var a=e.currentTarget,n=O.indexOf(a),t=b[n].value;t!==j&&(T(a),x(t),null!=d&&y(d,t))},C=function(e){var a,n=null;switch(e.key){case"ArrowRight":var t=O.indexOf(e.currentTarget)+1;n=O[t]||O[0];break;case"ArrowLeft":var r=O.indexOf(e.currentTarget)-1;n=O[r]||O[O.length-1]}null==(a=n)||a.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":m},h)},b.map((function(e){var a=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:j===a?0:-1,"aria-selected":j===a,key:a,ref:function(e){return O.push(e)},onKeyDown:C,onFocus:P,onClick:P},o,{className:(0,i.Z)("tabs__item",l,null==o?void 0:o.className,{"tabs__item--active":j===a})}),null!=n?n:a)}))),c?(0,r.cloneElement)(f.filter((function(e){return e.props.value===j}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},f.map((function(e,a){return(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==j})}))))}function m(e){var a=(0,o.Z)();return r.createElement(c,(0,t.Z)({key:String(a)},e))}},9595:function(e,a,n){n.r(a),n.d(a,{frontMatter:function(){return c},contentTitle:function(){return m},metadata:function(){return p},toc:function(){return u},default:function(){return h}});var t=n(7462),r=n(3366),o=(n(7294),n(3905)),s=n(9877),i=n(8215),l=["components"],c={sidebar_position:22,tags:["Array","String","Backtracking","Trie","Matrix"]},m="Word Search II",p={unversionedId:"codes/word-search-ii",id:"codes/word-search-ii",title:"Word Search II",description:"Problem",source:"@site/docs/codes/word-search-ii.md",sourceDirName:"codes",slug:"/codes/word-search-ii",permalink:"/CodePrime/docs/codes/word-search-ii",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/word-search-ii.md",tags:[{label:"Array",permalink:"/CodePrime/docs/tags/array"},{label:"String",permalink:"/CodePrime/docs/tags/string"},{label:"Backtracking",permalink:"/CodePrime/docs/tags/backtracking"},{label:"Trie",permalink:"/CodePrime/docs/tags/trie"},{label:"Matrix",permalink:"/CodePrime/docs/tags/matrix"}],version:"current",sidebarPosition:22,frontMatter:{sidebar_position:22,tags:["Array","String","Backtracking","Trie","Matrix"]}},u=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:u};function h(e){var a=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,t.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"word-search-ii"},"Word Search II"),(0,o.kt)("h2",{id:"problem"},(0,o.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/word-search-ii/"},"Problem")),(0,o.kt)("p",null,"Given an ",(0,o.kt)("code",null,"m x n")," ",(0,o.kt)("code",null,"board"),"\xa0of characters and a list of strings ",(0,o.kt)("code",null,"words"),", return ",(0,o.kt)("em",null,"all words on the board"),"."),(0,o.kt)("p",null,"Each word must be constructed from letters of sequentially adjacent cells, where ",(0,o.kt)("strong",null,"adjacent cells")," are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word."),(0,o.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,o.kt)("p",null,"Do BFS and memorization."),(0,o.kt)("p",null,"Expected Time complexity: ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mi",{parentName:"mrow"},"O"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,o.kt)("mi",{parentName:"mrow"},"n"),(0,o.kt)("mo",{parentName:"mrow"},"\u2217"),(0,o.kt)("mi",{parentName:"mrow"},"m"),(0,o.kt)("mo",{parentName:"mrow"},"\u2217"),(0,o.kt)("mi",{parentName:"mrow"},"l"),(0,o.kt)("mi",{parentName:"mrow"},"e"),(0,o.kt)("mi",{parentName:"mrow"},"n"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n*m*len)")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,o.kt)("span",{parentName:"span",className:"mopen"},"("),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,o.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4653em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,o.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,o.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,o.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Click - to see solution code"),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n    map<string, int> mp;\n    vector<vector<char>> board;\n    string s, w;\n    int n, m, check, len;\n\n   public:\n    void traverse(int i, int j, int indx) {\n        if (indx >= len) {\n            if (s == w) check = 1;\n            return;\n        }\n        if (check) return;\n        if (board[i][j] != w[indx]) return;\n\n        s.push_back(board[i][j]);\n        char c = board[i][j];\n        board[i][j] = '*';\n\n        if (j > 0 && board[i][j - 1] != '*') traverse(i, j - 1, indx + 1);\n        if (j < m - 1 && board[i][j + 1] != '*') traverse(i, j + 1, indx + 1);\n        if (i > 0 && board[i - 1][j] != '*') traverse(i - 1, j, indx + 1);\n        if (i < n - 1 && board[i + 1][j] != '*') traverse(i + 1, j, indx + 1);\n\n        if (s == w) check = 1;\n        board[i][j] = c;\n        s.pop_back();\n    }\n\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n        this->s = \"\";\n        this->n = board.size();\n        this->m = board[0].size();\n        this->board = board;\n        vector<string> ans;\n        for (auto i : words) {\n            this->w = i;\n            this->len = w.length();\n            s = \"\";\n            check = 0;\n            for (int j = 0; j < n; j++) {\n                if (check) break;\n                for (int k = 0; k < m; k++) {\n                    if (check) break;\n                    traverse(j, k, 0);\n                }\n            }\n            if (check) ans.push_back(w);\n        }\n        return ans;\n    }\n};\n"))))))}h.isMDXComponent=!0}}]);