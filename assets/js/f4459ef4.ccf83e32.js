"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[8116],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return d}});var a=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=a.createContext({}),m=function(e){var r=a.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},u=function(e){var r=m(e.components);return a.createElement(s.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},p=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=m(t),d=n,f=p["".concat(s,".").concat(d)]||p[d]||c[d]||o;return t?a.createElement(f,l(l({ref:r},u),{},{components:t})):a.createElement(f,l({ref:r},u))}));function d(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var m=2;m<o;m++)l[m]=t[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8215:function(e,r,t){var a=t(7294);r.Z=function(e){var r=e.children,t=e.hidden,n=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:n},r)}},9877:function(e,r,t){t.d(r,{Z:function(){return u}});var a=t(7462),n=t(7294),o=t(2389),l=t(9548),i=t(6010),s="tabItem_LplD";function m(e){var r,t,o,m=e.lazy,u=e.block,c=e.defaultValue,p=e.values,d=e.groupId,f=e.className,v=n.Children.map(e.children,(function(e){if((0,n.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=p?p:v.map((function(e){var r=e.props;return{value:r.value,label:r.label,attributes:r.attributes}})),b=(0,l.lx)(h,(function(e,r){return e.value===r.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===c?c:null!=(r=null!=c?c:null==(t=v.find((function(e){return e.props.default})))?void 0:t.props.value)?r:null==(o=v[0])?void 0:o.props.value;if(null!==y&&!h.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=(0,l.UB)(),g=k.tabGroupChoices,N=k.setTabGroupChoices,S=(0,n.useState)(y),T=S[0],P=S[1],x=[],D=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var w=g[d];null!=w&&w!==T&&h.some((function(e){return e.value===w}))&&P(w)}var E=function(e){var r=e.currentTarget,t=x.indexOf(r),a=h[t].value;a!==T&&(D(r),P(a),null!=d&&N(d,a))},O=function(e){var r,t=null;switch(e.key){case"ArrowRight":var a=x.indexOf(e.currentTarget)+1;t=x[a]||x[0];break;case"ArrowLeft":var n=x.indexOf(e.currentTarget)-1;t=x[n]||x[x.length-1]}null==(r=t)||r.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":u},f)},h.map((function(e){var r=e.value,t=e.label,o=e.attributes;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===r?0:-1,"aria-selected":T===r,key:r,ref:function(e){return x.push(e)},onKeyDown:O,onFocus:E,onClick:E},o,{className:(0,i.Z)("tabs__item",s,null==o?void 0:o.className,{"tabs__item--active":T===r})}),null!=t?t:r)}))),m?(0,n.cloneElement)(v.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},v.map((function(e,r){return(0,n.cloneElement)(e,{key:r,hidden:e.props.value!==T})}))))}function u(e){var r=(0,o.Z)();return n.createElement(m,(0,a.Z)({key:String(r)},e))}},3783:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return m},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return p},default:function(){return f}});var a=t(7462),n=t(3366),o=(t(7294),t(3905)),l=t(9877),i=t(8215),s=["components"],m={sidebar_position:1,tags:["Tree","Depth-First Search","Binary Tree","Dynamic Programming"]},u="Binary Tree Maximum Path Sum",c={unversionedId:"Problems/StriverSDESheet/Day19/Binary Tree Maximum Path Sum",id:"Problems/StriverSDESheet/Day19/Binary Tree Maximum Path Sum",title:"Binary Tree Maximum Path Sum",description:"Problem Link",source:"@site/docs/Problems/StriverSDESheet/Day19/Binary Tree Maximum Path Sum.md",sourceDirName:"Problems/StriverSDESheet/Day19",slug:"/Problems/StriverSDESheet/Day19/Binary Tree Maximum Path Sum",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day19/Binary Tree Maximum Path Sum",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Problems/StriverSDESheet/Day19/Binary Tree Maximum Path Sum.md",tags:[{label:"Tree",permalink:"/CodePrime/docs/tags/tree"},{label:"Depth-First Search",permalink:"/CodePrime/docs/tags/depth-first-search"},{label:"Binary Tree",permalink:"/CodePrime/docs/tags/binary-tree"},{label:"Dynamic Programming",permalink:"/CodePrime/docs/tags/dynamic-programming"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,tags:["Tree","Depth-First Search","Binary Tree","Dynamic Programming"]},sidebar:"api",previous:{title:"Boundary Traversal of binary tree",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day18/Boundary Traversal of binary tree"},next:{title:"Construct Binary Tree from Preorder and Inorder Traversal",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day19/Construct Binary Tree from Preorder and Inorder Traversal"}},p=[{value:"Problem Link",id:"problem-link",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:p};function f(e){var r=e.components,t=(0,n.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"binary-tree-maximum-path-sum"},"Binary Tree Maximum Path Sum"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/binary-tree-maximum-path-sum/"},"https://leetcode.com/problems/binary-tree-maximum-path-sum/")),(0,o.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,o.kt)("p",null,"Expected Time complexity: ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mi",{parentName:"mrow"},"O"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,o.kt)("mi",{parentName:"mrow"},"n"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,o.kt)("span",{parentName:"span",className:"mopen"},"("),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,o.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Click - to see solution code"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n    int ans;\n    map<TreeNode*, int> mp;\n\n   public:\n    void traversal(TreeNode* root) {\n        if (!root) return;\n        traversal(root->left);\n        traversal(root->right);\n\n        ans = max(ans, root->val);\n\n        int value = root->val;\n        if (root->right) value += mp[root->right];\n        if (root->left) value += mp[root->left];\n\n        ans = max(ans, value);\n        mp[root] = max({root->val, root->val + mp[root->right],\n                        root->val + mp[root->left]});\n        ans = max(ans, mp[root]);\n    }\n\n    int maxPathSum(TreeNode* root) {\n        ans = INT_MIN;\n        traversal(root);\n        return ans;\n    }\n};\n"))))))}f.isMDXComponent=!0}}]);