"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[9683],{3905:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>d});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=n.createContext({}),c=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},m=function(e){var a=c(e.components);return n.createElement(i.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=c(t),d=r,h=u["".concat(i,".").concat(d)]||u[d]||p[d]||s;return t?n.createElement(h,l(l({ref:a},m),{},{components:t})):n.createElement(h,l({ref:a},m))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,l=new Array(s);l[0]=u;var o={};for(var i in a)hasOwnProperty.call(a,i)&&(o[i]=a[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<s;c++)l[c]=t[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8215:(e,a,t)=>{t.d(a,{Z:()=>r});var n=t(7294);const r=function(e){let{children:a,hidden:t,className:r}=e;return n.createElement("div",{role:"tabpanel",hidden:t,className:r},a)}},9877:(e,a,t)=>{t.d(a,{Z:()=>m});var n=t(7462),r=t(7294),s=t(2389),l=t(5773),o=t(6010);const i="tabItem_LplD";function c(e){var a,t,s;const{lazy:c,block:m,defaultValue:p,values:u,groupId:d,className:h}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=u?u:b.map((e=>{let{props:{value:a,label:t,attributes:n}}=e;return{value:a,label:t,attributes:n}})),f=(0,l.lx)(k,((e,a)=>e.value===a.value));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const v=null===p?p:null!=(a=null!=p?p:null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)?a:null==(s=b[0])?void 0:s.props.value;if(null!==v&&!k.some((e=>e.value===v)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+k.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:g,setTabGroupChoices:N}=(0,l.UB)(),[y,w]=(0,r.useState)(v),j=[],{blockElementScrollPositionUntilNextRender:x}=(0,l.o5)();if(null!=d){const e=g[d];null!=e&&e!==y&&k.some((a=>a.value===e))&&w(e)}const O=e=>{const a=e.currentTarget,t=j.indexOf(a),n=k[t].value;n!==y&&(x(a),w(n),null!=d&&N(d,n))},T=e=>{var a;let t=null;switch(e.key){case"ArrowRight":{const a=j.indexOf(e.currentTarget)+1;t=j[a]||j[0];break}case"ArrowLeft":{const a=j.indexOf(e.currentTarget)-1;t=j[a]||j[j.length-1];break}}null==(a=t)||a.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":m},h)},k.map((e=>{let{value:a,label:t,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:y===a?0:-1,"aria-selected":y===a,key:a,ref:e=>j.push(e),onKeyDown:T,onFocus:O,onClick:O},s,{className:(0,o.Z)("tabs__item",i,null==s?void 0:s.className,{"tabs__item--active":y===a})}),null!=t?t:a)}))),c?(0,r.cloneElement)(b.filter((e=>e.props.value===y))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},b.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==y})))))}function m(e){const a=(0,s.Z)();return r.createElement(c,(0,n.Z)({key:String(a)},e))}},9595:(e,a,t)=>{t.r(a),t.d(a,{frontMatter:()=>o,contentTitle:()=>i,metadata:()=>c,toc:()=>m,default:()=>u});var n=t(7462),r=(t(7294),t(3905)),s=t(9877),l=t(8215);const o={displayed_sidebar:null,sidebar_position:22,tags:["Array","String","Backtracking","Trie","Matrix"]},i="Word Search II",c={unversionedId:"codes/word-search-ii",id:"codes/word-search-ii",title:"Word Search II",description:"Problem",source:"@site/docs/codes/word-search-ii.md",sourceDirName:"codes",slug:"/codes/word-search-ii",permalink:"/docs/codes/word-search-ii",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/word-search-ii.md",tags:[{label:"Array",permalink:"/docs/tags/array"},{label:"String",permalink:"/docs/tags/string"},{label:"Backtracking",permalink:"/docs/tags/backtracking"},{label:"Trie",permalink:"/docs/tags/trie"},{label:"Matrix",permalink:"/docs/tags/matrix"}],version:"current",sidebarPosition:22,frontMatter:{displayed_sidebar:null,sidebar_position:22,tags:["Array","String","Backtracking","Trie","Matrix"]}},m=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],p={toc:m};function u(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"word-search-ii"},"Word Search II"),(0,r.kt)("h2",{id:"problem"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/word-search-ii/"},"Problem")),(0,r.kt)("p",null,"Given an ",(0,r.kt)("code",null,"m x n")," ",(0,r.kt)("code",null,"board"),"\xa0of characters and a list of strings ",(0,r.kt)("code",null,"words"),", return ",(0,r.kt)("em",null,"all words on the board"),"."),(0,r.kt)("p",null,"Each word must be constructed from letters of sequentially adjacent cells, where ",(0,r.kt)("strong",null,"adjacent cells")," are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word."),(0,r.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,r.kt)("p",null,"Do BFS and memorization."),(0,r.kt)("p",null,"Expected Time complexity: ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow"},"\u2217"),(0,r.kt)("mi",{parentName:"mrow"},"m"),(0,r.kt)("mo",{parentName:"mrow"},"\u2217"),(0,r.kt)("mi",{parentName:"mrow"},"l"),(0,r.kt)("mi",{parentName:"mrow"},"e"),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n*m*len)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4653em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click - to see solution code"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n    map<string, int> mp;\n    vector<vector<char>> board;\n    string s, w;\n    int n, m, check, len;\n\n   public:\n    void traverse(int i, int j, int indx) {\n        if (indx >= len) {\n            if (s == w) check = 1;\n            return;\n        }\n        if (check) return;\n        if (board[i][j] != w[indx]) return;\n\n        s.push_back(board[i][j]);\n        char c = board[i][j];\n        board[i][j] = '*';\n\n        if (j > 0 && board[i][j - 1] != '*') traverse(i, j - 1, indx + 1);\n        if (j < m - 1 && board[i][j + 1] != '*') traverse(i, j + 1, indx + 1);\n        if (i > 0 && board[i - 1][j] != '*') traverse(i - 1, j, indx + 1);\n        if (i < n - 1 && board[i + 1][j] != '*') traverse(i + 1, j, indx + 1);\n\n        if (s == w) check = 1;\n        board[i][j] = c;\n        s.pop_back();\n    }\n\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n        this->s = \"\";\n        this->n = board.size();\n        this->m = board[0].size();\n        this->board = board;\n        vector<string> ans;\n        for (auto i : words) {\n            this->w = i;\n            this->len = w.length();\n            s = \"\";\n            check = 0;\n            for (int j = 0; j < n; j++) {\n                if (check) break;\n                for (int k = 0; k < m; k++) {\n                    if (check) break;\n                    traverse(j, k, 0);\n                }\n            }\n            if (check) ans.push_back(w);\n        }\n        return ans;\n    }\n};\n"))))))}u.isMDXComponent=!0}}]);