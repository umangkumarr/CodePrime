"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[392],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>m});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),u=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},c=function(e){var r=u(e.components);return n.createElement(i.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,b=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return t?n.createElement(b,l(l({ref:r},c),{},{components:t})):n.createElement(b,l({ref:r},c))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=p;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var u=2;u<o;u++)l[u]=t[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8215:(e,r,t)=>{t.d(r,{Z:()=>a});var n=t(7294);const a=function(e){let{children:r,hidden:t,className:a}=e;return n.createElement("div",{role:"tabpanel",hidden:t,className:a},r)}},9877:(e,r,t)=>{t.d(r,{Z:()=>c});var n=t(7462),a=t(7294),o=t(2389),l=t(5773),s=t(6010);const i="tabItem_LplD";function u(e){var r,t,o;const{lazy:u,block:c,defaultValue:d,values:p,groupId:m,className:b}=e,f=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=p?p:f.map((e=>{let{props:{value:r,label:t,attributes:n}}=e;return{value:r,label:t,attributes:n}})),y=(0,l.lx)(h,((e,r)=>e.value===r.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const v=null===d?d:null!=(r=null!=d?d:null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)?r:null==(o=f[0])?void 0:o.props.value;if(null!==v&&!h.some((e=>e.value===v)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+h.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:g,setTabGroupChoices:k}=(0,l.UB)(),[w,O]=(0,a.useState)(v),T=[],{blockElementScrollPositionUntilNextRender:j}=(0,l.o5)();if(null!=m){const e=g[m];null!=e&&e!==w&&h.some((r=>r.value===e))&&O(e)}const E=e=>{const r=e.currentTarget,t=T.indexOf(r),n=h[t].value;n!==w&&(j(r),O(n),null!=m&&k(m,n))},P=e=>{var r;let t=null;switch(e.key){case"ArrowRight":{const r=T.indexOf(e.currentTarget)+1;t=T[r]||T[0];break}case"ArrowLeft":{const r=T.indexOf(e.currentTarget)-1;t=T[r]||T[T.length-1];break}}null==(r=t)||r.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":c},b)},h.map((e=>{let{value:r,label:t,attributes:o}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:w===r?0:-1,"aria-selected":w===r,key:r,ref:e=>T.push(e),onKeyDown:P,onFocus:E,onClick:E},o,{className:(0,s.Z)("tabs__item",i,null==o?void 0:o.className,{"tabs__item--active":w===r})}),null!=t?t:r)}))),u?(0,a.cloneElement)(f.filter((e=>e.props.value===w))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},f.map(((e,r)=>(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==w})))))}function c(e){const r=(0,o.Z)();return a.createElement(u,(0,n.Z)({key:String(r)},e))}},7823:(e,r,t)=>{t.r(r),t.d(r,{frontMatter:()=>s,contentTitle:()=>i,metadata:()=>u,toc:()=>c,default:()=>p});var n=t(7462),a=(t(7294),t(3905)),o=t(9877),l=t(8215);const s={displayed_sidebar:null,sidebar_position:8,tags:["Array","Two Pointers","Sorting"]},i="Merge Sorted Array",u={unversionedId:"codes/merge-sorted-array",id:"codes/merge-sorted-array",title:"Merge Sorted Array",description:"Problem",source:"@site/docs/codes/merge-sorted-array.md",sourceDirName:"codes",slug:"/codes/merge-sorted-array",permalink:"/docs/codes/merge-sorted-array",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/merge-sorted-array.md",tags:[{label:"Array",permalink:"/docs/tags/array"},{label:"Two Pointers",permalink:"/docs/tags/two-pointers"},{label:"Sorting",permalink:"/docs/tags/sorting"}],version:"current",sidebarPosition:8,frontMatter:{displayed_sidebar:null,sidebar_position:8,tags:["Array","Two Pointers","Sorting"]}},c=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:c};function p(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"merge-sorted-array"},"Merge Sorted Array"),(0,a.kt)("h2",{id:"problem"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/merge-sorted-array/"},"Problem")),(0,a.kt)("p",null,"You are given two integer arrays ",(0,a.kt)("code",null,"nums1")," and ",(0,a.kt)("code",null,"nums2"),", sorted in ",(0,a.kt)("strong",null,"non-decreasing order"),", and two integers ",(0,a.kt)("code",null,"m")," and ",(0,a.kt)("code",null,"n"),", representing the number of elements in ",(0,a.kt)("code",null,"nums1")," and ",(0,a.kt)("code",null,"nums2")," respectively."),(0,a.kt)("p",null,(0,a.kt)("strong",null,"Merge")," ",(0,a.kt)("code",null,"nums1")," and ",(0,a.kt)("code",null,"nums2")," into a single array sorted in ",(0,a.kt)("strong",null,"non-decreasing order"),"."),(0,a.kt)("p",null,"The final sorted array should not be returned by the function, but instead be ",(0,a.kt)("em",null,"stored inside the array "),(0,a.kt)("code",null,"nums1"),". To accommodate this, ",(0,a.kt)("code",null,"nums1")," has a length of ",(0,a.kt)("code",null,"m + n"),", where the first ",(0,a.kt)("code",null,"m")," elements denote the elements that should be merged, and the last ",(0,a.kt)("code",null,"n")," elements are set to ",(0,a.kt)("code",null,"0")," and should be ignored. ",(0,a.kt)("code",null,"nums2")," has a length of ",(0,a.kt)("code",null,"n"),"."),(0,a.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click - to see solution code"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    void merge(vector<int>& arr1, int m, vector<int>& arr2, int n) {\n        vector<int> arr(m + n);\n        int i = 0, j = 0, k = 0;\n        while (i < m && j < n) {\n            if (arr1[i] <= arr2[j])\n                arr[k++] = arr1[i++];\n            else\n                arr[k++] = arr2[j++];\n        }\n        while (i < m) arr[k++] = arr1[i++];\n        while (j < n) arr[k++] = arr2[j++];\n        arr1 = arr;\n    }\n};\n\n"))))))}p.isMDXComponent=!0}}]);