"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[6753],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(h,l(l({ref:t},c),{},{components:n})):r.createElement(h,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8215:function(e,t,n){var r=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return c}});var r=n(7462),a=n(7294),o=n(2389),l=n(9548),i=n(6010),s="tabItem_LplD";function u(e){var t,n,o,u=e.lazy,c=e.block,p=e.defaultValue,d=e.values,m=e.groupId,h=e.className,f=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=d?d:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,l.lx)(v,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===p?p:null!=(t=null!=p?p:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(o=f[0])?void 0:o.props.value;if(null!==k&&!v.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=(0,l.UB)(),y=g.tabGroupChoices,N=g.setTabGroupChoices,w=(0,a.useState)(k),S=w[0],D=w[1],O=[],E=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var P=y[m];null!=P&&P!==S&&v.some((function(e){return e.value===P}))&&D(P)}var T=function(e){var t=e.currentTarget,n=O.indexOf(t),r=v[n].value;r!==S&&(E(t),D(r),null!=m&&N(m,r))},x=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=O.indexOf(e.currentTarget)+1;n=O[r]||O[0];break;case"ArrowLeft":var a=O.indexOf(e.currentTarget)-1;n=O[a]||O[O.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":c},h)},v.map((function(e){var t=e.value,n=e.label,o=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:S===t?0:-1,"aria-selected":S===t,key:t,ref:function(e){return O.push(e)},onKeyDown:x,onFocus:T,onClick:T},o,{className:(0,i.Z)("tabs__item",s,null==o?void 0:o.className,{"tabs__item--active":S===t})}),null!=n?n:t)}))),u?(0,a.cloneElement)(f.filter((function(e){return e.props.value===S}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==S})}))))}function c(e){var t=(0,o.Z)();return a.createElement(u,(0,r.Z)({key:String(t)},e))}},5215:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return d},default:function(){return h}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=n(9877),i=n(8215),s=["components"],u={sidebar_position:7,tags:["Depth-First Search","Breadth-First Search","Union Find","Graph"]},c="Is Graph Bipartite?",p={unversionedId:"Problems/StriverSDESheet/Day23/Is Graph Bipartite",id:"Problems/StriverSDESheet/Day23/Is Graph Bipartite",title:"Is Graph Bipartite?",description:"Problem",source:"@site/docs/Problems/StriverSDESheet/Day23/Is Graph Bipartite.md",sourceDirName:"Problems/StriverSDESheet/Day23",slug:"/Problems/StriverSDESheet/Day23/Is Graph Bipartite",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day23/Is Graph Bipartite",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Problems/StriverSDESheet/Day23/Is Graph Bipartite.md",tags:[{label:"Depth-First Search",permalink:"/CodePrime/docs/tags/depth-first-search"},{label:"Breadth-First Search",permalink:"/CodePrime/docs/tags/breadth-first-search"},{label:"Union Find",permalink:"/CodePrime/docs/tags/union-find"},{label:"Graph",permalink:"/CodePrime/docs/tags/graph"}],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,tags:["Depth-First Search","Breadth-First Search","Union Find","Graph"]},sidebar:"api",previous:{title:"Topological sort",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day23/Topological sort"},next:{title:"Maximum Number of Non-Overlapping Substrings",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day24/Maximum Number of Non-Overlapping Substrings"}},d=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],m={toc:d};function h(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"is-graph-bipartite"},"Is Graph Bipartite?"),(0,o.kt)("h2",{id:"problem"},(0,o.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/is-graph-bipartite/"},"Problem")),(0,o.kt)("p",null,"There is an ",(0,o.kt)("strong",null,"undirected")," graph with ",(0,o.kt)("code",null,"n")," nodes, where each node is numbered between ",(0,o.kt)("code",null,"0")," and ",(0,o.kt)("code",null,"n - 1"),". You are given a 2D array ",(0,o.kt)("code",null,"graph"),", where ",(0,o.kt)("code",null,"graph[u]")," is an array of nodes that node ",(0,o.kt)("code",null,"u")," is adjacent to. More formally, for each ",(0,o.kt)("code",null,"v")," in ",(0,o.kt)("code",null,"graph[u]"),", there is an undirected edge between node ",(0,o.kt)("code",null,"u")," and node ",(0,o.kt)("code",null,"v"),". The graph has the following properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",null,"There are no self-edges (",(0,o.kt)("code",null,"graph[u]")," does not contain ",(0,o.kt)("code",null,"u"),")."),(0,o.kt)("li",null,"There are no parallel edges (",(0,o.kt)("code",null,"graph[u]")," does not contain duplicate values)."),(0,o.kt)("li",null,"If ",(0,o.kt)("code",null,"v")," is in ",(0,o.kt)("code",null,"graph[u]"),", then ",(0,o.kt)("code",null,"u")," is in ",(0,o.kt)("code",null,"graph[v]")," (the graph is undirected)."),(0,o.kt)("li",null,"The graph may not be connected, meaning there may be two nodes ",(0,o.kt)("code",null,"u")," and ",(0,o.kt)("code",null,"v")," such that there is no path between them.")),(0,o.kt)("p",null,"A graph is ",(0,o.kt)("strong",null,"bipartite")," if the nodes can be partitioned into two independent sets ",(0,o.kt)("code",null,"A")," and ",(0,o.kt)("code",null,"B")," such that ",(0,o.kt)("strong",null,"every")," edge in the graph connects a node in set ",(0,o.kt)("code",null,"A")," and a node in set ",(0,o.kt)("code",null,"B"),"."),(0,o.kt)("p",null,"Return ",(0,o.kt)("code",null,"true"),(0,o.kt)("em",null," if and only if it is ",(0,o.kt)("strong",null,"bipartite")),"."),(0,o.kt)("p",null,"\xa0"),(0,o.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,o.kt)("p",null,"Expected Time complexity: ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mi",{parentName:"mrow"},"O"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,o.kt)("mi",{parentName:"mrow"},"n"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,o.kt)("span",{parentName:"span",className:"mopen"},"("),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,o.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Click - to see solution code"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    bool dfs_helper(vector<vector<int>> Graph, vector<int>& visited, int par,\n                    int node, int color) {\n        visited[node] = color;          // painted\n        for (auto nbr : Graph[node]) {  // traversing nbrs\n            if (nbr != par and visited[nbr] == 0) {\n                bool value = dfs_helper(Graph, visited, node, nbr, 3 - color);\n                if (value == false) return false;\n            } else if (visited[nbr] == color)\n                return false;\n        }\n        return true;\n    }\n\n    bool dfs(vector<vector<int>> Graph, int N) {\n        vector<int> visited(N + 1);\n        int color = 1;\n        for (int i = 0; i < N; i++) {\n            if (visited[i] == 0) {\n                bool ans = dfs_helper(Graph, visited, -1, i, 1);\n                if (ans == false) return ans;\n            }\n        }\n        return true;\n    }\n\n    bool isBipartite(vector<vector<int>>& graph) {\n        int n = graph.size();\n        return dfs(graph, n);\n    }\n};\n"))))))}h.isMDXComponent=!0}}]);