"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[6144],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>m});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),u=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},c=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,b=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return t?n.createElement(b,l(l({ref:r},c),{},{components:t})):n.createElement(b,l({ref:r},c))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,r,t)=>{t.d(r,{Z:()=>l});var n=t(7294),a=t(4334);const o="tabItem_Ymn6";function l(e){let{children:r,hidden:t,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:t},r)}},5488:(e,r,t)=>{t.d(r,{Z:()=>m});var n=t(3117),a=t(7294),o=t(4334),l=t(2389),i=t(7392),s=t(7094),u=t(2466);const c="tabList__CuJ",d="tabItem_LNqP";function p(e){var r,t;const{lazy:l,block:p,defaultValue:m,values:b,groupId:v,className:f}=e,y=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=b?b:y.map((e=>{let{props:{value:r,label:t,attributes:n}}=e;return{value:r,label:t,attributes:n}})),h=(0,i.l)(g,((e,r)=>e.value===r.value));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const k=null===m?m:null!=(r=null!=m?m:null==(t=y.find((e=>e.props.default)))?void 0:t.props.value)?r:y[0].props.value;if(null!==k&&!g.some((e=>e.value===k)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+g.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:P,setTabGroupChoices:O}=(0,s.U)(),[T,w]=(0,a.useState)(k),C=[],{blockElementScrollPositionUntilNextRender:j}=(0,u.o5)();if(null!=v){const e=P[v];null!=e&&e!==T&&g.some((r=>r.value===e))&&w(e)}const E=e=>{const r=e.currentTarget,t=C.indexOf(r),n=g[t].value;n!==T&&(j(r),w(n),null!=v&&O(v,String(n)))},S=e=>{var r;let t=null;switch(e.key){case"ArrowRight":{var n;const r=C.indexOf(e.currentTarget)+1;t=null!=(n=C[r])?n:C[0];break}case"ArrowLeft":{var a;const r=C.indexOf(e.currentTarget)-1;t=null!=(a=C[r])?a:C[C.length-1];break}}null==(r=t)||r.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":p},f)},g.map((e=>{let{value:r,label:t,attributes:l}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===r?0:-1,"aria-selected":T===r,key:r,ref:e=>C.push(e),onKeyDown:S,onFocus:E,onClick:E},l,{className:(0,o.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":T===r})}),null!=t?t:r)}))),l?(0,a.cloneElement)(y.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},y.map(((e,r)=>(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==T})))))}function m(e){const r=(0,l.Z)();return a.createElement(p,(0,n.Z)({key:String(r)},e))}},4672:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var n=t(3117),a=(t(7294),t(3905)),o=t(5488),l=t(5162);const i={sidebar_position:13,tags:["Array","Binary Search","Divide and Conquer","Binary Indexed Tree","Segment Tree","Merge Sort","Ordered Set"]},s="Reverse Pairs",u={unversionedId:"codes/reverse-pairs",id:"codes/reverse-pairs",title:"Reverse Pairs",description:"Problem",source:"@site/docs/codes/reverse-pairs.md",sourceDirName:"codes",slug:"/codes/reverse-pairs",permalink:"/CodePrime/docs/codes/reverse-pairs",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/reverse-pairs.md",tags:[{label:"Array",permalink:"/CodePrime/docs/tags/array"},{label:"Binary Search",permalink:"/CodePrime/docs/tags/binary-search"},{label:"Divide and Conquer",permalink:"/CodePrime/docs/tags/divide-and-conquer"},{label:"Binary Indexed Tree",permalink:"/CodePrime/docs/tags/binary-indexed-tree"},{label:"Segment Tree",permalink:"/CodePrime/docs/tags/segment-tree"},{label:"Merge Sort",permalink:"/CodePrime/docs/tags/merge-sort"},{label:"Ordered Set",permalink:"/CodePrime/docs/tags/ordered-set"}],version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13,tags:["Array","Binary Search","Divide and Conquer","Binary Indexed Tree","Segment Tree","Merge Sort","Ordered Set"]},sidebar:"Leetcode",previous:{title:"Arrays Part-III",permalink:"/CodePrime/docs/category/arrays-part-iii"},next:{title:"Search a 2D Matrix",permalink:"/CodePrime/docs/codes/search-a-2d-matrix"}},c={},d=[{value:"Problem",id:"problem",level:2},{value:"Solution Approach",id:"solution-approach",level:2}],p={toc:d};function m(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"reverse-pairs"},"Reverse Pairs"),(0,a.kt)("h2",{id:"problem"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/reverse-pairs/"},"Problem")),(0,a.kt)("p",null,"Given an integer array ",(0,a.kt)("code",null,"nums"),", return ",(0,a.kt)("em",null,"the number of ",(0,a.kt)("strong",null,"reverse pairs")," in the array"),"."),(0,a.kt)("p",null,"A reverse pair is a pair ",(0,a.kt)("code",null,"(i, j)")," where ",(0,a.kt)("code",null,"0 <= i < j < nums.length")," and ",(0,a.kt)("code",null,"nums[i] > 2 * nums[j]"),"."),(0,a.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click - to see solution code"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    int sort_and_count(vector<int>::iterator begin, vector<int>::iterator end) {\n        if (end - begin <= 1) return 0;\n        auto mid = begin + (end - begin) / 2;\n        int count = sort_and_count(begin, mid) + sort_and_count(mid, end);\n        for (auto i = begin, j = mid; i != mid; ++i) {\n            while (j != end and *i > 2L * *j) ++j;\n            count += j - mid;\n        }\n        inplace_merge(begin, mid, end);\n        return count;\n    }\n\n    int reversePairs(vector<int>& nums) {\n        return sort_and_count(nums.begin(), nums.end());\n    }\n};\n\n"))))))}m.isMDXComponent=!0}}]);