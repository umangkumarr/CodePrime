"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[1489],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,h=m["".concat(s,".").concat(d)]||m[d]||p[d]||i;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),r=n(4334);const i="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(3117),r=n(7294),i=n(4334),l=n(2389),o=n(7392),s=n(7094),c=n(2466);const u="tabList__CuJ",p="tabItem_LNqP";function m(e){var t,n;const{lazy:l,block:m,defaultValue:d,values:h,groupId:g,className:f}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=h?h:k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),v=(0,o.l)(b,((e,t)=>e.value===t.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===d?d:null!=(t=null!=d?d:null==(n=k.find((e=>e.props.default)))?void 0:n.props.value)?t:k[0].props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+b.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:w}=(0,s.U)(),[O,x]=(0,r.useState)(y),T=[],{blockElementScrollPositionUntilNextRender:E}=(0,c.o5)();if(null!=g){const e=N[g];null!=e&&e!==O&&b.some((t=>t.value===e))&&x(e)}const C=e=>{const t=e.currentTarget,n=T.indexOf(t),a=b[n].value;a!==O&&(E(t),x(a),null!=g&&w(g,String(a)))},P=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=T.indexOf(e.currentTarget)+1;n=null!=(a=T[t])?a:T[0];break}case"ArrowLeft":{var r;const t=T.indexOf(e.currentTarget)-1;n=null!=(r=T[t])?r:T[T.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":m},f)},b.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:e=>T.push(e),onKeyDown:P,onFocus:C,onClick:C},l,{className:(0,i.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":O===t})}),null!=n?n:t)}))),l?(0,r.cloneElement)(k.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}function d(e){const t=(0,l.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},3139:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var a=n(3117),r=(n(7294),n(3905)),i=n(5488),l=n(5162);const o={sidebar_position:92,tags:["String"]},s="String to Integer (atoi)",c={unversionedId:"codes/string-to-integer-atoi",id:"codes/string-to-integer-atoi",title:"String to Integer (atoi)",description:"Problem",source:"@site/docs/codes/string-to-integer-atoi.md",sourceDirName:"codes",slug:"/codes/string-to-integer-atoi",permalink:"/CodePrime/docs/codes/string-to-integer-atoi",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/string-to-integer-atoi.md",tags:[{label:"String",permalink:"/CodePrime/docs/tags/string"}],version:"current",sidebarPosition:92,frontMatter:{sidebar_position:92,tags:["String"]},sidebar:"Leetcode",previous:{title:"Repeated String Match",permalink:"/CodePrime/docs/codes/repeated-string-match"},next:{title:"Roman to Integer",permalink:"/CodePrime/docs/codes/roman-to-integer"}},u={},p=[{value:"Problem",id:"problem",level:2},{value:"Solution Approach",id:"solution-approach",level:2}],m={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"string-to-integer-atoi"},"String to Integer (atoi)"),(0,r.kt)("h2",{id:"problem"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/string-to-integer-atoi/"},"Problem")),(0,r.kt)("p",null,"Implement the ",(0,r.kt)("code",null,"myAtoi(string s)")," function, which converts a string to a 32-bit signed integer (similar to C/C++'s ",(0,r.kt)("code",null,"atoi")," function)."),(0,r.kt)("p",null,"The algorithm for ",(0,r.kt)("code",null,"myAtoi(string s)")," is as follows:"),(0,r.kt)("ol",null,(0,r.kt)("li",null,"Read in and ignore any leading whitespace."),(0,r.kt)("li",null,"Check if the next character (if not already at the end of the string) is ",(0,r.kt)("code",null,"'-'")," or ",(0,r.kt)("code",null,"'+'"),". Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present."),(0,r.kt)("li",null,"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored."),(0,r.kt)("li",null,"Convert these digits into an integer (i.e. ",(0,r.kt)("code",null,'"123" -> 123'),", ",(0,r.kt)("code",null,'"0032" -> 32'),"). If no digits were read, then the integer is ",(0,r.kt)("code",null,"0"),". Change the sign as necessary (from step 2)."),(0,r.kt)("li",null,"If the integer is out of the 32-bit signed integer range ",(0,r.kt)("code",null,"[-231, 231 - 1]"),", then clamp the integer so that it remains in the range. Specifically, integers less than ",(0,r.kt)("code",null,"-231")," should be clamped to ",(0,r.kt)("code",null,"-231"),", and integers greater than ",(0,r.kt)("code",null,"231 - 1")," should be clamped to ",(0,r.kt)("code",null,"231 - 1"),"."),(0,r.kt)("li",null,"Return the integer as the final result.")),(0,r.kt)("p",null,(0,r.kt)("strong",null,"Note:")),(0,r.kt)("ul",null,(0,r.kt)("li",null,"Only the space character ",(0,r.kt)("code",null,"' '")," is considered a whitespace character."),(0,r.kt)("li",null,(0,r.kt)("strong",null,"Do not ignore")," any characters other than the leading whitespace or the rest of the string after the digits.")),(0,r.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,r.kt)("p",null,"Expected Time complexity: ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click - to see solution code"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    int myAtoi(string s) {\n        long long ans = 0;\n        int n = s.length();\n        int i = 0, check = 0;\n        while (i < n && s[i] == ' ') i++;\n        if (s[i] == '-') check = 1;\n        if (s[i] == '+' || s[i] == '-') i++;\n        if (!(i < n && s[i] - '0' < 10 && s[i] - '0' >= 0)) return 0;\n\n        while (i < n && s[i] - '0' < 10 && s[i] - '0' >= 0) {\n            int num = s[i++] - '0';\n            ans = ans * 10 + num;\n            if (ans >= 2147483647 && check == 0)\n                return 2147483647;\n            else if (ans >= 2147483648 && check == 1)\n                return -2147483648;\n        }\n\n        if (check) ans *= -1;\n        return ans;\n    }\n};\n\n"))))))}d.isMDXComponent=!0}}]);