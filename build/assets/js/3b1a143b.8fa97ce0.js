"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[3144],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),u=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(i.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),d=a,v=p["".concat(i,".").concat(d)]||p[d]||m[d]||o;return t?r.createElement(v,s(s({ref:n},c),{},{components:t})):r.createElement(v,s({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=p;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var u=2;u<o;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(7294),a=t(4334);const o="tabItem_Ymn6";function s(e){let{children:n,hidden:t,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,s),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>d});var r=t(3117),a=t(7294),o=t(4334),s=t(2389),l=t(7392),i=t(7094),u=t(2466);const c="tabList__CuJ",m="tabItem_LNqP";function p(e){var n,t;const{lazy:s,block:p,defaultValue:d,values:v,groupId:b,className:k}=e,h=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=v?v:h.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),g=(0,l.l)(f,((e,n)=>e.value===n.value));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===d?d:null!=(n=null!=d?d:null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)?n:h[0].props.value;if(null!==y&&!f.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:w}=(0,i.U)(),[O,x]=(0,a.useState)(y),T=[],{blockElementScrollPositionUntilNextRender:E}=(0,u.o5)();if(null!=b){const e=N[b];null!=e&&e!==O&&f.some((n=>n.value===e))&&x(e)}const P=e=>{const n=e.currentTarget,t=T.indexOf(n),r=f[t].value;r!==O&&(E(n),x(r),null!=b&&w(b,String(r)))},C=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{var r;const n=T.indexOf(e.currentTarget)+1;t=null!=(r=T[n])?r:T[0];break}case"ArrowLeft":{var a;const n=T.indexOf(e.currentTarget)-1;t=null!=(a=T[n])?a:T[T.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":p},k)},f.map((e=>{let{value:n,label:t,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:O===n?0:-1,"aria-selected":O===n,key:n,ref:e=>T.push(e),onKeyDown:C,onFocus:P,onClick:P},s,{className:(0,o.Z)("tabs__item",m,null==s?void 0:s.className,{"tabs__item--active":O===n})}),null!=t?t:n)}))),s?(0,a.cloneElement)(h.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},h.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==O})))))}function d(e){const n=(0,s.Z)();return a.createElement(p,(0,r.Z)({key:String(n)},e))}},9200:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>u,toc:()=>m});var r=t(3117),a=(t(7294),t(3905)),o=t(5488),s=t(5162);const l={sidebar_position:99,tags:["Two Pointers","String"]},i="Compare Version Numbers",u={unversionedId:"codes/compare-version-numbers",id:"codes/compare-version-numbers",title:"Compare Version Numbers",description:"Problem",source:"@site/docs/codes/compare-version-numbers.md",sourceDirName:"codes",slug:"/codes/compare-version-numbers",permalink:"/CodePrime/docs/codes/compare-version-numbers",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/compare-version-numbers.md",tags:[{label:"Two Pointers",permalink:"/CodePrime/docs/tags/two-pointers"},{label:"String",permalink:"/CodePrime/docs/tags/string"}],version:"current",sidebarPosition:99,frontMatter:{sidebar_position:99,tags:["Two Pointers","String"]},sidebar:"Leetcode",previous:{title:"Implement strStr()",permalink:"/CodePrime/docs/codes/implement-strstr"},next:{title:"Count and Say",permalink:"/CodePrime/docs/codes/count-and-say"}},c={},m=[{value:"Problem",id:"problem",level:2},{value:"Solution Approach",id:"solution-approach",level:2}],p={toc:m};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"compare-version-numbers"},"Compare Version Numbers"),(0,a.kt)("h2",{id:"problem"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/compare-version-numbers/"},"Problem")),(0,a.kt)("p",null,"Given two version numbers,\xa0",(0,a.kt)("code",null,"version1")," and ",(0,a.kt)("code",null,"version2"),", compare them."),(0,a.kt)("ul",null),(0,a.kt)("p",null,"Version numbers consist of ",(0,a.kt)("strong",null,"one or more revisions")," joined by a dot\xa0",(0,a.kt)("code",null,"'.'"),". Each revision\xa0consists of ",(0,a.kt)("strong",null,"digits"),"\xa0and may contain leading ",(0,a.kt)("strong",null,"zeros"),". Every revision contains ",(0,a.kt)("strong",null,"at least one character"),". Revisions are ",(0,a.kt)("strong",null,"0-indexed from left to right"),", with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example\xa0",(0,a.kt)("code",null,"2.5.33"),"\xa0and\xa0",(0,a.kt)("code",null,"0.1"),"\xa0are valid version numbers."),(0,a.kt)("p",null,"To compare version numbers, compare their revisions in ",(0,a.kt)("strong",null,"left-to-right order"),". Revisions are compared using their\xa0",(0,a.kt)("strong",null,"integer value ignoring any leading zeros"),". This means that revisions\xa0",(0,a.kt)("code",null,"1"),"\xa0and\xa0",(0,a.kt)("code",null,"001"),"\xa0are considered\xa0",(0,a.kt)("strong",null,"equal"),". If a version number does not specify a revision at an index, then\xa0",(0,a.kt)("strong",null,"treat the revision as\xa0",(0,a.kt)("code",null,"0")),". For example, version\xa0",(0,a.kt)("code",null,"1.0")," is less than version\xa0",(0,a.kt)("code",null,"1.1"),"\xa0because their revision 0s are the same, but their revision 1s are\xa0",(0,a.kt)("code",null,"0"),"\xa0and\xa0",(0,a.kt)("code",null,"1"),"\xa0respectively, and\xa0",(0,a.kt)("code",null,"0 < 1"),"."),(0,a.kt)("p",null,(0,a.kt)("em",null,"Return the following:")),(0,a.kt)("ul",null,(0,a.kt)("li",null,"If ",(0,a.kt)("code",null,"version1 < version2"),", return ",(0,a.kt)("code",null,"-1"),"."),(0,a.kt)("li",null,"If ",(0,a.kt)("code",null,"version1 > version2"),", return ",(0,a.kt)("code",null,"1"),"."),(0,a.kt)("li",null,"Otherwise, return ",(0,a.kt)("code",null,"0"),".")),(0,a.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,a.kt)("p",null,"Expected Time complexity: ",(0,a.kt)("span",{parentName:"p",className:"math math-inline"},(0,a.kt)("span",{parentName:"span",className:"katex"},(0,a.kt)("span",{parentName:"span",className:"katex-mathml"},(0,a.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,a.kt)("semantics",{parentName:"math"},(0,a.kt)("mrow",{parentName:"semantics"},(0,a.kt)("mi",{parentName:"mrow"},"O"),(0,a.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,a.kt)("mi",{parentName:"mrow"},"n"),(0,a.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,a.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,a.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,a.kt)("span",{parentName:"span",className:"base"},(0,a.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,a.kt)("span",{parentName:"span",className:"mopen"},"("),(0,a.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,a.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click - to see solution code"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    int compareVersion(string version1, string version2) {\n        vector<int> v1, v2;\n        int last = 0;\n        for (int i = 0; i <= version1.size(); i++)\n            if (version1[i] == '.' || i == version1.size())\n                v1.push_back(stoi(version1.substr(last, i - last))),\n                    last = i + 1;\n        last = 0;\n        for (int i = 0; i <= version2.size(); i++)\n            if (version2[i] == '.' || i == version2.size())\n                v2.push_back(stoi(version2.substr(last, i - last))),\n                    last = i + 1;\n\n        int sz1 = v1.size(), sz2 = v2.size();\n        int cnt = abs(sz2 - sz1);\n        if (sz1 < sz2)\n            while (cnt--) v1.push_back(0);\n        else\n            while (cnt--) v2.push_back(0);\n        for (int i = 0; i < v1.size(); i++)\n            if (v1[i] != v2[i]) return (v1[i] < v2[i]) ? -1 : 1;\n        return 0;\n    }\n};\n\n"))))))}d.isMDXComponent=!0}}]);