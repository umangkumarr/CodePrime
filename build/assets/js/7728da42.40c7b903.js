"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[8231],{3905:function(e,a,n){n.d(a,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var u=r.createContext({}),m=function(e){var a=r.useContext(u),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},s=function(e){var a=m(e.components);return r.createElement(u.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},p=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,o=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=m(n),d=t,f=p["".concat(u,".").concat(d)]||p[d]||c[d]||o;return n?r.createElement(f,l(l({ref:a},s),{},{components:n})):r.createElement(f,l({ref:a},s))}));function d(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=n.length,l=new Array(o);l[0]=p;var i={};for(var u in a)hasOwnProperty.call(a,u)&&(i[u]=a[u]);i.originalType=e,i.mdxType="string"==typeof e?e:t,l[1]=i;for(var m=2;m<o;m++)l[m]=n[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8215:function(e,a,n){var r=n(7294);a.Z=function(e){var a=e.children,n=e.hidden,t=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:t},a)}},9877:function(e,a,n){n.d(a,{Z:function(){return s}});var r=n(7462),t=n(7294),o=n(2389),l=n(9548),i=n(6010),u="tabItem_LplD";function m(e){var a,n,o,m=e.lazy,s=e.block,c=e.defaultValue,p=e.values,d=e.groupId,f=e.className,b=t.Children.map(e.children,(function(e){if((0,t.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=p?p:b.map((function(e){var a=e.props;return{value:a.value,label:a.label,attributes:a.attributes}})),h=(0,l.lx)(v,(function(e,a){return e.value===a.value}));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===c?c:null!=(a=null!=c?c:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?a:null==(o=b[0])?void 0:o.props.value;if(null!==y&&!v.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=(0,l.UB)(),g=k.tabGroupChoices,x=k.setTabGroupChoices,N=(0,t.useState)(y),w=N[0],O=N[1],P=[],T=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var _=g[d];null!=_&&_!==w&&v.some((function(e){return e.value===_}))&&O(_)}var E=function(e){var a=e.currentTarget,n=P.indexOf(a),r=v[n].value;r!==w&&(T(a),O(r),null!=d&&x(d,r))},A=function(e){var a,n=null;switch(e.key){case"ArrowRight":var r=P.indexOf(e.currentTarget)+1;n=P[r]||P[0];break;case"ArrowLeft":var t=P.indexOf(e.currentTarget)-1;n=P[t]||P[P.length-1]}null==(a=n)||a.focus()};return t.createElement("div",{className:"tabs-container"},t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":s},f)},v.map((function(e){var a=e.value,n=e.label,o=e.attributes;return t.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===a?0:-1,"aria-selected":w===a,key:a,ref:function(e){return P.push(e)},onKeyDown:A,onFocus:E,onClick:E},o,{className:(0,i.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":w===a})}),null!=n?n:a)}))),m?(0,t.cloneElement)(b.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):t.createElement("div",{className:"margin-vert--md"},b.map((function(e,a){return(0,t.cloneElement)(e,{key:a,hidden:e.props.value!==w})}))))}function s(e){var a=(0,o.Z)();return t.createElement(m,(0,r.Z)({key:String(a)},e))}},148:function(e,a,n){n.r(a),n.d(a,{frontMatter:function(){return m},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return f}});var r=n(7462),t=n(3366),o=(n(7294),n(3905)),l=n(9877),i=n(8215),u=["components"],m={tags:["Array","Divide Conquer","Dynamic Programming"]},s="Maximum Subarray",c={unversionedId:"codes/Amazon/MaximumSubarray",id:"codes/Amazon/MaximumSubarray",title:"Maximum Subarray",description:"Problem Link",source:"@site/docs/codes/Amazon/MaximumSubarray.md",sourceDirName:"codes/Amazon",slug:"/codes/Amazon/MaximumSubarray",permalink:"/CodePrime/docs/codes/Amazon/MaximumSubarray",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/Amazon/MaximumSubarray.md",tags:[{label:"Array",permalink:"/CodePrime/docs/tags/array"},{label:"Divide Conquer",permalink:"/CodePrime/docs/tags/divide-conquer"},{label:"Dynamic Programming",permalink:"/CodePrime/docs/tags/dynamic-programming"}],version:"current",frontMatter:{tags:["Array","Divide Conquer","Dynamic Programming"]},sidebar:"tutorialSidebar",previous:{title:"Group Anagram",permalink:"/CodePrime/docs/codes/Amazon/GroupAnagram"},next:{title:"Merge Two Sorted Lists",permalink:"/CodePrime/docs/codes/Amazon/Merge2sortedlist"}},p=[{value:"Problem Link",id:"problem-link",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:p};function f(e){var a=e.components,n=(0,t.Z)(e,u);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"maximum-subarray"},"Maximum Subarray"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-subarray"},"https://leetcode.com/problems/maximum-subarray")),(0,o.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,o.kt)("p",null,"Kadane's Algorithm"),(0,o.kt)("p",null,"Expected Time complexity: ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mi",{parentName:"mrow"},"O"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,o.kt)("mi",{parentName:"mrow"},"n"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,o.kt)("span",{parentName:"span",className:"mopen"},"("),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,o.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Click - to see solution code"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    int maxSubArray(vector<int>& nums) {\n        int ans = *max_element(nums.begin(), nums.end());\n        int n = nums.size();\n        int max_so_far = 0, max_till_here = 0;\n\n        for (int i = 0; i < n; i++) {\n            max_till_here += nums[i];\n            if (max_till_here > max_so_far) max_so_far = max_till_here;\n            if (max_till_here < 0) max_till_here = 0;\n        }\n        if (ans < 0) return ans;\n        return max_so_far;\n    }\n};\n"))))))}f.isMDXComponent=!0}}]);