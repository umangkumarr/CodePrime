"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[7859],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),m=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=m(r),d=a,f=u["".concat(s,".").concat(d)]||u[d]||c[d]||o;return r?n.createElement(f,l(l({ref:t},p),{},{components:r})):n.createElement(f,l({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var m=2;m<o;m++)l[m]=r[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5162:(e,t,r)=>{r.d(t,{Z:()=>l});var n=r(7294),a=r(4334);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:r,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:r},t)}},5488:(e,t,r)=>{r.d(t,{Z:()=>d});var n=r(3117),a=r(7294),o=r(4334),l=r(2389),i=r(7392),s=r(7094),m=r(2466);const p="tabList__CuJ",c="tabItem_LNqP";function u(e){var t,r;const{lazy:l,block:u,defaultValue:d,values:f,groupId:h,className:b}=e,k=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=f?f:k.map((e=>{let{props:{value:t,label:r,attributes:n}}=e;return{value:t,label:r,attributes:n}})),g=(0,i.l)(v,((e,t)=>e.value===t.value));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const w=null===d?d:null!=(t=null!=d?d:null==(r=k.find((e=>e.props.default)))?void 0:r.props.value)?t:k[0].props.value;if(null!==w&&!v.some((e=>e.value===w)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+v.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:y,setTabGroupChoices:N}=(0,s.U)(),[x,T]=(0,a.useState)(w),O=[],{blockElementScrollPositionUntilNextRender:P}=(0,m.o5)();if(null!=h){const e=y[h];null!=e&&e!==x&&v.some((t=>t.value===e))&&T(e)}const E=e=>{const t=e.currentTarget,r=O.indexOf(t),n=v[r].value;n!==x&&(P(t),T(n),null!=h&&N(h,String(n)))},j=e=>{var t;let r=null;switch(e.key){case"ArrowRight":{var n;const t=O.indexOf(e.currentTarget)+1;r=null!=(n=O[t])?n:O[0];break}case"ArrowLeft":{var a;const t=O.indexOf(e.currentTarget)-1;r=null!=(a=O[t])?a:O[O.length-1];break}}null==(t=r)||t.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":u},b)},v.map((e=>{let{value:t,label:r,attributes:l}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:e=>O.push(e),onKeyDown:j,onFocus:E,onClick:E},l,{className:(0,o.Z)("tabs__item",c,null==l?void 0:l.className,{"tabs__item--active":x===t})}),null!=r?r:t)}))),l?(0,a.cloneElement)(k.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==x})))))}function d(e){const t=(0,l.Z)();return a.createElement(u,(0,n.Z)({key:String(t)},e))}},6912:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>m,toc:()=>c});var n=r(3117),a=(r(7294),r(3905)),o=r(5488),l=r(5162);const i={sidebar_position:178,tags:["Hash Table","String","Design","Trie"]},s="Implement Trie (Prefix Tree)",m={unversionedId:"codes/implement-trie-prefix-tree",id:"codes/implement-trie-prefix-tree",title:"Implement Trie (Prefix Tree)",description:"Problem",source:"@site/docs/codes/implement-trie-prefix-tree.md",sourceDirName:"codes",slug:"/codes/implement-trie-prefix-tree",permalink:"/CodePrime/docs/codes/implement-trie-prefix-tree",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/implement-trie-prefix-tree.md",tags:[{label:"Hash Table",permalink:"/CodePrime/docs/tags/hash-table"},{label:"String",permalink:"/CodePrime/docs/tags/string"},{label:"Design",permalink:"/CodePrime/docs/tags/design"},{label:"Trie",permalink:"/CodePrime/docs/tags/trie"}],version:"current",sidebarPosition:178,frontMatter:{sidebar_position:178,tags:["Hash Table","String","Design","Trie"]},sidebar:"Leetcode",previous:{title:"Maximum XOR of Two Numbers in an Array",permalink:"/CodePrime/docs/codes/maximum-xor-of-two-numbers-in-an-array"},next:{title:"Maximum XOR With an Element From Array",permalink:"/CodePrime/docs/codes/maximum-xor-with-an-element-from-array"}},p={},c=[{value:"Problem",id:"problem",level:2},{value:"Solution Approach",id:"solution-approach",level:2}],u={toc:c};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"implement-trie-prefix-tree"},"Implement Trie (Prefix Tree)"),(0,a.kt)("h2",{id:"problem"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/implement-trie-prefix-tree/"},"Problem")),(0,a.kt)("p",null,"A ",(0,a.kt)("a",{href:"https://en.wikipedia.org/wiki/Trie",target:"_blank"},(0,a.kt)("strong",null,"trie")),' (pronounced as "try") or ',(0,a.kt)("strong",null,"prefix tree")," is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker."),(0,a.kt)("p",null,"Implement the Trie class:"),(0,a.kt)("ul",null,(0,a.kt)("li",null,(0,a.kt)("code",null,"Trie()")," Initializes the trie object."),(0,a.kt)("li",null,(0,a.kt)("code",null,"void insert(String word)")," Inserts the string ",(0,a.kt)("code",null,"word")," into the trie."),(0,a.kt)("li",null,(0,a.kt)("code",null,"boolean search(String word)")," Returns ",(0,a.kt)("code",null,"true")," if the string ",(0,a.kt)("code",null,"word")," is in the trie (i.e., was inserted before), and ",(0,a.kt)("code",null,"false")," otherwise."),(0,a.kt)("li",null,(0,a.kt)("code",null,"boolean startsWith(String prefix)")," Returns ",(0,a.kt)("code",null,"true")," if there is a previously inserted string ",(0,a.kt)("code",null,"word")," that has the prefix ",(0,a.kt)("code",null,"prefix"),", and ",(0,a.kt)("code",null,"false")," otherwise.")),(0,a.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,a.kt)("p",null,"Expected Time complexity: ",(0,a.kt)("span",{parentName:"p",className:"math math-inline"},(0,a.kt)("span",{parentName:"span",className:"katex"},(0,a.kt)("span",{parentName:"span",className:"katex-mathml"},(0,a.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,a.kt)("semantics",{parentName:"math"},(0,a.kt)("mrow",{parentName:"semantics"},(0,a.kt)("mi",{parentName:"mrow"},"O"),(0,a.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,a.kt)("mi",{parentName:"mrow"},"n"),(0,a.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,a.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,a.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,a.kt)("span",{parentName:"span",className:"base"},(0,a.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,a.kt)("span",{parentName:"span",className:"mopen"},"("),(0,a.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,a.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click - to see solution code"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"struct Node {\n    unordered_map<char, Node*> mp;\n    char c;\n    bool terminal;\n    Node(char val) {\n        c = val;\n        terminal = false;\n    }\n};\n\nclass Trie {\n   public:\n    Node* root;\n\n    Trie() { root = new Node('*'); }\n\n    void insert(string word) {\n        int n = word.size();\n        Node* temp = root;\n        for (int i = 0; i < n; i++) {\n            if (temp->mp.find(word[i]) == temp->mp.end()) {\n                Node* newNode = new Node(word[i]);\n                temp->mp[word[i]] = newNode;\n                temp = newNode;\n            } else\n                temp = temp->mp[word[i]];\n        }\n        temp->terminal = true;\n    }\n\n    bool search(string word) {\n        Node* temp = root;\n        int n = word.size();\n        for (int i = 0; i < n; i++) {\n            if (temp->mp.find(word[i]) == temp->mp.end()) return false;\n            temp = temp->mp[word[i]];\n        }\n        return temp->terminal;\n    }\n\n    bool startsWith(string word) {\n        Node* temp = root;\n        int n = word.size();\n        for (int i = 0; i < n; i++) {\n            if (temp->mp.find(word[i]) == temp->mp.end()) return false;\n            temp = temp->mp[word[i]];\n        }\n        return true;\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */\n\n"))))))}d.isMDXComponent=!0}}]);