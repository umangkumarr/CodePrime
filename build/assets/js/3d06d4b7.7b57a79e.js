"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[8538],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||l;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var u=2;u<l;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(7294),o=n(4334);const l="tabItem_Ymn6";function a(e){let{children:t,hidden:n,className:a}=e;return r.createElement("div",{role:"tabpanel",className:(0,o.Z)(l,a),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(3117),o=n(7294),l=n(4334),a=n(2389),i=n(7392),s=n(7094),u=n(2466);const c="tabList__CuJ",d="tabItem_LNqP";function p(e){var t,n;const{lazy:a,block:p,defaultValue:m,values:f,groupId:v,className:b}=e,h=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=f?f:h.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),y=(0,i.l)(k,((e,t)=>e.value===t.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const g=null===m?m:null!=(t=null!=m?m:null==(n=h.find((e=>e.props.default)))?void 0:n.props.value)?t:h[0].props.value;if(null!==g&&!k.some((e=>e.value===g)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+k.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:N}=(0,s.U)(),[O,L]=(0,o.useState)(g),T=[],{blockElementScrollPositionUntilNextRender:x}=(0,u.o5)();if(null!=v){const e=w[v];null!=e&&e!==O&&k.some((t=>t.value===e))&&L(e)}const E=e=>{const t=e.currentTarget,n=T.indexOf(t),r=k[n].value;r!==O&&(x(t),L(r),null!=v&&N(v,String(r)))},P=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var r;const t=T.indexOf(e.currentTarget)+1;n=null!=(r=T[t])?r:T[0];break}case"ArrowLeft":{var o;const t=T.indexOf(e.currentTarget)-1;n=null!=(o=T[t])?o:T[T.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,l.Z)("tabs-container",c)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":p},b)},k.map((e=>{let{value:t,label:n,attributes:a}=e;return o.createElement("li",(0,r.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:e=>T.push(e),onKeyDown:P,onFocus:E,onClick:E},a,{className:(0,l.Z)("tabs__item",d,null==a?void 0:a.className,{"tabs__item--active":O===t})}),null!=n?n:t)}))),a?(0,o.cloneElement)(h.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}function m(e){const t=(0,a.Z)();return o.createElement(p,(0,r.Z)({key:String(t)},e))}},9756:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var r=n(3117),o=(n(7294),n(3905)),l=n(5488),a=n(5162);const i={sidebar_position:34,tags:["Linked List","Recursion"]},s="Reverse Nodes in k-Group",u={unversionedId:"codes/reverse-nodes-in-k-group",id:"codes/reverse-nodes-in-k-group",title:"Reverse Nodes in k-Group",description:"Problem",source:"@site/docs/codes/reverse-nodes-in-k-group.md",sourceDirName:"codes",slug:"/codes/reverse-nodes-in-k-group",permalink:"/CodePrime/docs/codes/reverse-nodes-in-k-group",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/reverse-nodes-in-k-group.md",tags:[{label:"Linked List",permalink:"/CodePrime/docs/tags/linked-list"},{label:"Recursion",permalink:"/CodePrime/docs/tags/recursion"}],version:"current",sidebarPosition:34,frontMatter:{sidebar_position:34,tags:["Linked List","Recursion"]},sidebar:"Leetcode",previous:{title:"Linked List Cycle",permalink:"/CodePrime/docs/codes/linked-list-cycle"},next:{title:"Intersection of Two Linked Lists",permalink:"/CodePrime/docs/codes/intersection-of-two-linked-lists"}},c={},d=[{value:"Problem",id:"problem",level:2},{value:"Solution Approach",id:"solution-approach",level:2}],p={toc:d};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"reverse-nodes-in-k-group"},"Reverse Nodes in k-Group"),(0,o.kt)("h2",{id:"problem"},(0,o.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/reverse-nodes-in-k-group/"},"Problem")),(0,o.kt)("p",null,"Given the ",(0,o.kt)("code",null,"head")," of a linked list, reverse the nodes of the list ",(0,o.kt)("code",null,"k")," at a time, and return ",(0,o.kt)("em",null,"the modified list"),"."),(0,o.kt)("p",null,(0,o.kt)("code",null,"k")," is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of ",(0,o.kt)("code",null,"k")," then left-out nodes, in the end, should remain as it is."),(0,o.kt)("p",null,"You may not alter the values in the list's nodes, only nodes themselves may be changed."),(0,o.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Click - to see solution code"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(a.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    ListNode* reverseKGroup(ListNode* h, int k) {\n        ListNode* root;\n        root = new ListNode(0);\n        ListNode* tail = root;\n        tail->next = h;\n        ListNode* t = h;\n        auto fun = [&](ListNode* t, ListNode* tail, int k) {\n            ListNode* h1;\n            while (1) {\n                int cnt = 0;\n                while (t && cnt < k) {\n                    ListNode* temp;\n                    temp = new ListNode(t->val);\n                    temp->next = h1;\n                    h1 = temp;\n                    cnt++;\n                    t = t->next;\n                }\n                if (cnt < k) return;\n                tail->next = h1;\n                cnt = 0;\n                while (cnt < k) {\n                    cnt++;\n                    tail = tail->next;\n                }\n                tail->next = t;\n            }\n        };\n        fun(t, tail, k);\n        return root->next;\n    }\n};\n\n"))))))}m.isMDXComponent=!0}}]);