"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[8538],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,v=p["".concat(i,".").concat(m)]||p[m]||d[m]||l;return n?r.createElement(v,a(a({ref:t},c),{},{components:n})):r.createElement(v,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<l;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8215:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(7294);const o=function(e){let{children:t,hidden:n,className:o}=e;return r.createElement("div",{role:"tabpanel",hidden:n,className:o},t)}},9877:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(7462),o=n(7294),l=n(2389),a=n(5773),s=n(6010);const i="tabItem_LplD";function u(e){var t,n,l;const{lazy:u,block:c,defaultValue:d,values:p,groupId:m,className:v}=e,f=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=p?p:f.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),b=(0,a.lx)(h,((e,t)=>e.value===t.value));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const k=null===d?d:null!=(t=null!=d?d:null==(n=f.find((e=>e.props.default)))?void 0:n.props.value)?t:null==(l=f[0])?void 0:l.props.value;if(null!==k&&!h.some((e=>e.value===k)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+h.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:y,setTabGroupChoices:g}=(0,a.UB)(),[w,N]=(0,o.useState)(k),O=[],{blockElementScrollPositionUntilNextRender:x}=(0,a.o5)();if(null!=m){const e=y[m];null!=e&&e!==w&&h.some((t=>t.value===e))&&N(e)}const E=e=>{const t=e.currentTarget,n=O.indexOf(t),r=h[n].value;r!==w&&(x(t),N(r),null!=m&&g(m,r))},T=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=O.indexOf(e.currentTarget)+1;n=O[t]||O[0];break}case"ArrowLeft":{const t=O.indexOf(e.currentTarget)-1;n=O[t]||O[O.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":c},v)},h.map((e=>{let{value:t,label:n,attributes:l}=e;return o.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>O.push(e),onKeyDown:T,onFocus:E,onClick:E},l,{className:(0,s.Z)("tabs__item",i,null==l?void 0:l.className,{"tabs__item--active":w===t})}),null!=n?n:t)}))),u?(0,o.cloneElement)(f.filter((e=>e.props.value===w))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},f.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function c(e){const t=(0,l.Z)();return o.createElement(u,(0,r.Z)({key:String(t)},e))}},9756:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>s,contentTitle:()=>i,metadata:()=>u,toc:()=>c,default:()=>p});var r=n(7462),o=(n(7294),n(3905)),l=n(9877),a=n(8215);const s={displayed_sidebar:null,sidebar_position:34,tags:["Linked List","Recursion"]},i="Reverse Nodes in k-Group",u={unversionedId:"codes/reverse-nodes-in-k-group",id:"codes/reverse-nodes-in-k-group",title:"Reverse Nodes in k-Group",description:"Problem",source:"@site/docs/codes/reverse-nodes-in-k-group.md",sourceDirName:"codes",slug:"/codes/reverse-nodes-in-k-group",permalink:"/docs/codes/reverse-nodes-in-k-group",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/reverse-nodes-in-k-group.md",tags:[{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Recursion",permalink:"/docs/tags/recursion"}],version:"current",sidebarPosition:34,frontMatter:{displayed_sidebar:null,sidebar_position:34,tags:["Linked List","Recursion"]}},c=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"reverse-nodes-in-k-group"},"Reverse Nodes in k-Group"),(0,o.kt)("h2",{id:"problem"},(0,o.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/reverse-nodes-in-k-group/"},"Problem")),(0,o.kt)("p",null,"Given the ",(0,o.kt)("code",null,"head")," of a linked list, reverse the nodes of the list ",(0,o.kt)("code",null,"k")," at a time, and return ",(0,o.kt)("em",null,"the modified list"),"."),(0,o.kt)("p",null,(0,o.kt)("code",null,"k")," is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of ",(0,o.kt)("code",null,"k")," then left-out nodes, in the end, should remain as it is."),(0,o.kt)("p",null,"You may not alter the values in the list's nodes, only nodes themselves may be changed."),(0,o.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Click - to see solution code"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(a.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    ListNode* reverseKGroup(ListNode* h, int k) {\n        ListNode* root;\n        root = new ListNode(0);\n        ListNode* tail = root;\n        tail->next = h;\n        ListNode* t = h;\n        auto fun = [&](ListNode* t, ListNode* tail, int k) {\n            ListNode* h1;\n            while (1) {\n                int cnt = 0;\n                while (t && cnt < k) {\n                    ListNode* temp;\n                    temp = new ListNode(t->val);\n                    temp->next = h1;\n                    h1 = temp;\n                    cnt++;\n                    t = t->next;\n                }\n                if (cnt < k) return;\n                tail->next = h1;\n                cnt = 0;\n                while (cnt < k) {\n                    cnt++;\n                    tail = tail->next;\n                }\n                tail->next = t;\n            }\n        };\n        fun(t, tail, k);\n        return root->next;\n    }\n};\n\n"))))))}p.isMDXComponent=!0}}]);