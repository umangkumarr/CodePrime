"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[4578],{3905:function(e,n,a){a.d(n,{Zo:function(){return m},kt:function(){return d}});var r=a(7294);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var u=r.createContext({}),s=function(e){var n=r.useContext(u),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},m=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var a=e.components,t=e.mdxType,o=e.originalType,u=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=s(a),d=t,f=p["".concat(u,".").concat(d)]||p[d]||c[d]||o;return a?r.createElement(f,l(l({ref:n},m),{},{components:a})):r.createElement(f,l({ref:n},m))}));function d(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,l=new Array(o);l[0]=p;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:t,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},8215:function(e,n,a){var r=a(7294);n.Z=function(e){var n=e.children,a=e.hidden,t=e.className;return r.createElement("div",{role:"tabpanel",hidden:a,className:t},n)}},9877:function(e,n,a){a.d(n,{Z:function(){return m}});var r=a(7462),t=a(7294),o=a(2389),l=a(9548),i=a(6010),u="tabItem_LplD";function s(e){var n,a,o,s=e.lazy,m=e.block,c=e.defaultValue,p=e.values,d=e.groupId,f=e.className,b=t.Children.map(e.children,(function(e){if((0,t.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=p?p:b.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),h=(0,l.lx)(v,(function(e,n){return e.value===n.value}));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===c?c:null!=(n=null!=c?c:null==(a=b.find((function(e){return e.props.default})))?void 0:a.props.value)?n:null==(o=b[0])?void 0:o.props.value;if(null!==y&&!v.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=(0,l.UB)(),k=g.tabGroupChoices,x=g.setTabGroupChoices,N=(0,t.useState)(y),w=N[0],O=N[1],_=[],E=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var P=k[d];null!=P&&P!==w&&v.some((function(e){return e.value===P}))&&O(P)}var T=function(e){var n=e.currentTarget,a=_.indexOf(n),r=v[a].value;r!==w&&(E(n),O(r),null!=d&&x(d,r))},C=function(e){var n,a=null;switch(e.key){case"ArrowRight":var r=_.indexOf(e.currentTarget)+1;a=_[r]||_[0];break;case"ArrowLeft":var t=_.indexOf(e.currentTarget)-1;a=_[t]||_[_.length-1]}null==(n=a)||n.focus()};return t.createElement("div",{className:"tabs-container"},t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":m},f)},v.map((function(e){var n=e.value,a=e.label,o=e.attributes;return t.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:function(e){return _.push(e)},onKeyDown:C,onFocus:T,onClick:T},o,{className:(0,i.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":w===n})}),null!=a?a:n)}))),s?(0,t.cloneElement)(b.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):t.createElement("div",{className:"margin-vert--md"},b.map((function(e,n){return(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==w})}))))}function m(e){var n=(0,o.Z)();return t.createElement(s,(0,r.Z)({key:String(n)},e))}},1986:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return s},contentTitle:function(){return m},metadata:function(){return c},toc:function(){return p},default:function(){return f}});var r=a(7462),t=a(3366),o=(a(7294),a(3905)),l=a(9877),i=a(8215),u=["components"],s={sidebar_position:5,tags:["Array","Divide and Conquer","Dynamic Programming"]},m="Maximum Subarray",c={unversionedId:"codes/maximum-subarray",id:"codes/maximum-subarray",title:"Maximum Subarray",description:"Problem",source:"@site/docs/codes/maximum-subarray.md",sourceDirName:"codes",slug:"/codes/maximum-subarray",permalink:"/CodePrime/docs/codes/maximum-subarray",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/maximum-subarray.md",tags:[{label:"Array",permalink:"/CodePrime/docs/tags/array"},{label:"Divide and Conquer",permalink:"/CodePrime/docs/tags/divide-and-conquer"},{label:"Dynamic Programming",permalink:"/CodePrime/docs/tags/dynamic-programming"}],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,tags:["Array","Divide and Conquer","Dynamic Programming"]}},p=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:p};function f(e){var n=e.components,a=(0,t.Z)(e,u);return(0,o.kt)("wrapper",(0,r.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"maximum-subarray"},"Maximum Subarray"),(0,o.kt)("h2",{id:"problem"},(0,o.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/maximum-subarray/"},"Problem")),(0,o.kt)("p",null,"Given an integer array ",(0,o.kt)("code",null,"nums"),", find the contiguous subarray (containing at least one number) which has the largest sum and return ",(0,o.kt)("em",null,"its sum"),"."),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",null,"subarray")," is a ",(0,o.kt)("strong",null,"contiguous")," part of an array."),(0,o.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,o.kt)("p",null,"Can we solve it using kadane's Algorithm?"),(0,o.kt)("p",null,"Expected Time complexity: ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mi",{parentName:"mrow"},"O"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,o.kt)("mi",{parentName:"mrow"},"n"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,o.kt)("span",{parentName:"span",className:"mopen"},"("),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,o.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Click - to see solution code"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    int maxSubArray(vector<int>& nums) {\n        int ans = *max_element(nums.begin(), nums.end());\n        int n = nums.size();\n        int max_so_far = 0, max_till_here = 0;\n\n        for (int i = 0; i < n; i++) {\n            max_till_here += nums[i];\n            if (max_till_here > max_so_far) max_so_far = max_till_here;\n            if (max_till_here < 0) max_till_here = 0;\n        }\n        if (ans < 0) return ans;\n        return max_so_far;\n    }\n};\n"))))))}f.isMDXComponent=!0}}]);