"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[6144],{3905:(e,r,n)=>{n.d(r,{Zo:()=>c,kt:()=>m});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=t.createContext({}),u=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},c=function(e){var r=u(e.components);return t.createElement(s.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,b=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?t.createElement(b,l(l({ref:r},c),{},{components:n})):t.createElement(b,l({ref:r},c))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=p;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8215:(e,r,n)=>{n.d(r,{Z:()=>a});var t=n(7294);const a=function(e){let{children:r,hidden:n,className:a}=e;return t.createElement("div",{role:"tabpanel",hidden:n,className:a},r)}},9877:(e,r,n)=>{n.d(r,{Z:()=>c});var t=n(7462),a=n(7294),o=n(2389),l=n(5773),i=n(6010);const s="tabItem_LplD";function u(e){var r,n,o;const{lazy:u,block:c,defaultValue:d,values:p,groupId:m,className:b}=e,v=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=p?p:v.map((e=>{let{props:{value:r,label:n,attributes:t}}=e;return{value:r,label:n,attributes:t}})),y=(0,l.lx)(f,((e,r)=>e.value===r.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const g=null===d?d:null!=(r=null!=d?d:null==(n=v.find((e=>e.props.default)))?void 0:n.props.value)?r:null==(o=v[0])?void 0:o.props.value;if(null!==g&&!f.some((e=>e.value===g)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:h,setTabGroupChoices:k}=(0,l.UB)(),[O,P]=(0,a.useState)(g),T=[],{blockElementScrollPositionUntilNextRender:w}=(0,l.o5)();if(null!=m){const e=h[m];null!=e&&e!==O&&f.some((r=>r.value===e))&&P(e)}const j=e=>{const r=e.currentTarget,n=T.indexOf(r),t=f[n].value;t!==O&&(w(r),P(t),null!=m&&k(m,t))},C=e=>{var r;let n=null;switch(e.key){case"ArrowRight":{const r=T.indexOf(e.currentTarget)+1;n=T[r]||T[0];break}case"ArrowLeft":{const r=T.indexOf(e.currentTarget)-1;n=T[r]||T[T.length-1];break}}null==(r=n)||r.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":c},b)},f.map((e=>{let{value:r,label:n,attributes:o}=e;return a.createElement("li",(0,t.Z)({role:"tab",tabIndex:O===r?0:-1,"aria-selected":O===r,key:r,ref:e=>T.push(e),onKeyDown:C,onFocus:j,onClick:j},o,{className:(0,i.Z)("tabs__item",s,null==o?void 0:o.className,{"tabs__item--active":O===r})}),null!=n?n:r)}))),u?(0,a.cloneElement)(v.filter((e=>e.props.value===O))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},v.map(((e,r)=>(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==O})))))}function c(e){const r=(0,o.Z)();return a.createElement(u,(0,t.Z)({key:String(r)},e))}},4672:(e,r,n)=>{n.r(r),n.d(r,{frontMatter:()=>i,contentTitle:()=>s,metadata:()=>u,toc:()=>c,default:()=>p});var t=n(7462),a=(n(7294),n(3905)),o=n(9877),l=n(8215);const i={displayed_sidebar:null,sidebar_position:13,tags:["Array","Binary Search","Divide and Conquer","Binary Indexed Tree","Segment Tree","Merge Sort","Ordered Set"]},s="Reverse Pairs",u={unversionedId:"codes/reverse-pairs",id:"codes/reverse-pairs",title:"Reverse Pairs",description:"Problem",source:"@site/docs/codes/reverse-pairs.md",sourceDirName:"codes",slug:"/codes/reverse-pairs",permalink:"/CodePrime/docs/codes/reverse-pairs",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/reverse-pairs.md",tags:[{label:"Array",permalink:"/CodePrime/docs/tags/array"},{label:"Binary Search",permalink:"/CodePrime/docs/tags/binary-search"},{label:"Divide and Conquer",permalink:"/CodePrime/docs/tags/divide-and-conquer"},{label:"Binary Indexed Tree",permalink:"/CodePrime/docs/tags/binary-indexed-tree"},{label:"Segment Tree",permalink:"/CodePrime/docs/tags/segment-tree"},{label:"Merge Sort",permalink:"/CodePrime/docs/tags/merge-sort"},{label:"Ordered Set",permalink:"/CodePrime/docs/tags/ordered-set"}],version:"current",sidebarPosition:13,frontMatter:{displayed_sidebar:null,sidebar_position:13,tags:["Array","Binary Search","Divide and Conquer","Binary Indexed Tree","Segment Tree","Merge Sort","Ordered Set"]}},c=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:c};function p(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"reverse-pairs"},"Reverse Pairs"),(0,a.kt)("h2",{id:"problem"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/reverse-pairs/"},"Problem")),(0,a.kt)("p",null,"Given an integer array ",(0,a.kt)("code",null,"nums"),", return ",(0,a.kt)("em",null,"the number of ",(0,a.kt)("strong",null,"reverse pairs")," in the array"),"."),(0,a.kt)("p",null,"A reverse pair is a pair ",(0,a.kt)("code",null,"(i, j)")," where ",(0,a.kt)("code",null,"0 <= i < j < nums.length")," and ",(0,a.kt)("code",null,"nums[i] > 2 * nums[j]"),"."),(0,a.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click - to see solution code"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    int sort_and_count(vector<int>::iterator begin, vector<int>::iterator end) {\n        if (end - begin <= 1) return 0;\n        auto mid = begin + (end - begin) / 2;\n        int count = sort_and_count(begin, mid) + sort_and_count(mid, end);\n        for (auto i = begin, j = mid; i != mid; ++i) {\n            while (j != end and *i > 2L * *j) ++j;\n            count += j - mid;\n        }\n        inplace_merge(begin, mid, end);\n        return count;\n    }\n\n    int reversePairs(vector<int>& nums) {\n        return sort_and_count(nums.begin(), nums.end());\n    }\n};\n\n"))))))}p.isMDXComponent=!0}}]);