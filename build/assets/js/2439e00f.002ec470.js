"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[5636],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(t),d=a,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8215:function(e,n,t){var r=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return c}});var r=t(7462),a=t(7294),o=t(2389),i=t(9548),l=t(6010),p="tabItem_LplD";function s(e){var n,t,o,s=e.lazy,c=e.block,u=e.defaultValue,m=e.values,d=e.groupId,f=e.className,v=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=m?m:v.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),k=(0,i.lx)(h,(function(e,n){return e.value===n.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===u?u:null!=(n=null!=u?u:null==(t=v.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(o=v[0])?void 0:o.props.value;if(null!==y&&!h.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=(0,i.UB)(),N=b.tabGroupChoices,g=b.setTabGroupChoices,w=(0,a.useState)(y),S=w[0],x=w[1],L=[],D=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var E=N[d];null!=E&&E!==S&&h.some((function(e){return e.value===E}))&&x(E)}var C=function(e){var n=e.currentTarget,t=L.indexOf(n),r=h[t].value;r!==S&&(D(n),x(r),null!=d&&g(d,r))},O=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r=L.indexOf(e.currentTarget)+1;t=L[r]||L[0];break;case"ArrowLeft":var a=L.indexOf(e.currentTarget)-1;t=L[a]||L[L.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":c},f)},h.map((function(e){var n=e.value,t=e.label,o=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:S===n?0:-1,"aria-selected":S===n,key:n,ref:function(e){return L.push(e)},onKeyDown:O,onFocus:C,onClick:C},o,{className:(0,l.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":S===n})}),null!=t?t:n)}))),s?(0,a.cloneElement)(v.filter((function(e){return e.props.value===S}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},v.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==S})}))))}function c(e){var n=(0,o.Z)();return a.createElement(s,(0,r.Z)({key:String(n)},e))}},9154:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return m},default:function(){return f}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=t(9877),l=t(8215),p=["components"],s={sidebar_position:3,tags:["Stack","Hash Map","Doubly-Linked List","Linked List"]},c="LFU Cache",u={unversionedId:"StriverSDESheet/Day14/LFU Cache",id:"StriverSDESheet/Day14/LFU Cache",title:"LFU Cache",description:"Problem Link",source:"@site/docs/StriverSDESheet/Day14/LFU Cache.md",sourceDirName:"StriverSDESheet/Day14",slug:"/StriverSDESheet/Day14/LFU Cache",permalink:"/CodePrime/docs/StriverSDESheet/Day14/LFU Cache",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/StriverSDESheet/Day14/LFU Cache.md",tags:[{label:"Stack",permalink:"/CodePrime/docs/tags/stack"},{label:"Hash Map",permalink:"/CodePrime/docs/tags/hash-map"},{label:"Doubly-Linked List",permalink:"/CodePrime/docs/tags/doubly-linked-list"},{label:"Linked List",permalink:"/CodePrime/docs/tags/linked-list"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,tags:["Stack","Hash Map","Doubly-Linked List","Linked List"]},sidebar:"tutorialSidebar",previous:{title:"LRU Cache",permalink:"/CodePrime/docs/StriverSDESheet/Day14/LRU Cache"},next:{title:"Largest Rectangle in Histogram",permalink:"/CodePrime/docs/StriverSDESheet/Day14/Largest Rectangle in Histogram"}},m=[{value:"Problem Link",id:"problem-link",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:m};function f(e){var n=e.components,t=(0,a.Z)(e,p);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"lfu-cache"},"LFU Cache"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/lfu-cache/"},"https://leetcode.com/problems/lfu-cache/")),(0,o.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,o.kt)("p",null,"Expected Time complexity: ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mi",{parentName:"mrow"},"O"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,o.kt)("mi",{parentName:"mrow"},"n"),(0,o.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,o.kt)("span",{parentName:"span",className:"mopen"},"("),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,o.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Click - to see solution code"),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"struct Node {\n    int key, value, freq;\n    Node *next;\n    Node *prev;\n    Node(int k, int v, int f) {\n        key = k, value = v, freq = f;\n        next = prev = NULL;\n    }\n};\n\nstruct dlist {\n    Node *head, *tail;\n    int size;\n\n    dlist() {\n        head = new Node(-1, -1, 0);\n        tail = new Node(-1, -1, 0);\n        head->next = tail;\n        tail->prev = head;\n        size = 0;\n    }\n\n    Node *addNode(int k, int v, int f) {\n        size++;\n        Node *newNode = new Node(k, v, f);\n        newNode->next = head->next;\n        head->next->prev = newNode;\n        newNode->prev = head;\n        head->next = newNode;\n        return newNode;\n    }\n\n    void delNode(Node *&node) {\n        size--;\n        node->prev->next = node->next;\n        node->next->prev = node->prev;\n    }\n\n    int empty() { return size == 0; }\n};\n\nclass LFUCache {\n    int cap, cnt, mf;\n    map<int, Node *> mp;\n    map<int, dlist *> fmap;\n\n   public:\n    LFUCache(int capacity) {\n        cap = capacity;\n        cnt = 0;\n        mf = 0;\n    }\n\n    int get(int key) {\n        if (mp.find(key) == mp.end()) return -1;\n        Node *ptr = mp[key];\n        fmap[ptr->freq]->delNode(ptr);\n        cnt--;\n        if (fmap[ptr->freq]->empty()) {\n            if (mf == ptr->freq) mf = ptr->freq + 1;\n            fmap.erase(ptr->freq);\n        }\n\n        if (fmap.find(ptr->freq + 1) != fmap.end()) {\n            Node *ptrr =\n                fmap[ptr->freq + 1]->addNode(key, ptr->value, ptr->freq + 1);\n            mp[key] = ptrr;\n            cnt++;\n        } else {\n            cnt++;\n            dlist *ptrr = new dlist();\n            fmap[ptr->freq + 1] = ptrr;\n            Node *node =\n                fmap[ptr->freq + 1]->addNode(key, ptr->value, ptr->freq + 1);\n            mp[key] = node;\n        }\n\n        return ptr->value;\n    }\n\n    void put(int key, int value) {\n        if (cap == 0) return;\n        if (mp.find(key) != mp.end()) {\n            Node *ptr = mp[key];\n            fmap[ptr->freq]->delNode(ptr);\n            if (fmap[ptr->freq]->empty()) {\n                if (mf == ptr->freq) mf = ptr->freq + 1;\n                fmap.erase(ptr->freq);\n            }\n            if (fmap.find(ptr->freq + 1) != fmap.end()) {\n                Node *node =\n                    fmap[ptr->freq + 1]->addNode(key, value, ptr->freq + 1);\n                mp[key] = node;\n            } else {\n                dlist *ptrr = new dlist();\n                fmap[ptr->freq + 1] = ptrr;\n                Node *node =\n                    fmap[ptr->freq + 1]->addNode(key, value, ptr->freq + 1);\n                mp[key] = node;\n            }\n            return;\n        }\n\n        if (cnt == cap) {\n            Node *ptr = fmap[mf]->tail->prev;\n            fmap[mf]->delNode(ptr);\n            cnt--;\n            if (fmap[mf]->empty()) {\n                fmap.erase(mf);\n            }\n            mp.erase(ptr->key);\n        }\n\n        mf = 0;\n        if (fmap.find(mf) != fmap.end()) {\n            Node *ptr = fmap[mf]->addNode(key, value, mf);\n            mp[key] = ptr;\n            cnt++;\n            return;\n        }\n\n        cnt++;\n        dlist *ptr = new dlist();\n        fmap[mf] = ptr;\n        Node *node = fmap[mf]->addNode(key, value, mf);\n        mp[key] = node;\n    }\n};\n\n"))))))}f.isMDXComponent=!0}}]);