"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[2163],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>u});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),s=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=s(e.components);return a.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=s(t),u=r,f=d["".concat(i,".").concat(u)]||d[u]||c[u]||o;return t?a.createElement(f,l(l({ref:n},m),{},{components:t})):a.createElement(f,l({ref:n},m))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var s=2;s<o;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(7294);const r=function(e){let{children:n,hidden:t,className:r}=e;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},9877:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(7462),r=t(7294),o=t(2389),l=t(5773),p=t(6010);const i="tabItem_LplD";function s(e){var n,t,o;const{lazy:s,block:m,defaultValue:c,values:d,groupId:u,className:f}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=d?d:h.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),k=(0,l.lx)(v,((e,n)=>e.value===n.value));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===c?c:null!=(n=null!=c?c:null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)?n:null==(o=h[0])?void 0:o.props.value;if(null!==y&&!v.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+v.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:b,setTabGroupChoices:N}=(0,l.UB)(),[g,w]=(0,r.useState)(y),S=[],{blockElementScrollPositionUntilNextRender:x}=(0,l.o5)();if(null!=u){const e=b[u];null!=e&&e!==g&&v.some((n=>n.value===e))&&w(e)}const L=e=>{const n=e.currentTarget,t=S.indexOf(n),a=v[t].value;a!==g&&(x(n),w(a),null!=u&&N(u,a))},D=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=S.indexOf(e.currentTarget)+1;t=S[n]||S[0];break}case"ArrowLeft":{const n=S.indexOf(e.currentTarget)-1;t=S[n]||S[S.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":m},f)},v.map((e=>{let{value:n,label:t,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:g===n?0:-1,"aria-selected":g===n,key:n,ref:e=>S.push(e),onKeyDown:D,onFocus:L,onClick:L},o,{className:(0,p.Z)("tabs__item",i,null==o?void 0:o.className,{"tabs__item--active":g===n})}),null!=t?t:n)}))),s?(0,r.cloneElement)(h.filter((e=>e.props.value===g))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},h.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==g})))))}function m(e){const n=(0,o.Z)();return r.createElement(s,(0,a.Z)({key:String(n)},e))}},3838:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>p,contentTitle:()=>i,metadata:()=>s,toc:()=>m,default:()=>d});var a=t(7462),r=(t(7294),t(3905)),o=t(9877),l=t(8215);const p={sidebar_position:3,tags:["Stack","Hash Map","Doubly-Linked List","Linked List"]},i="LFU Cache",s={unversionedId:"Problems/StriverSDESheet/Day14/LFU Cache",id:"Problems/StriverSDESheet/Day14/LFU Cache",title:"LFU Cache",description:"Problem Link",source:"@site/docs/Problems/StriverSDESheet/Day14/LFU Cache.md",sourceDirName:"Problems/StriverSDESheet/Day14",slug:"/Problems/StriverSDESheet/Day14/LFU Cache",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day14/LFU Cache",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Problems/StriverSDESheet/Day14/LFU Cache.md",tags:[{label:"Stack",permalink:"/CodePrime/docs/tags/stack"},{label:"Hash Map",permalink:"/CodePrime/docs/tags/hash-map"},{label:"Doubly-Linked List",permalink:"/CodePrime/docs/tags/doubly-linked-list"},{label:"Linked List",permalink:"/CodePrime/docs/tags/linked-list"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,tags:["Stack","Hash Map","Doubly-Linked List","Linked List"]},sidebar:"api",previous:{title:"LRU Cache",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day14/LRU Cache"},next:{title:"Largest Rectangle in Histogram",permalink:"/CodePrime/docs/Problems/StriverSDESheet/Day14/Largest Rectangle in Histogram"}},m=[{value:"Problem Link",id:"problem-link",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],c={toc:m};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lfu-cache"},"LFU Cache"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/lfu-cache/"},"https://leetcode.com/problems/lfu-cache/")),(0,r.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,r.kt)("p",null,"Expected Time complexity: ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click - to see solution code"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"struct Node {\n    int key, value, freq;\n    Node *next;\n    Node *prev;\n    Node(int k, int v, int f) {\n        key = k, value = v, freq = f;\n        next = prev = NULL;\n    }\n};\n\nstruct dlist {\n    Node *head, *tail;\n    int size;\n\n    dlist() {\n        head = new Node(-1, -1, 0);\n        tail = new Node(-1, -1, 0);\n        head->next = tail;\n        tail->prev = head;\n        size = 0;\n    }\n\n    Node *addNode(int k, int v, int f) {\n        size++;\n        Node *newNode = new Node(k, v, f);\n        newNode->next = head->next;\n        head->next->prev = newNode;\n        newNode->prev = head;\n        head->next = newNode;\n        return newNode;\n    }\n\n    void delNode(Node *&node) {\n        size--;\n        node->prev->next = node->next;\n        node->next->prev = node->prev;\n    }\n\n    int empty() { return size == 0; }\n};\n\nclass LFUCache {\n    int cap, cnt, mf;\n    map<int, Node *> mp;\n    map<int, dlist *> fmap;\n\n   public:\n    LFUCache(int capacity) {\n        cap = capacity;\n        cnt = 0;\n        mf = 0;\n    }\n\n    int get(int key) {\n        if (mp.find(key) == mp.end()) return -1;\n        Node *ptr = mp[key];\n        fmap[ptr->freq]->delNode(ptr);\n        cnt--;\n        if (fmap[ptr->freq]->empty()) {\n            if (mf == ptr->freq) mf = ptr->freq + 1;\n            fmap.erase(ptr->freq);\n        }\n\n        if (fmap.find(ptr->freq + 1) != fmap.end()) {\n            Node *ptrr =\n                fmap[ptr->freq + 1]->addNode(key, ptr->value, ptr->freq + 1);\n            mp[key] = ptrr;\n            cnt++;\n        } else {\n            cnt++;\n            dlist *ptrr = new dlist();\n            fmap[ptr->freq + 1] = ptrr;\n            Node *node =\n                fmap[ptr->freq + 1]->addNode(key, ptr->value, ptr->freq + 1);\n            mp[key] = node;\n        }\n\n        return ptr->value;\n    }\n\n    void put(int key, int value) {\n        if (cap == 0) return;\n        if (mp.find(key) != mp.end()) {\n            Node *ptr = mp[key];\n            fmap[ptr->freq]->delNode(ptr);\n            if (fmap[ptr->freq]->empty()) {\n                if (mf == ptr->freq) mf = ptr->freq + 1;\n                fmap.erase(ptr->freq);\n            }\n            if (fmap.find(ptr->freq + 1) != fmap.end()) {\n                Node *node =\n                    fmap[ptr->freq + 1]->addNode(key, value, ptr->freq + 1);\n                mp[key] = node;\n            } else {\n                dlist *ptrr = new dlist();\n                fmap[ptr->freq + 1] = ptrr;\n                Node *node =\n                    fmap[ptr->freq + 1]->addNode(key, value, ptr->freq + 1);\n                mp[key] = node;\n            }\n            return;\n        }\n\n        if (cnt == cap) {\n            Node *ptr = fmap[mf]->tail->prev;\n            fmap[mf]->delNode(ptr);\n            cnt--;\n            if (fmap[mf]->empty()) {\n                fmap.erase(mf);\n            }\n            mp.erase(ptr->key);\n        }\n\n        mf = 0;\n        if (fmap.find(mf) != fmap.end()) {\n            Node *ptr = fmap[mf]->addNode(key, value, mf);\n            mp[key] = ptr;\n            cnt++;\n            return;\n        }\n\n        cnt++;\n        dlist *ptr = new dlist();\n        fmap[mf] = ptr;\n        Node *node = fmap[mf]->addNode(key, value, mf);\n        mp[key] = node;\n    }\n};\n\n"))))))}d.isMDXComponent=!0}}]);