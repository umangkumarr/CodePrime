"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[6131],{3905:(e,r,a)=>{a.d(r,{Zo:()=>u,kt:()=>d});var t=a(7294);function n(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function o(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?o(Object(a),!0).forEach((function(r){n(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function s(e,r){if(null==e)return{};var a,t,n=function(e,r){if(null==e)return{};var a,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||(n[a]=e[a]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=t.createContext({}),c=function(e){var r=t.useContext(i),a=r;return e&&(a="function"==typeof e?e(r):l(l({},r),e)),a},u=function(e){var r=c(e.components);return t.createElement(i.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(a),d=n,h=m["".concat(i,".").concat(d)]||m[d]||p[d]||o;return a?t.createElement(h,l(l({ref:r},u),{},{components:a})):t.createElement(h,l({ref:r},u))}));function d(e,r){var a=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=m;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var c=2;c<o;c++)l[c]=a[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5162:(e,r,a)=>{a.d(r,{Z:()=>l});var t=a(7294),n=a(4334);const o="tabItem_Ymn6";function l(e){let{children:r,hidden:a,className:l}=e;return t.createElement("div",{role:"tabpanel",className:(0,n.Z)(o,l),hidden:a},r)}},5488:(e,r,a)=>{a.d(r,{Z:()=>d});var t=a(3117),n=a(7294),o=a(4334),l=a(2389),s=a(7392),i=a(7094),c=a(2466);const u="tabList__CuJ",p="tabItem_LNqP";function m(e){var r,a;const{lazy:l,block:m,defaultValue:d,values:h,groupId:b,className:f}=e,y=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=h?h:y.map((e=>{let{props:{value:r,label:a,attributes:t}}=e;return{value:r,label:a,attributes:t}})),k=(0,s.l)(v,((e,r)=>e.value===r.value));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const g=null===d?d:null!=(r=null!=d?d:null==(a=y.find((e=>e.props.default)))?void 0:a.props.value)?r:y[0].props.value;if(null!==g&&!v.some((e=>e.value===g)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+v.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:T}=(0,i.U)(),[w,O]=(0,n.useState)(g),x=[],{blockElementScrollPositionUntilNextRender:P}=(0,c.o5)();if(null!=b){const e=N[b];null!=e&&e!==w&&v.some((r=>r.value===e))&&O(e)}const S=e=>{const r=e.currentTarget,a=x.indexOf(r),t=v[a].value;t!==w&&(P(r),O(t),null!=b&&T(b,String(t)))},E=e=>{var r;let a=null;switch(e.key){case"ArrowRight":{var t;const r=x.indexOf(e.currentTarget)+1;a=null!=(t=x[r])?t:x[0];break}case"ArrowLeft":{var n;const r=x.indexOf(e.currentTarget)-1;a=null!=(n=x[r])?n:x[x.length-1];break}}null==(r=a)||r.focus()};return n.createElement("div",{className:(0,o.Z)("tabs-container",u)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":m},f)},v.map((e=>{let{value:r,label:a,attributes:l}=e;return n.createElement("li",(0,t.Z)({role:"tab",tabIndex:w===r?0:-1,"aria-selected":w===r,key:r,ref:e=>x.push(e),onKeyDown:E,onFocus:S,onClick:S},l,{className:(0,o.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":w===r})}),null!=a?a:r)}))),l?(0,n.cloneElement)(y.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},y.map(((e,r)=>(0,n.cloneElement)(e,{key:r,hidden:e.props.value!==w})))))}function d(e){const r=(0,l.Z)();return n.createElement(m,(0,t.Z)({key:String(r)},e))}},650:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var t=a(3117),n=(a(7294),a(3905)),o=a(5488),l=a(5162);const s={sidebar_position:129,tags:["Tree","Binary Search Tree","Binary Tree"]},i="Search in a Binary Search Tree",c={unversionedId:"codes/search-in-a-binary-search-tree",id:"codes/search-in-a-binary-search-tree",title:"Search in a Binary Search Tree",description:"Problem",source:"@site/docs/codes/search-in-a-binary-search-tree.md",sourceDirName:"codes",slug:"/codes/search-in-a-binary-search-tree",permalink:"/CodePrime/docs/codes/search-in-a-binary-search-tree",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/search-in-a-binary-search-tree.md",tags:[{label:"Tree",permalink:"/CodePrime/docs/tags/tree"},{label:"Binary Search Tree",permalink:"/CodePrime/docs/tags/binary-search-tree"},{label:"Binary Tree",permalink:"/CodePrime/docs/tags/binary-tree"}],version:"current",sidebarPosition:129,frontMatter:{sidebar_position:129,tags:["Tree","Binary Search Tree","Binary Tree"]},sidebar:"Leetcode",previous:{title:"Lowest Common Ancestor of a Binary Search Tree",permalink:"/CodePrime/docs/codes/lowest-common-ancestor-of-a-binary-search-tree"},next:{title:"Construct Binary Search Tree from Preorder Traversal",permalink:"/CodePrime/docs/codes/construct-binary-search-tree-from-preorder-traversal"}},u={},p=[{value:"Problem",id:"problem",level:2},{value:"Solution Approach",id:"solution-approach",level:2}],m={toc:p};function d(e){let{components:r,...a}=e;return(0,n.kt)("wrapper",(0,t.Z)({},m,a,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"search-in-a-binary-search-tree"},"Search in a Binary Search Tree"),(0,n.kt)("h2",{id:"problem"},(0,n.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/search-in-a-binary-search-tree/"},"Problem")),(0,n.kt)("p",null,"You are given the ",(0,n.kt)("code",null,"root")," of a binary search tree (BST) and an integer ",(0,n.kt)("code",null,"val"),"."),(0,n.kt)("p",null,"Find the node in the BST that the node's value equals ",(0,n.kt)("code",null,"val")," and return the subtree rooted with that node. If such a node does not exist, return ",(0,n.kt)("code",null,"null"),"."),(0,n.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,n.kt)("p",null,"Expected Time complexity: ",(0,n.kt)("span",{parentName:"p",className:"math math-inline"},(0,n.kt)("span",{parentName:"span",className:"katex"},(0,n.kt)("span",{parentName:"span",className:"katex-mathml"},(0,n.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,n.kt)("semantics",{parentName:"math"},(0,n.kt)("mrow",{parentName:"semantics"},(0,n.kt)("mi",{parentName:"mrow"},"O"),(0,n.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,n.kt)("mi",{parentName:"mrow"},"n"),(0,n.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,n.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,n.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,n.kt)("span",{parentName:"span",className:"base"},(0,n.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,n.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,n.kt)("span",{parentName:"span",className:"mopen"},"("),(0,n.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,n.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Click - to see solution code"),(0,n.kt)(o.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    TreeNode* searchBST(TreeNode* root, int val) {\n        if (root == NULL) return root;\n        if (root->val == val) return root;\n        if (root->val > val)\n            root = root->left;\n        else\n            root = root->right;\n        return searchBST(root, val);\n    }\n};\n\n"))))))}d.isMDXComponent=!0}}]);