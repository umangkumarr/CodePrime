"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[1113],{3905:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>d});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),m=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},u=function(e){var n=m(e.components);return t.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=m(a),d=r,b=p["".concat(s,".").concat(d)]||p[d]||c[d]||l;return a?t.createElement(b,o(o({ref:n},u),{},{components:a})):t.createElement(b,o({ref:n},u))}));function d(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var m=2;m<l;m++)o[m]=a[m];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},8215:(e,n,a)=>{a.d(n,{Z:()=>r});var t=a(7294);const r=function(e){let{children:n,hidden:a,className:r}=e;return t.createElement("div",{role:"tabpanel",hidden:a,className:r},n)}},9877:(e,n,a)=>{a.d(n,{Z:()=>u});var t=a(7462),r=a(7294),l=a(2389),o=a(5773),i=a(6010);const s="tabItem_LplD";function m(e){var n,a,l;const{lazy:m,block:u,defaultValue:c,values:p,groupId:d,className:b}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=p?p:f.map((e=>{let{props:{value:n,label:a,attributes:t}}=e;return{value:n,label:a,attributes:t}})),y=(0,o.lx)(h,((e,n)=>e.value===n.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const v=null===c?c:null!=(n=null!=c?c:null==(a=f.find((e=>e.props.default)))?void 0:a.props.value)?n:null==(l=f[0])?void 0:l.props.value;if(null!==v&&!h.some((e=>e.value===v)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+h.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:k,setTabGroupChoices:N}=(0,o.UB)(),[w,g]=(0,r.useState)(v),x=[],{blockElementScrollPositionUntilNextRender:O}=(0,o.o5)();if(null!=d){const e=k[d];null!=e&&e!==w&&h.some((n=>n.value===e))&&g(e)}const T=e=>{const n=e.currentTarget,a=x.indexOf(n),t=h[a].value;t!==w&&(O(n),g(t),null!=d&&N(d,t))},E=e=>{var n;let a=null;switch(e.key){case"ArrowRight":{const n=x.indexOf(e.currentTarget)+1;a=x[n]||x[0];break}case"ArrowLeft":{const n=x.indexOf(e.currentTarget)-1;a=x[n]||x[x.length-1];break}}null==(n=a)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":u},b)},h.map((e=>{let{value:n,label:a,attributes:l}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:e=>x.push(e),onKeyDown:E,onFocus:T,onClick:T},l,{className:(0,i.Z)("tabs__item",s,null==l?void 0:l.className,{"tabs__item--active":w===n})}),null!=a?a:n)}))),m?(0,r.cloneElement)(f.filter((e=>e.props.value===w))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},f.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==w})))))}function u(e){const n=(0,l.Z)();return r.createElement(m,(0,t.Z)({key:String(n)},e))}},5645:(e,n,a)=>{a.r(n),a.d(n,{frontMatter:()=>i,contentTitle:()=>s,metadata:()=>m,toc:()=>u,default:()=>p});var t=a(7462),r=(a(7294),a(3905)),l=a(9877),o=a(8215);const i={sidebar_position:3,tags:["Array","Hash Table","Bit Manipulation","Trie"]},s="Maximum XOR of Two Numbers in an Array",m={unversionedId:"codes/maximum-xor-of-two-numbers-in-an-array",id:"codes/maximum-xor-of-two-numbers-in-an-array",title:"Maximum XOR of Two Numbers in an Array",description:"Problem",source:"@site/docs/codes/maximum-xor-of-two-numbers-in-an-array.md",sourceDirName:"codes",slug:"/codes/maximum-xor-of-two-numbers-in-an-array",permalink:"/CodePrime/docs/codes/maximum-xor-of-two-numbers-in-an-array",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/maximum-xor-of-two-numbers-in-an-array.md",tags:[{label:"Array",permalink:"/CodePrime/docs/tags/array"},{label:"Hash Table",permalink:"/CodePrime/docs/tags/hash-table"},{label:"Bit Manipulation",permalink:"/CodePrime/docs/tags/bit-manipulation"},{label:"Trie",permalink:"/CodePrime/docs/tags/trie"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,tags:["Array","Hash Table","Bit Manipulation","Trie"]}},u=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],c={toc:u};function p(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"maximum-xor-of-two-numbers-in-an-array"},"Maximum XOR of Two Numbers in an Array"),(0,r.kt)("h2",{id:"problem"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/"},"Problem")),(0,r.kt)("p",null,"Given an integer array ",(0,r.kt)("code",null,"nums"),", return ",(0,r.kt)("em",null,"the maximum result of "),(0,r.kt)("code",null,"nums[i] XOR nums[j]"),", where ",(0,r.kt)("code",null,"0 <= i <= j < n"),"."),(0,r.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,r.kt)("p",null,"Expected Time complexity: ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mi",{parentName:"mrow"},"l"),(0,r.kt)("mi",{parentName:"mrow"},"o"),(0,r.kt)("mi",{parentName:"mrow"},"g"),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(nlogn)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click - to see solution code"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"typedef long long ll;\nll ans = 0;\nclass Node {\n   public:\n    ll data;\n    unordered_map<ll, Node*> children;\n    bool terminal;\n\n    Node(ll d) {\n        data = d;\n        terminal = false;\n    }\n};\nclass Trie {\n    Node* root;\n    ll cnt;\n\n   public:\n    Trie() {\n        root = new Node(0);\n        cnt = 0;\n    }\n\n    void insert(ll w) {\n        Node* temp = root;\n        ll a = w;\n        for (ll i = 30; i >= 0; i--) {\n            ll bit = 1LL << i;\n            bit &= w;\n            ll aa = bit >> i;\n            if (temp->children.count(aa)) {\n                temp = temp->children[aa];\n            } else {\n                Node* n = new Node(aa);\n                temp->children[aa] = n;\n                temp = n;\n            }\n        }\n        temp->terminal = true;\n    }\n\n    void find(ll w) {\n        Node* temp = root;\n        ll ans1 = 0;\n        for (ll i = 30; i >= 0; i--) {\n            ll bit = 1LL << i;\n            bit &= w;\n            ll aa = bit >> i;\n            aa ^= 1LL;\n            if (temp->children.count(aa)) {\n                ans1 += 1LL << i;\n                temp = temp->children[aa];\n            } else {\n                temp = temp->children[aa ^ 1];\n            }\n        }\n        ans = max(ans, ans1);\n        insert(w);\n    }\n};\n\nclass Solution {\n   public:\n    int findMaximumXOR(vector<int>& nums) {\n        Trie t;\n        ll n = nums.size();\n        if (n == 1) {\n            return 0;\n        }\n        ans = 0;\n        t.insert(nums[0]);\n        for (int i = 1; i < n; i++) {\n            t.find(nums[i]);\n        }\n        return (int)ans;\n    }\n};\n"))))))}p.isMDXComponent=!0}}]);