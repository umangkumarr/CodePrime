"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[4438],{3905:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>d});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=n.createContext({}),c=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},m=function(e){var a=c(e.components);return n.createElement(i.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(t),d=r,h=u["".concat(i,".").concat(d)]||u[d]||p[d]||s;return t?n.createElement(h,o(o({ref:a},m),{},{components:t})):n.createElement(h,o({ref:a},m))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=u;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<s;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5162:(e,a,t)=>{t.d(a,{Z:()=>o});var n=t(7294),r=t(4334);const s="tabItem_Ymn6";function o(e){let{children:a,hidden:t,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,o),hidden:t},a)}},5488:(e,a,t)=>{t.d(a,{Z:()=>d});var n=t(3117),r=t(7294),s=t(4334),o=t(2389),l=t(7392),i=t(7094),c=t(2466);const m="tabList__CuJ",p="tabItem_LNqP";function u(e){var a,t;const{lazy:o,block:u,defaultValue:d,values:h,groupId:k,className:f}=e,N=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=h?h:N.map((e=>{let{props:{value:a,label:t,attributes:n}}=e;return{value:a,label:t,attributes:n}})),v=(0,l.l)(b,((e,a)=>e.value===a.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===d?d:null!=(a=null!=d?d:null==(t=N.find((e=>e.props.default)))?void 0:t.props.value)?a:N[0].props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+b.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:g,setTabGroupChoices:w}=(0,i.U)(),[O,x]=(0,r.useState)(y),T=[],{blockElementScrollPositionUntilNextRender:C}=(0,c.o5)();if(null!=k){const e=g[k];null!=e&&e!==O&&b.some((a=>a.value===e))&&x(e)}const E=e=>{const a=e.currentTarget,t=T.indexOf(a),n=b[t].value;n!==O&&(C(a),x(n),null!=k&&w(k,String(n)))},S=e=>{var a;let t=null;switch(e.key){case"ArrowRight":{var n;const a=T.indexOf(e.currentTarget)+1;t=null!=(n=T[a])?n:T[0];break}case"ArrowLeft":{var r;const a=T.indexOf(e.currentTarget)-1;t=null!=(r=T[a])?r:T[T.length-1];break}}null==(a=t)||a.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",m)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":u},f)},b.map((e=>{let{value:a,label:t,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:O===a?0:-1,"aria-selected":O===a,key:a,ref:e=>T.push(e),onKeyDown:S,onFocus:E,onClick:E},o,{className:(0,s.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":O===a})}),null!=t?t:a)}))),o?(0,r.cloneElement)(N.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},N.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==O})))))}function d(e){const a=(0,o.Z)();return r.createElement(u,(0,n.Z)({key:String(a)},e))}},6795:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var n=t(3117),r=(t(7294),t(3905)),s=t(5488),o=t(5162);const l={sidebar_position:21,tags:["Depth-First Search","Breadth-First Search","Graph","Topological Sort"]},i="Course Schedule II",c={unversionedId:"codes/course-schedule-ii",id:"codes/course-schedule-ii",title:"Course Schedule II",description:"Problem",source:"@site/docs/codes/course-schedule-ii.md",sourceDirName:"codes",slug:"/codes/course-schedule-ii",permalink:"/CodePrime/docs/codes/course-schedule-ii",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/course-schedule-ii.md",tags:[{label:"Depth-First Search",permalink:"/CodePrime/docs/tags/depth-first-search"},{label:"Breadth-First Search",permalink:"/CodePrime/docs/tags/breadth-first-search"},{label:"Graph",permalink:"/CodePrime/docs/tags/graph"},{label:"Topological Sort",permalink:"/CodePrime/docs/tags/topological-sort"}],version:"current",sidebarPosition:21,frontMatter:{sidebar_position:21,tags:["Depth-First Search","Breadth-First Search","Graph","Topological Sort"]}},m={},p=[{value:"Problem",id:"problem",level:2},{value:"Solution Approach",id:"solution-approach",level:2}],u={toc:p};function d(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"course-schedule-ii"},"Course Schedule II"),(0,r.kt)("h2",{id:"problem"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/course-schedule-ii/"},"Problem")),(0,r.kt)("p",null,"There are a total of ",(0,r.kt)("code",null,"numCourses")," courses you have to take, labeled from ",(0,r.kt)("code",null,"0")," to ",(0,r.kt)("code",null,"numCourses - 1"),". You are given an array ",(0,r.kt)("code",null,"prerequisites")," where ",(0,r.kt)("code",null,"prerequisites[i] = [ai, bi]")," indicates that you ",(0,r.kt)("strong",null,"must")," take course ",(0,r.kt)("code",null,"bi")," first if you want to take course ",(0,r.kt)("code",null,"ai"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",null,"For example, the pair ",(0,r.kt)("code",null,"[0, 1]"),", indicates that to take course ",(0,r.kt)("code",null,"0")," you have to first take course ",(0,r.kt)("code",null,"1"),".")),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",null,"the ordering of courses you should take to finish all courses"),". If there are many valid answers, return ",(0,r.kt)("strong",null,"any")," of them. If it is impossible to finish all courses, return ",(0,r.kt)("strong",null,"an empty array"),"."),(0,r.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,r.kt)("p",null,"Make a directed graph from ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"a"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,r.kt)("mi",{parentName:"mrow"},"i"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mo",{parentName:"mrow"},">"),(0,r.kt)("mi",{parentName:"mrow"},"b"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,r.kt)("mi",{parentName:"mrow"},"i"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"]")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"a[i] -> b[i]")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"["),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,r.kt)("span",{parentName:"span",className:"mclose"},"]"),(0,r.kt)("span",{parentName:"span",className:"mord"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},">"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"["),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,r.kt)("span",{parentName:"span",className:"mclose"},"]"))))),". Then do a BFS to check if the graph is acyclic or not. If the graph is acyclic return then BFS traversal of the graph."),(0,r.kt)("p",null,"Expected Time complexity: ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click - to see solution code"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <unordered_map>\n#include <vector>\nclass Solution {\n    vector<vector<int>> G;\n    int N, ans = 1;\n    unordered_map<int, int> path;\n    vector<int> arr;\n\n   public:\n    void assign(int n) {\n        this->N = n;\n        G.resize(N);\n    }\n    void addedge(int x, int y) { G[x].push_back(y); }\n\n    void dfs(int cur, vector<int>& vis) {\n        if (ans == -1) return;\n        path[cur] = 1;\n        for (auto nbr : G[cur]) {\n            if (!vis[nbr] and path[nbr]) {\n                ans = -1;\n                return;\n            } else if (!vis[nbr]) {\n                dfs(nbr, vis);\n            }\n        }\n        vis[cur] = 1;\n        arr.push_back(cur);\n    }\n\n    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n        assign(numCourses);\n        for (auto i : prerequisites) {\n            addedge(i[0], i[1]);\n        }\n        vector<int> vis(N);\n        for (int i = 0; i < N; i++) {\n            vis[i] = 0;\n        }\n        for (int i = 0; i < N; i++) {\n            if (!vis[i]) {\n                path.clear();\n                dfs(i, vis);\n                if (ans == -1) {\n                    arr.clear();\n                    return arr;\n                }\n            }\n        }\n        return arr;\n    }\n};\n"))))))}d.isMDXComponent=!0}}]);