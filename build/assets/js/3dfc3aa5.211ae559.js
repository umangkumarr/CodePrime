"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[9852],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=l,b=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(b,a(a({ref:t},u),{},{components:n})):r.createElement(b,a({ref:t},u))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,a=new Array(o);a[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,a[1]=i;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8215:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(7294);const l=function(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",hidden:n,className:l},t)}},9877:(e,t,n)=>{n.d(t,{Z:()=>u});var r=n(7462),l=n(7294),o=n(2389),a=n(5773),i=n(6010);const s="tabItem_LplD";function c(e){var t,n,o;const{lazy:c,block:u,defaultValue:d,values:p,groupId:m,className:b}=e,f=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=p?p:f.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),k=(0,a.lx)(h,((e,t)=>e.value===t.value));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===d?d:null!=(t=null!=d?d:null==(n=f.find((e=>e.props.default)))?void 0:n.props.value)?t:null==(o=f[0])?void 0:o.props.value;if(null!==y&&!h.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+h.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:v,setTabGroupChoices:g}=(0,a.UB)(),[w,T]=(0,l.useState)(y),O=[],{blockElementScrollPositionUntilNextRender:L}=(0,a.o5)();if(null!=m){const e=v[m];null!=e&&e!==w&&h.some((t=>t.value===e))&&T(e)}const P=e=>{const t=e.currentTarget,n=O.indexOf(t),r=h[n].value;r!==w&&(L(t),T(r),null!=m&&g(m,r))},x=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=O.indexOf(e.currentTarget)+1;n=O[t]||O[0];break}case"ArrowLeft":{const t=O.indexOf(e.currentTarget)-1;n=O[t]||O[O.length-1];break}}null==(t=n)||t.focus()};return l.createElement("div",{className:"tabs-container"},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":u},b)},h.map((e=>{let{value:t,label:n,attributes:o}=e;return l.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>O.push(e),onKeyDown:x,onFocus:P,onClick:P},o,{className:(0,i.Z)("tabs__item",s,null==o?void 0:o.className,{"tabs__item--active":w===t})}),null!=n?n:t)}))),c?(0,l.cloneElement)(f.filter((e=>e.props.value===w))[0],{className:"margin-vert--md"}):l.createElement("div",{className:"margin-vert--md"},f.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function u(e){const t=(0,o.Z)();return l.createElement(c,(0,r.Z)({key:String(t)},e))}},9694:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>i,contentTitle:()=>s,metadata:()=>c,toc:()=>u,default:()=>p});var r=n(7462),l=(n(7294),n(3905)),o=n(9877),a=n(8215);const i={sidebar_position:36,tags:["Hash Table","Linked List","Two Pointers"]},s="Linked List Cycle II",c={unversionedId:"codes/linked-list-cycle-ii",id:"codes/linked-list-cycle-ii",title:"Linked List Cycle II",description:"Problem",source:"@site/docs/codes/linked-list-cycle-ii.md",sourceDirName:"codes",slug:"/codes/linked-list-cycle-ii",permalink:"/CodePrime/docs/codes/linked-list-cycle-ii",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/linked-list-cycle-ii.md",tags:[{label:"Hash Table",permalink:"/CodePrime/docs/tags/hash-table"},{label:"Linked List",permalink:"/CodePrime/docs/tags/linked-list"},{label:"Two Pointers",permalink:"/CodePrime/docs/tags/two-pointers"}],version:"current",sidebarPosition:36,frontMatter:{sidebar_position:36,tags:["Hash Table","Linked List","Two Pointers"]},sidebar:"main",previous:{title:"Intersection of Two Linked Lists",permalink:"/CodePrime/docs/codes/intersection-of-two-linked-lists"},next:{title:"Linked List and Arrays",permalink:"/CodePrime/docs/category/linked-list-and-arrays"}},u=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:u};function p(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"linked-list-cycle-ii"},"Linked List Cycle II"),(0,l.kt)("h2",{id:"problem"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/linked-list-cycle-ii/"},"Problem")),(0,l.kt)("p",null,"Given the ",(0,l.kt)("code",null,"head")," of a linked list, return ",(0,l.kt)("em",null,"the node where the cycle begins. If there is no cycle, return "),(0,l.kt)("code",null,"null"),"."),(0,l.kt)("p",null,"There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the ",(0,l.kt)("code",null,"next")," pointer. Internally, ",(0,l.kt)("code",null,"pos")," is used to denote the index of the node that tail's ",(0,l.kt)("code",null,"next")," pointer is connected to (",(0,l.kt)("strong",null,"0-indexed"),"). It is ",(0,l.kt)("code",null,"-1")," if there is no cycle. ",(0,l.kt)("strong",null,"Note that")," ",(0,l.kt)("code",null,"pos")," ",(0,l.kt)("strong",null,"is not passed as a parameter"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",null,"Do not modify")," the linked list."),(0,l.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Click - to see solution code"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(a.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    ListNode *detectCycle(ListNode *head) {\n        map<ListNode *, int> mp;\n        ListNode *temp;\n        temp = head;\n        int i = 0;\n        while (temp != NULL) {\n            mp[temp] = i;\n            if (mp.find(temp->next) != mp.end()) {\n                return temp->next;\n                break;\n            }\n            temp = temp->next;\n            i++;\n        }\n        return NULL;\n    }\n};\n\n"))))))}p.isMDXComponent=!0}}]);