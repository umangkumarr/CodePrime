"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[974],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),c=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(r),d=n,h=m["".concat(i,".").concat(d)]||m[d]||p[d]||o;return r?a.createElement(h,l(l({ref:t},u),{},{components:r})):a.createElement(h,l({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var c=2;c<o;c++)l[c]=r[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8215:(e,t,r)=>{r.d(t,{Z:()=>n});var a=r(7294);const n=function(e){let{children:t,hidden:r,className:n}=e;return a.createElement("div",{role:"tabpanel",hidden:r,className:n},t)}},9877:(e,t,r)=>{r.d(t,{Z:()=>u});var a=r(7462),n=r(7294),o=r(2389),l=r(5773),s=r(6010);const i="tabItem_LplD";function c(e){var t,r,o;const{lazy:c,block:u,defaultValue:p,values:m,groupId:d,className:h}=e,v=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=m?m:v.map((e=>{let{props:{value:t,label:r,attributes:a}}=e;return{value:t,label:r,attributes:a}})),f=(0,l.lx)(b,((e,t)=>e.value===t.value));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===p?p:null!=(t=null!=p?p:null==(r=v.find((e=>e.props.default)))?void 0:r.props.value)?t:null==(o=v[0])?void 0:o.props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+b.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:k,setTabGroupChoices:g}=(0,l.UB)(),[N,T]=(0,n.useState)(y),w=[],{blockElementScrollPositionUntilNextRender:O}=(0,l.o5)();if(null!=d){const e=k[d];null!=e&&e!==N&&b.some((t=>t.value===e))&&T(e)}const x=e=>{const t=e.currentTarget,r=w.indexOf(t),a=b[r].value;a!==N&&(O(t),T(a),null!=d&&g(d,a))},E=e=>{var t;let r=null;switch(e.key){case"ArrowRight":{const t=w.indexOf(e.currentTarget)+1;r=w[t]||w[0];break}case"ArrowLeft":{const t=w.indexOf(e.currentTarget)-1;r=w[t]||w[w.length-1];break}}null==(t=r)||t.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":u},h)},b.map((e=>{let{value:t,label:r,attributes:o}=e;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>w.push(e),onKeyDown:E,onFocus:x,onClick:x},o,{className:(0,s.Z)("tabs__item",i,null==o?void 0:o.className,{"tabs__item--active":N===t})}),null!=r?r:t)}))),c?(0,n.cloneElement)(v.filter((e=>e.props.value===N))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},v.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function u(e){const t=(0,o.Z)();return n.createElement(c,(0,a.Z)({key:String(t)},e))}},1492:(e,t,r)=>{r.r(t),r.d(t,{frontMatter:()=>s,contentTitle:()=>i,metadata:()=>c,toc:()=>u,default:()=>m});var a=r(7462),n=(r(7294),r(3905)),o=r(9877),l=r(8215);const s={displayed_sidebar:null,sidebar_position:109,tags:["Hash Table","Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},i="Vertical Order Traversal of a Binary Tree",c={unversionedId:"codes/vertical-order-traversal-of-a-binary-tree",id:"codes/vertical-order-traversal-of-a-binary-tree",title:"Vertical Order Traversal of a Binary Tree",description:"Problem",source:"@site/docs/codes/vertical-order-traversal-of-a-binary-tree.md",sourceDirName:"codes",slug:"/codes/vertical-order-traversal-of-a-binary-tree",permalink:"/docs/codes/vertical-order-traversal-of-a-binary-tree",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/vertical-order-traversal-of-a-binary-tree.md",tags:[{label:"Hash Table",permalink:"/docs/tags/hash-table"},{label:"Tree",permalink:"/docs/tags/tree"},{label:"Depth-First Search",permalink:"/docs/tags/depth-first-search"},{label:"Breadth-First Search",permalink:"/docs/tags/breadth-first-search"},{label:"Binary Tree",permalink:"/docs/tags/binary-tree"}],version:"current",sidebarPosition:109,frontMatter:{displayed_sidebar:null,sidebar_position:109,tags:["Hash Table","Tree","Depth-First Search","Breadth-First Search","Binary Tree"]}},u=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],p={toc:u};function m(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"vertical-order-traversal-of-a-binary-tree"},"Vertical Order Traversal of a Binary Tree"),(0,n.kt)("h2",{id:"problem"},(0,n.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/"},"Problem")),(0,n.kt)("p",null,"Given the ",(0,n.kt)("code",null,"root")," of a binary tree, calculate the ",(0,n.kt)("strong",null,"vertical order traversal")," of the binary tree."),(0,n.kt)("p",null,"For each node at position ",(0,n.kt)("code",null,"(row, col)"),", its left and right children will be at positions ",(0,n.kt)("code",null,"(row + 1, col - 1)")," and ",(0,n.kt)("code",null,"(row + 1, col + 1)")," respectively. The root of the tree is at ",(0,n.kt)("code",null,"(0, 0)"),"."),(0,n.kt)("p",null,"The ",(0,n.kt)("strong",null,"vertical order traversal")," of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values."),(0,n.kt)("p",null,"Return ",(0,n.kt)("em",null,"the ",(0,n.kt)("strong",null,"vertical order traversal")," of the binary tree"),"."),(0,n.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,n.kt)("p",null,"Expected Time complexity: ",(0,n.kt)("span",{parentName:"p",className:"math math-inline"},(0,n.kt)("span",{parentName:"span",className:"katex"},(0,n.kt)("span",{parentName:"span",className:"katex-mathml"},(0,n.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,n.kt)("semantics",{parentName:"math"},(0,n.kt)("mrow",{parentName:"semantics"},(0,n.kt)("mi",{parentName:"mrow"},"O"),(0,n.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,n.kt)("mi",{parentName:"mrow"},"n"),(0,n.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,n.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,n.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,n.kt)("span",{parentName:"span",className:"base"},(0,n.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,n.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,n.kt)("span",{parentName:"span",className:"mopen"},"("),(0,n.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,n.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Click - to see solution code"),(0,n.kt)(o.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n    map<int, map<int, vector<int>>> mp;\n\n   public:\n    void traverse(TreeNode* root, int c, int r) {\n        if (!root) return;\n        mp[c][r].push_back(root->val);\n        traverse(root->left, c - 1, r + 1);\n        traverse(root->right, c + 1, r + 1);\n    }\n\n    vector<vector<int>> verticalTraversal(TreeNode* root) {\n        traverse(root, 0, 0);\n        vector<vector<int>> ans;\n        for (auto i : mp) {\n            vector<int> v;\n            for (auto j : i.second) {\n                sort(j.second.begin(), j.second.end());\n                for (auto k : j.second) v.push_back(k);\n            }\n            ans.push_back(v);\n        }\n        return ans;\n    }\n};\n\n"))))))}m.isMDXComponent=!0}}]);