"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[6032],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var l=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},o=Object.keys(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=l.createContext({}),u=function(e){var t=l.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return l.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},p=l.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,h=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return n?l.createElement(h,a(a({ref:t},c),{},{components:n})):l.createElement(h,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var u=2;u<o;u++)a[u]=n[u];return l.createElement.apply(null,a)}return l.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8215:(e,t,n)=>{n.d(t,{Z:()=>r});var l=n(7294);const r=function(e){let{children:t,hidden:n,className:r}=e;return l.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},9877:(e,t,n)=>{n.d(t,{Z:()=>c});var l=n(7462),r=n(7294),o=n(2389),a=n(5773),s=n(6010);const i="tabItem_LplD";function u(e){var t,n,o;const{lazy:u,block:c,defaultValue:d,values:p,groupId:m,className:h}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=p?p:f.map((e=>{let{props:{value:t,label:n,attributes:l}}=e;return{value:t,label:n,attributes:l}})),b=(0,a.lx)(k,((e,t)=>e.value===t.value));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const v=null===d?d:null!=(t=null!=d?d:null==(n=f.find((e=>e.props.default)))?void 0:n.props.value)?t:null==(o=f[0])?void 0:o.props.value;if(null!==v&&!k.some((e=>e.value===v)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+k.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:g,setTabGroupChoices:y}=(0,a.UB)(),[w,T]=(0,r.useState)(v),O=[],{blockElementScrollPositionUntilNextRender:N}=(0,a.o5)();if(null!=m){const e=g[m];null!=e&&e!==w&&k.some((t=>t.value===e))&&T(e)}const P=e=>{const t=e.currentTarget,n=O.indexOf(t),l=k[n].value;l!==w&&(N(t),T(l),null!=m&&y(m,l))},E=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=O.indexOf(e.currentTarget)+1;n=O[t]||O[0];break}case"ArrowLeft":{const t=O.indexOf(e.currentTarget)-1;n=O[t]||O[O.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":c},h)},k.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,l.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>O.push(e),onKeyDown:E,onFocus:P,onClick:P},o,{className:(0,s.Z)("tabs__item",i,null==o?void 0:o.className,{"tabs__item--active":w===t})}),null!=n?n:t)}))),u?(0,r.cloneElement)(f.filter((e=>e.props.value===w))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function c(e){const t=(0,o.Z)();return r.createElement(u,(0,l.Z)({key:String(t)},e))}},2398:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>s,contentTitle:()=>i,metadata:()=>u,toc:()=>c,default:()=>p});var l=n(7462),r=(n(7294),n(3905)),o=n(9877),a=n(8215);const s={displayed_sidebar:null,sidebar_position:35,tags:["Hash Table","Linked List","Two Pointers"]},i="Intersection of Two Linked Lists",u={unversionedId:"codes/intersection-of-two-linked-lists",id:"codes/intersection-of-two-linked-lists",title:"Intersection of Two Linked Lists",description:"Problem",source:"@site/docs/codes/intersection-of-two-linked-lists.md",sourceDirName:"codes",slug:"/codes/intersection-of-two-linked-lists",permalink:"/CodePrime/docs/codes/intersection-of-two-linked-lists",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/intersection-of-two-linked-lists.md",tags:[{label:"Hash Table",permalink:"/CodePrime/docs/tags/hash-table"},{label:"Linked List",permalink:"/CodePrime/docs/tags/linked-list"},{label:"Two Pointers",permalink:"/CodePrime/docs/tags/two-pointers"}],version:"current",sidebarPosition:35,frontMatter:{displayed_sidebar:null,sidebar_position:35,tags:["Hash Table","Linked List","Two Pointers"]}},c=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,l.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"intersection-of-two-linked-lists"},"Intersection of Two Linked Lists"),(0,r.kt)("h2",{id:"problem"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/intersection-of-two-linked-lists/"},"Problem")),(0,r.kt)("p",null,"Given the heads of two singly linked-lists ",(0,r.kt)("code",null,"headA")," and ",(0,r.kt)("code",null,"headB"),", return ",(0,r.kt)("em",null,"the node at which the two lists intersect"),". If the two linked lists have no intersection at all, return ",(0,r.kt)("code",null,"null"),"."),(0,r.kt)("p",null,"For example, the following two linked lists begin to intersect at node ",(0,r.kt)("code",null,"c1"),":"),(0,r.kt)("img",{alt:"",src:"https://assets.leetcode.com/uploads/2021/03/05/160_statement.png"}),(0,r.kt)("p",null,"The test cases are generated such that there are no cycles anywhere in the entire linked structure."),(0,r.kt)("p",null,(0,r.kt)("strong",null,"Note")," that the linked lists must ",(0,r.kt)("strong",null,"retain their original structure")," after the function returns."),(0,r.kt)("p",null,(0,r.kt)("strong",null,"Custom Judge:")),(0,r.kt)("p",null,"The inputs to the ",(0,r.kt)("strong",null,"judge")," are given as follows (your program is ",(0,r.kt)("strong",null,"not")," given these inputs):"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("code",null,"intersectVal")," - The value of the node where the intersection occurs. This is ",(0,r.kt)("code",null,"0")," if there is no intersected node."),(0,r.kt)("li",null,(0,r.kt)("code",null,"listA")," - The first linked list."),(0,r.kt)("li",null,(0,r.kt)("code",null,"listB")," - The second linked list."),(0,r.kt)("li",null,(0,r.kt)("code",null,"skipA")," - The number of nodes to skip ahead in ",(0,r.kt)("code",null,"listA")," (starting from the head) to get to the intersected node."),(0,r.kt)("li",null,(0,r.kt)("code",null,"skipB")," - The number of nodes to skip ahead in ",(0,r.kt)("code",null,"listB")," (starting from the head) to get to the intersected node.")),(0,r.kt)("p",null,"The judge will then create the linked structure based on these inputs and pass the two heads, ",(0,r.kt)("code",null,"headA")," and ",(0,r.kt)("code",null,"headB"),"\xa0to your program. If you correctly return the intersected node, then your solution will be ",(0,r.kt)("strong",null,"accepted"),"."),(0,r.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click - to see solution code"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(a.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        map<ListNode *, int> mp;\n        ListNode *temp;\n        temp = new ListNode;\n        temp = headA;\n        while (temp) {\n            mp[temp] = 1;\n            temp = temp->next;\n        }\n        temp = headB;\n        while (temp) {\n            if (mp[temp]) return temp;\n            temp = temp->next;\n        }\n        return NULL;\n    }\n};\n\n"))))))}p.isMDXComponent=!0}}]);