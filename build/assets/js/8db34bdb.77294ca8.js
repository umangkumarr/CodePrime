"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[1259],{3905:(e,r,n)=>{n.d(r,{Zo:()=>c,kt:()=>m});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=t.createContext({}),p=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},c=function(e){var r=p(e.components);return t.createElement(i.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,b=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return n?t.createElement(b,l(l({ref:r},c),{},{components:n})):t.createElement(b,l({ref:r},c))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8215:(e,r,n)=>{n.d(r,{Z:()=>a});var t=n(7294);const a=function(e){let{children:r,hidden:n,className:a}=e;return t.createElement("div",{role:"tabpanel",hidden:n,className:a},r)}},9877:(e,r,n)=>{n.d(r,{Z:()=>c});var t=n(7462),a=n(7294),o=n(2389),l=n(5773),s=n(6010);const i="tabItem_LplD";function p(e){var r,n,o;const{lazy:p,block:c,defaultValue:d,values:u,groupId:m,className:b}=e,f=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=u?u:f.map((e=>{let{props:{value:r,label:n,attributes:t}}=e;return{value:r,label:n,attributes:t}})),h=(0,l.lx)(v,((e,r)=>e.value===r.value));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===d?d:null!=(r=null!=d?d:null==(n=f.find((e=>e.props.default)))?void 0:n.props.value)?r:null==(o=f[0])?void 0:o.props.value;if(null!==y&&!v.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+v.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:k,setTabGroupChoices:g}=(0,l.UB)(),[N,T]=(0,a.useState)(y),w=[],{blockElementScrollPositionUntilNextRender:O}=(0,l.o5)();if(null!=m){const e=k[m];null!=e&&e!==N&&v.some((r=>r.value===e))&&T(e)}const P=e=>{const r=e.currentTarget,n=w.indexOf(r),t=v[n].value;t!==N&&(O(r),T(t),null!=m&&g(m,t))},x=e=>{var r;let n=null;switch(e.key){case"ArrowRight":{const r=w.indexOf(e.currentTarget)+1;n=w[r]||w[0];break}case"ArrowLeft":{const r=w.indexOf(e.currentTarget)-1;n=w[r]||w[w.length-1];break}}null==(r=n)||r.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":c},b)},v.map((e=>{let{value:r,label:n,attributes:o}=e;return a.createElement("li",(0,t.Z)({role:"tab",tabIndex:N===r?0:-1,"aria-selected":N===r,key:r,ref:e=>w.push(e),onKeyDown:x,onFocus:P,onClick:P},o,{className:(0,s.Z)("tabs__item",i,null==o?void 0:o.className,{"tabs__item--active":N===r})}),null!=n?n:r)}))),p?(0,a.cloneElement)(f.filter((e=>e.props.value===N))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},f.map(((e,r)=>(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==N})))))}function c(e){const r=(0,o.Z)();return a.createElement(p,(0,t.Z)({key:String(r)},e))}},2723:(e,r,n)=>{n.r(r),n.d(r,{frontMatter:()=>s,contentTitle:()=>i,metadata:()=>p,toc:()=>c,default:()=>u});var t=n(7462),a=(n(7294),n(3905)),o=n(9877),l=n(8215);const s={displayed_sidebar:null,sidebar_position:122,tags:["Array","Hash Table","Divide and Conquer","Tree","Binary Tree"]},i="Construct Binary Tree from Inorder and Postorder Traversal",p={unversionedId:"codes/construct-binary-tree-from-inorder-and-postorder-traversal",id:"codes/construct-binary-tree-from-inorder-and-postorder-traversal",title:"Construct Binary Tree from Inorder and Postorder Traversal",description:"Problem",source:"@site/docs/codes/construct-binary-tree-from-inorder-and-postorder-traversal.md",sourceDirName:"codes",slug:"/codes/construct-binary-tree-from-inorder-and-postorder-traversal",permalink:"/CodePrime/docs/codes/construct-binary-tree-from-inorder-and-postorder-traversal",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/construct-binary-tree-from-inorder-and-postorder-traversal.md",tags:[{label:"Array",permalink:"/CodePrime/docs/tags/array"},{label:"Hash Table",permalink:"/CodePrime/docs/tags/hash-table"},{label:"Divide and Conquer",permalink:"/CodePrime/docs/tags/divide-and-conquer"},{label:"Tree",permalink:"/CodePrime/docs/tags/tree"},{label:"Binary Tree",permalink:"/CodePrime/docs/tags/binary-tree"}],version:"current",sidebarPosition:122,frontMatter:{displayed_sidebar:null,sidebar_position:122,tags:["Array","Hash Table","Divide and Conquer","Tree","Binary Tree"]}},c=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:c};function u(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"construct-binary-tree-from-inorder-and-postorder-traversal"},"Construct Binary Tree from Inorder and Postorder Traversal"),(0,a.kt)("h2",{id:"problem"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/"},"Problem")),(0,a.kt)("p",null,"Given two integer arrays ",(0,a.kt)("code",null,"inorder")," and ",(0,a.kt)("code",null,"postorder")," where ",(0,a.kt)("code",null,"inorder")," is the inorder traversal of a binary tree and ",(0,a.kt)("code",null,"postorder")," is the postorder traversal of the same tree, construct and return ",(0,a.kt)("em",null,"the binary tree"),"."),(0,a.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,a.kt)("p",null,"Expected Time complexity: ",(0,a.kt)("span",{parentName:"p",className:"math math-inline"},(0,a.kt)("span",{parentName:"span",className:"katex"},(0,a.kt)("span",{parentName:"span",className:"katex-mathml"},(0,a.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,a.kt)("semantics",{parentName:"math"},(0,a.kt)("mrow",{parentName:"semantics"},(0,a.kt)("mi",{parentName:"mrow"},"O"),(0,a.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,a.kt)("mi",{parentName:"mrow"},"n"),(0,a.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,a.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,a.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,a.kt)("span",{parentName:"span",className:"base"},(0,a.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,a.kt)("span",{parentName:"span",className:"mopen"},"("),(0,a.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,a.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click - to see solution code"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n    vector<int> postorder;\n    vector<int> inorder;\n\n   public:\n    TreeNode* createTree(int p1, int p2, int n1, int n2) {\n        if (p2 < p1 || n1 > n2) return NULL;\n        TreeNode* root = new TreeNode(postorder[p2]);\n        if (p1 == p2 || n1 == n2) return root;\n        int pp1, pp2, nn1, nn2;\n\n        nn1 = n1, nn2 = n1;\n        while (inorder[nn2] != postorder[p2]) {\n            nn2++;\n        }\n        nn2--;\n        pp1 = p1;\n        pp2 = p1 + (nn2 - nn1);\n\n        root->left = createTree(pp1, pp2, nn1, nn2);\n\n        nn2 = n2;\n        nn1 = n2;\n        while (inorder[nn1] != postorder[p2]) nn1--;\n        nn1++;\n        pp2 = p2 - 1;\n        pp1 = pp2 - (nn2 - nn1);\n        root->right = createTree(pp1, pp2, nn1, nn2);\n        return root;\n    }\n\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        this->postorder = postorder;\n        this->inorder = inorder;\n        int n = inorder.size();\n        return createTree(0, n - 1, 0, n - 1);\n    }\n};\n\n"))))))}u.isMDXComponent=!0}}]);