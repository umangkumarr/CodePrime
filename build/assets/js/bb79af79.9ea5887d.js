"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[1616],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,h=m["".concat(o,".").concat(d)]||m[d]||p[d]||s;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<s;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8215:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294);const r=function(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},9877:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(7462),r=n(7294),s=n(2389),l=n(5773),i=n(6010);const o="tabItem_LplD";function c(e){var t,n,s;const{lazy:c,block:u,defaultValue:p,values:m,groupId:d,className:h}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=m?m:k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,l.lx)(f,((e,t)=>e.value===t.value));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const v=null===p?p:null!=(t=null!=p?p:null==(n=k.find((e=>e.props.default)))?void 0:n.props.value)?t:null==(s=k[0])?void 0:s.props.value;if(null!==v&&!f.some((e=>e.value===v)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:g,setTabGroupChoices:N}=(0,l.UB)(),[y,w]=(0,r.useState)(v),L=[],{blockElementScrollPositionUntilNextRender:x}=(0,l.o5)();if(null!=d){const e=g[d];null!=e&&e!==y&&f.some((t=>t.value===e))&&w(e)}const O=e=>{const t=e.currentTarget,n=L.indexOf(t),a=f[n].value;a!==y&&(x(t),w(a),null!=d&&N(d,a))},T=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=L.indexOf(e.currentTarget)+1;n=L[t]||L[0];break}case"ArrowLeft":{const t=L.indexOf(e.currentTarget)-1;n=L[t]||L[L.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":u},h)},f.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,key:t,ref:e=>L.push(e),onKeyDown:T,onFocus:O,onClick:O},s,{className:(0,i.Z)("tabs__item",o,null==s?void 0:s.className,{"tabs__item--active":y===t})}),null!=n?n:t)}))),c?(0,r.cloneElement)(k.filter((e=>e.props.value===y))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},k.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==y})))))}function u(e){const t=(0,s.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},1755:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>i,contentTitle:()=>o,metadata:()=>c,toc:()=>u,default:()=>m});var a=n(7462),r=(n(7294),n(3905)),s=n(9877),l=n(8215);const i={displayed_sidebar:null,sidebar_position:7,tags:["Linked List","Divide and Conquer","Heap (Priority Queue)","Merge Sort"]},o="Merge k Sorted Lists",c={unversionedId:"codes/merge-k-sorted-lists",id:"codes/merge-k-sorted-lists",title:"Merge k Sorted Lists",description:"Problem",source:"@site/docs/codes/merge-k-sorted-lists.md",sourceDirName:"codes",slug:"/codes/merge-k-sorted-lists",permalink:"/docs/codes/merge-k-sorted-lists",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/merge-k-sorted-lists.md",tags:[{label:"Linked List",permalink:"/docs/tags/linked-list"},{label:"Divide and Conquer",permalink:"/docs/tags/divide-and-conquer"},{label:"Heap (Priority Queue)",permalink:"/docs/tags/heap-priority-queue"},{label:"Merge Sort",permalink:"/docs/tags/merge-sort"}],version:"current",sidebarPosition:7,frontMatter:{displayed_sidebar:null,sidebar_position:7,tags:["Linked List","Divide and Conquer","Heap (Priority Queue)","Merge Sort"]}},u=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],p={toc:u};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"merge-k-sorted-lists"},"Merge k Sorted Lists"),(0,r.kt)("h2",{id:"problem"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/merge-k-sorted-lists/"},"Problem")),(0,r.kt)("p",null,"You are given an array of ",(0,r.kt)("code",null,"k")," linked-lists ",(0,r.kt)("code",null,"lists"),", each linked-list is sorted in ascending order."),(0,r.kt)("p",null,(0,r.kt)("em",null,"Merge all the linked-lists into one sorted linked-list and return it.")),(0,r.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,r.kt)("p",null,"First ",(0,r.kt)("a",{parentName:"p",href:"merge-two-sorted-lists/"},"Merge two linked list")," and merge the third with resultant of the first two and so on."),(0,r.kt)("p",null,"Expected Time complexity: ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mi",{parentName:"mrow"},"k"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(nk)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"nk"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click - to see solution code"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        if (list1 == NULL) return list2;\n        if (list2 == NULL) return list1;\n\n        if (list1->val > list2->val) swap(list1, list2);\n        ListNode *head;\n        head = (ListNode*)malloc(sizeof(ListNode*));\n        head = list1;\n\n        while (list1->next != NULL && list2 != NULL) {\n            if (list1->next->val <= list2->val) {\n                list1 = list1->next;\n                continue;\n            }\n            ListNode *temp;\n            temp = (ListNode*)malloc(sizeof(ListNode*));\n            temp = list2;\n            list2 = list2->next;\n            temp->next = list1->next;\n            list1->next = temp;\n            list1 = list1->next;\n        }\n        if (list2 != NULL) {\n            list1->next = list2;\n        }\n        return head;\n    }\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        ListNode *head;\n        head = (ListNode*)malloc(sizeof(ListNode*));\n\n        if (lists.size() == 0) {\n            head = NULL;\n            return head;\n        }\n\n        head = lists[0];\n        for (int i = 1; i < lists.size(); i++) {\n            head = mergeTwoLists(head, lists[i]);\n        }\n        return head;\n    }\n};        \n"))))))}m.isMDXComponent=!0}}]);