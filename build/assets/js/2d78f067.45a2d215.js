"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[7548],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>m});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,v=d["".concat(s,".").concat(m)]||d[m]||p[m]||l;return t?n.createElement(v,o(o({ref:r},u),{},{components:t})):n.createElement(v,o({ref:r},u))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=d;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:(e,r,t)=>{t.d(r,{Z:()=>a});var n=t(7294);const a=function(e){let{children:r,hidden:t,className:a}=e;return n.createElement("div",{role:"tabpanel",hidden:t,className:a},r)}},9877:(e,r,t)=>{t.d(r,{Z:()=>u});var n=t(7462),a=t(7294),l=t(2389),o=t(5773),i=t(6010);const s="tabItem_LplD";function c(e){var r,t,l;const{lazy:c,block:u,defaultValue:p,values:d,groupId:m,className:v}=e,b=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=d?d:b.map((e=>{let{props:{value:r,label:t,attributes:n}}=e;return{value:r,label:t,attributes:n}})),g=(0,o.lx)(f,((e,r)=>e.value===r.value));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const h=null===p?p:null!=(r=null!=p?p:null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)?r:null==(l=b[0])?void 0:l.props.value;if(null!==h&&!f.some((e=>e.value===h)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+h+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:y,setTabGroupChoices:k}=(0,o.UB)(),[O,w]=(0,a.useState)(h),E=[],{blockElementScrollPositionUntilNextRender:P}=(0,o.o5)();if(null!=m){const e=y[m];null!=e&&e!==O&&f.some((r=>r.value===e))&&w(e)}const T=e=>{const r=e.currentTarget,t=E.indexOf(r),n=f[t].value;n!==O&&(P(r),w(n),null!=m&&k(m,n))},x=e=>{var r;let t=null;switch(e.key){case"ArrowRight":{const r=E.indexOf(e.currentTarget)+1;t=E[r]||E[0];break}case"ArrowLeft":{const r=E.indexOf(e.currentTarget)-1;t=E[r]||E[E.length-1];break}}null==(r=t)||r.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":u},v)},f.map((e=>{let{value:r,label:t,attributes:l}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:O===r?0:-1,"aria-selected":O===r,key:r,ref:e=>E.push(e),onKeyDown:x,onFocus:T,onClick:T},l,{className:(0,i.Z)("tabs__item",s,null==l?void 0:l.className,{"tabs__item--active":O===r})}),null!=t?t:r)}))),c?(0,a.cloneElement)(b.filter((e=>e.props.value===O))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},b.map(((e,r)=>(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==O})))))}function u(e){const r=(0,l.Z)();return a.createElement(c,(0,n.Z)({key:String(r)},e))}},8879:(e,r,t)=>{t.r(r),t.d(r,{frontMatter:()=>i,contentTitle:()=>s,metadata:()=>c,toc:()=>u,default:()=>d});var n=t(7462),a=(t(7294),t(3905)),l=t(9877),o=t(8215);const i={sidebar_position:7,tags:["Array","Sorting"]},s="Merge Intervals",c={unversionedId:"codes/merge-intervals",id:"codes/merge-intervals",title:"Merge Intervals",description:"Problem",source:"@site/docs/codes/merge-intervals.md",sourceDirName:"codes",slug:"/codes/merge-intervals",permalink:"/CodePrime/docs/codes/merge-intervals",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/merge-intervals.md",tags:[{label:"Array",permalink:"/CodePrime/docs/tags/array"},{label:"Sorting",permalink:"/CodePrime/docs/tags/sorting"}],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,tags:["Array","Sorting"]},sidebar:"main",previous:{title:"Arrays Part-II",permalink:"/CodePrime/docs/category/arrays-part-ii"},next:{title:"Merge Sorted Array",permalink:"/CodePrime/docs/codes/merge-sorted-array"}},u=[{value:"Problem",id:"problem",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],p={toc:u};function d(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"merge-intervals"},"Merge Intervals"),(0,a.kt)("h2",{id:"problem"},(0,a.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/merge-intervals/"},"Problem")),(0,a.kt)("p",null,"Given an array\xa0of ",(0,a.kt)("code",null,"intervals"),"\xa0where ",(0,a.kt)("code",null,"intervals[i] = [starti, endi]"),", merge all overlapping intervals, and return ",(0,a.kt)("em",null,"an array of the non-overlapping intervals that cover all the intervals in the input"),"."),(0,a.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click - to see solution code"),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n   public:\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        vector<vector<int>> ans;\n        sort(intervals.begin(), intervals.end());\n        int front = intervals[0][0];\n        int back = intervals[0][1];\n\n        for (int i = 1; i < intervals.size(); i++) {\n            int left = intervals[i][0];\n            int right = intervals[i][1];\n            if (left <= back && front <= right) {\n                front = min(left, front);\n                back = max(back, right);\n            } else {\n                ans.push_back({front, back});\n                front = left;\n                back = right;\n            }\n        }\n        ans.push_back({front, back});\n\n        return ans;\n    }\n};\n\n"))))))}d.isMDXComponent=!0}}]);