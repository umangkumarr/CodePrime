"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[1394],{3905:function(e,r,t){t.d(r,{Zo:function(){return c},kt:function(){return d}});var a=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=a.createContext({}),u=function(e){var r=a.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=u(e.components);return a.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},m=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(t),d=n,v=m["".concat(s,".").concat(d)]||m[d]||p[d]||l;return t?a.createElement(v,i(i({ref:r},c),{},{components:t})):a.createElement(v,i({ref:r},c))}));function d(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var u=2;u<l;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8215:function(e,r,t){var a=t(7294);r.Z=function(e){var r=e.children,t=e.hidden,n=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:n},r)}},9877:function(e,r,t){t.d(r,{Z:function(){return c}});var a=t(7462),n=t(7294),l=t(2389),i=t(9548),o=t(6010),s="tabItem_LplD";function u(e){var r,t,l,u=e.lazy,c=e.block,p=e.defaultValue,m=e.values,d=e.groupId,v=e.className,h=n.Children.map(e.children,(function(e){if((0,n.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=m?m:h.map((function(e){var r=e.props;return{value:r.value,label:r.label,attributes:r.attributes}})),b=(0,i.lx)(f,(function(e,r){return e.value===r.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===p?p:null!=(r=null!=p?p:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?r:null==(l=h[0])?void 0:l.props.value;if(null!==y&&!f.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=(0,i.UB)(),k=g.tabGroupChoices,T=g.setTabGroupChoices,N=(0,n.useState)(y),O=N[0],S=N[1],w=[],D=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var E=k[d];null!=E&&E!==O&&f.some((function(e){return e.value===E}))&&S(E)}var x=function(e){var r=e.currentTarget,t=w.indexOf(r),a=f[t].value;a!==O&&(D(r),S(a),null!=d&&T(d,a))},P=function(e){var r,t=null;switch(e.key){case"ArrowRight":var a=w.indexOf(e.currentTarget)+1;t=w[a]||w[0];break;case"ArrowLeft":var n=w.indexOf(e.currentTarget)-1;t=w[n]||w[w.length-1]}null==(r=t)||r.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":c},v)},f.map((function(e){var r=e.value,t=e.label,l=e.attributes;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:O===r?0:-1,"aria-selected":O===r,key:r,ref:function(e){return w.push(e)},onKeyDown:P,onFocus:x,onClick:x},l,{className:(0,o.Z)("tabs__item",s,null==l?void 0:l.className,{"tabs__item--active":O===r})}),null!=t?t:r)}))),u?(0,n.cloneElement)(h.filter((function(e){return e.props.value===O}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},h.map((function(e,r){return(0,n.cloneElement)(e,{key:r,hidden:e.props.value!==O})}))))}function c(e){var r=(0,l.Z)();return n.createElement(u,(0,a.Z)({key:String(r)},e))}},3527:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return m},default:function(){return v}});var a=t(7462),n=t(3366),l=(t(7294),t(3905)),i=t(9877),o=t(8215),s=["components"],u={sidebar_position:7,tags:["Tree","Depth-First Search","Binary Tree"]},c="Binary Tree Zigzag Level Order Traversal",p={unversionedId:"StriverSDESheet/Day18/Binary Tree Zigzag Level Order Traversal",id:"StriverSDESheet/Day18/Binary Tree Zigzag Level Order Traversal",title:"Binary Tree Zigzag Level Order Traversal",description:"Problem Link",source:"@site/docs/StriverSDESheet/Day18/Binary Tree Zigzag Level Order Traversal.md",sourceDirName:"StriverSDESheet/Day18",slug:"/StriverSDESheet/Day18/Binary Tree Zigzag Level Order Traversal",permalink:"/CodePrime/docs/StriverSDESheet/Day18/Binary Tree Zigzag Level Order Traversal",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/StriverSDESheet/Day18/Binary Tree Zigzag Level Order Traversal.md",tags:[{label:"Tree",permalink:"/CodePrime/docs/tags/tree"},{label:"Depth-First Search",permalink:"/CodePrime/docs/tags/depth-first-search"},{label:"Binary Tree",permalink:"/CodePrime/docs/tags/binary-tree"}],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,tags:["Tree","Depth-First Search","Binary Tree"]},sidebar:"tutorialSidebar",previous:{title:"Same Tree",permalink:"/CodePrime/docs/StriverSDESheet/Day18/Same Tree"},next:{title:"Boundary Traversal of binary tree",permalink:"/CodePrime/docs/StriverSDESheet/Day18/Boundary Traversal of binary tree"}},m=[{value:"Problem Link",id:"problem-link",children:[],level:2},{value:"Solution Approach",id:"solution-approach",children:[],level:2}],d={toc:m};function v(e){var r=e.components,t=(0,n.Z)(e,s);return(0,l.kt)("wrapper",(0,a.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"binary-tree-zigzag-level-order-traversal"},"Binary Tree Zigzag Level Order Traversal"),(0,l.kt)("h2",{id:"problem-link"},"Problem Link"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/"},"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/")),(0,l.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,l.kt)("p",null,"Expected Time complexity: ",(0,l.kt)("span",{parentName:"p",className:"math math-inline"},(0,l.kt)("span",{parentName:"span",className:"katex"},(0,l.kt)("span",{parentName:"span",className:"katex-mathml"},(0,l.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,l.kt)("semantics",{parentName:"math"},(0,l.kt)("mrow",{parentName:"semantics"},(0,l.kt)("mi",{parentName:"mrow"},"O"),(0,l.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,l.kt)("mi",{parentName:"mrow"},"n"),(0,l.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,l.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,l.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,l.kt)("span",{parentName:"span",className:"base"},(0,l.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,l.kt)("span",{parentName:"span",className:"mopen"},"("),(0,l.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,l.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Click - to see solution code"),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n    vector<vector<int>> ans;\n    int h = -1;\n\n   public:\n    void maxHeight(TreeNode* temp, int ht) {\n        if (temp == NULL) return;\n        h = max(ht, h);\n        maxHeight(temp->left, ht + 1);\n        maxHeight(temp->right, ht + 1);\n    }\n\n    void build(TreeNode* temp, int ht) {\n        if (temp == NULL) return;\n        ans[ht].push_back(temp->val);\n        build(temp->left, ht + 1);\n        build(temp->right, ht + 1);\n    }\n\n    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {\n        TreeNode* temp;\n        temp = new TreeNode;\n        temp = root;\n        maxHeight(temp, 0);\n        ans.resize(h + 1);\n        temp = root;\n        build(temp, 0);\n        for (int i = 1; i <= h; i += 2) {\n            reverse(ans[i].begin(), ans[i].end());\n        }\n        return ans;\n    }\n};\n"))))))}v.isMDXComponent=!0}}]);