"use strict";(self.webpackChunkcodeprime=self.webpackChunkcodeprime||[]).push([[9615],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=m(n),d=r,h=p["".concat(s,".").concat(d)]||p[d]||c[d]||l;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var m=2;m<l;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(4334);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(3117),r=n(7294),l=n(4334),o=n(2389),i=n(7392),s=n(7094),m=n(2466);const u="tabList__CuJ",c="tabItem_LNqP";function p(e){var t,n;const{lazy:o,block:p,defaultValue:d,values:h,groupId:b,className:f}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=h?h:k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),y=(0,i.l)(v,((e,t)=>e.value===t.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const N=null===d?d:null!=(t=null!=d?d:null==(n=k.find((e=>e.props.default)))?void 0:n.props.value)?t:k[0].props.value;if(null!==N&&!v.some((e=>e.value===N)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+v.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:g,setTabGroupChoices:w}=(0,s.U)(),[x,O]=(0,r.useState)(N),T=[],{blockElementScrollPositionUntilNextRender:j}=(0,m.o5)();if(null!=b){const e=g[b];null!=e&&e!==x&&v.some((t=>t.value===e))&&O(e)}const E=e=>{const t=e.currentTarget,n=T.indexOf(t),a=v[n].value;a!==x&&(j(t),O(a),null!=b&&w(b,String(a)))},P=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=T.indexOf(e.currentTarget)+1;n=null!=(a=T[t])?a:T[0];break}case"ArrowLeft":{var r;const t=T.indexOf(e.currentTarget)-1;n=null!=(r=T[t])?r:T[T.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":p},f)},v.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:e=>T.push(e),onKeyDown:P,onFocus:E,onClick:E},o,{className:(0,l.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),o?(0,r.cloneElement)(k.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})))))}function d(e){const t=(0,o.Z)();return r.createElement(p,(0,a.Z)({key:String(t)},e))}},5472:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>m,toc:()=>c});var a=n(3117),r=(n(7294),n(3905)),l=n(5488),o=n(5162);const i={sidebar_position:179,tags:["Array","Bit Manipulation","Trie"]},s="Maximum XOR With an Element From Array",m={unversionedId:"codes/maximum-xor-with-an-element-from-array",id:"codes/maximum-xor-with-an-element-from-array",title:"Maximum XOR With an Element From Array",description:"Problem",source:"@site/docs/codes/maximum-xor-with-an-element-from-array.md",sourceDirName:"codes",slug:"/codes/maximum-xor-with-an-element-from-array",permalink:"/CodePrime/docs/codes/maximum-xor-with-an-element-from-array",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codes/maximum-xor-with-an-element-from-array.md",tags:[{label:"Array",permalink:"/CodePrime/docs/tags/array"},{label:"Bit Manipulation",permalink:"/CodePrime/docs/tags/bit-manipulation"},{label:"Trie",permalink:"/CodePrime/docs/tags/trie"}],version:"current",sidebarPosition:179,frontMatter:{sidebar_position:179,tags:["Array","Bit Manipulation","Trie"]},sidebar:"Leetcode",previous:{title:"Implement Trie (Prefix Tree)",permalink:"/CodePrime/docs/codes/implement-trie-prefix-tree"},next:{title:"Striver DP Sheet",permalink:"/CodePrime/docs/category/striver-dp-sheet"}},u={},c=[{value:"Problem",id:"problem",level:2},{value:"Solution Approach",id:"solution-approach",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"maximum-xor-with-an-element-from-array"},"Maximum XOR With an Element From Array"),(0,r.kt)("h2",{id:"problem"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode.com/problems/maximum-xor-with-an-element-from-array/"},"Problem")),(0,r.kt)("p",null,"You are given an array ",(0,r.kt)("code",null,"nums")," consisting of non-negative integers. You are also given a ",(0,r.kt)("code",null,"queries")," array, where ",(0,r.kt)("code",null,"queries[i] = [xi, mi]"),"."),(0,r.kt)("p",null,"The answer to the ",(0,r.kt)("code",null,"ith")," query is the maximum bitwise ",(0,r.kt)("code",null,"XOR")," value of ",(0,r.kt)("code",null,"xi")," and any element of ",(0,r.kt)("code",null,"nums")," that does not exceed ",(0,r.kt)("code",null,"mi"),". In other words, the answer is ",(0,r.kt)("code",null,"max(nums[j] XOR xi)")," for all ",(0,r.kt)("code",null,"j")," such that ",(0,r.kt)("code",null,"nums[j] <= mi"),". If all elements in ",(0,r.kt)("code",null,"nums")," are larger than ",(0,r.kt)("code",null,"mi"),", then the answer is ",(0,r.kt)("code",null,"-1"),"."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",null,"an integer array "),(0,r.kt)("code",null,"answer"),(0,r.kt)("em",null," where "),(0,r.kt)("code",null,"answer.length == queries.length"),(0,r.kt)("em",null," and "),(0,r.kt)("code",null,"answer[i]"),(0,r.kt)("em",null," is the answer to the "),(0,r.kt)("code",null,"ith"),(0,r.kt)("em",null," query.")),(0,r.kt)("h2",{id:"solution-approach"},"Solution Approach"),(0,r.kt)("p",null,"Expected Time complexity: ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mi",{parentName:"mrow"},"l"),(0,r.kt)("mi",{parentName:"mrow"},"o"),(0,r.kt)("mi",{parentName:"mrow"},"g"),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(nlogn)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click - to see solution code"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"struct Node {\n    vector<Node*> v;\n    int val;\n    Node(int _val) {\n        v = {NULL, NULL};\n        val = _val;\n    }\n};\n\nclass Solution {\n   public:\n    Node* root;\n\n    void insert(int n) {\n        Node* temp = root;\n        int i = 0;\n        for (int i = 30; i >= 0; i--) {\n            int bit = (n & (1 << i));\n            if (temp->v[bit > 0] == NULL) {\n                Node* newNode = new Node(bit > 0);\n                temp->v[bit > 0] = newNode;\n            }\n            temp = temp->v[bit ? 1 : 0];\n        }\n    }\n\n    int query(int n) {\n        Node* temp = root;\n        int ans = 0;\n        for (int i = 30; i >= 0; i--) {\n            int bit = n & (1ll << i);\n            if (temp->v[bit == 0] != NULL) {\n                ans += (1ll << i);\n                temp = temp->v[bit == 0];\n            } else\n                temp = temp->v[bit != 0];\n        }\n        return ans;\n    }\n\n    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {\n        for (int i = 0; i < queries.size(); i++) {\n            queries[i].push_back(i);\n            swap(queries[i][0], queries[i][1]);\n        }\n        sort(queries.begin(), queries.end());\n        sort(nums.begin(), nums.end());\n        root = new Node(0);\n        int i = 0, j = 0;\n        vector<int> ans(queries.size());\n        while (j < queries.size()) {\n            while (i < nums.size() && nums[i] <= queries[j][0]) {\n                insert(nums[i]);\n                i++;\n            }\n\n            if (i == 0) {\n                ans[queries[j][2]] = -1;\n            } else {\n                ans[queries[j][2]] = query(queries[j][1]);\n            }\n            j++;\n        }\n        return ans;\n    }\n};\n\n"))))))}d.isMDXComponent=!0}}]);